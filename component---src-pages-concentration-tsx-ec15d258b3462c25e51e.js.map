{"version":3,"sources":["webpack:///./src/pages/concentration.tsx"],"names":["Card","styled","div","CardInner","flipped","css","Face","FrontFace","BackFace","color","colors","Concentration","useState","count","setCount","cards","setCards","time","setTime","startTime","useRef","Date","getTime","Array","length","fill","setFlipped","index","clicked","Set","handleStartButtonClick","useCallback","setTimeout","num","parseInt","shuffled","colorList","slice","list","concat","i","randomIndex","Math","floor","random","push","splice","shuffle","current","useEffect","newFlipped","size","first","second","every","f","endTime","newTime","alert","style","display","justifyContent","alignItems","flexDirection","height","maxWidth","marginBottom","onClick","map","card","idx","key","add","onSubmit","e","preventDefault","min","max","width","placeholder","type","value","onChange","target"],"mappings":"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","file":"component---src-pages-concentration-tsx-ec15d258b3462c25e51e.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Card = styled.div`\n  display: inline-block;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  width: 70px;\n  height: 100px;\n  perspective: 140px;\n`;\n\nconst CardInner = styled.div<{ flipped: boolean }>`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n  ${({ flipped }) =>\n    flipped\n      ? css`\n          transform: rotateY(180deg);\n        `\n      : ''};\n`;\n\nconst Face = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  backface-visibility: hidden;\n`;\n\nconst FrontFace = styled(Face)`\n  background: navy;\n`;\nconst BackFace = styled(Face)<{ color: string }>`\n  transform: rotateY(180deg);\n  background: ${({ color }) => color};\n`;\n\nconst colors = [\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'white',\n  'pink',\n  'cyan',\n  'violet',\n  'gray',\n  'black',\n];\nconst shuffle = (num: number) => {\n  const shuffled = [];\n  const colorList = colors.slice(0, num / 2);\n  const list = colorList.concat(colorList);\n  for (let i = 0; list.length > 0; i += 1) {\n    const randomIndex = Math.floor(Math.random() * list.length);\n    shuffled.push(list.splice(randomIndex, 1)[0]);\n  }\n  return shuffled;\n};\n\nconst Concentration: React.VFC = () => {\n  const [count, setCount] = useState('');\n  const [cards, setCards] = useState<string[]>([]);\n  const [time, setTime] = useState(0);\n  const startTime = useRef(new Date().getTime());\n  const [flipped, setFlipped] = useState<boolean[]>(\n    Array(cards.length).fill(false),\n  );\n  const index = useRef(0);\n  const clicked = useRef(new Set<number>());\n  const handleStartButtonClick = useCallback(() => {\n    setTimeout(() => {\n      const num = parseInt(count, 10);\n      setFlipped(Array(num).fill(false));\n      setCards(shuffle(num));\n      index.current = 0;\n      setTime(0);\n    }, 500);\n  }, [count]);\n  useEffect(() => {\n    if (!cards.length && flipped.length) {\n      return;\n    }\n    if (index.current < cards.length + 1) {\n      setTimeout(() => {\n        setFlipped((flipped) => {\n          const newFlipped = [...flipped];\n          newFlipped[index.current] = true;\n          index.current += 1;\n          return newFlipped;\n        });\n      }, 100);\n    }\n    if (index.current === cards.length + 1) {\n      setTimeout(() => {\n        setFlipped(Array(cards.length).fill(false));\n        index.current += 1;\n        startTime.current = new Date().getTime();\n      }, 3000);\n    }\n    if (clicked.current.size === 2) {\n      const [first, second] = [...clicked.current];\n      if (cards[first] === cards[second]) {\n        clicked.current = new Set();\n      }\n      if (cards[first] !== cards[second]) {\n        setTimeout(() => {\n          clicked.current = new Set();\n          setFlipped((flipped) => {\n            const newFlipped = [...flipped];\n            newFlipped[first] = false;\n            newFlipped[second] = false;\n            return newFlipped;\n          });\n        }, 500);\n      }\n    }\n    if (index.current > cards.length + 1 && flipped.every((f) => !!f)) {\n      const endTime = new Date().getTime();\n      const newTime = Math.floor((endTime - startTime.current) / 1000);\n      setTime(newTime);\n      setTimeout(() => {\n        alert('축하합니다.');\n      }, 500);\n    }\n  }, [flipped, cards]);\n  if (!cards.length) {\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const num = parseInt(count, 10);\n          if (num > 20 || num < 2) {\n            return alert('2 이상 20 이하의 숫자를 입력해주세요.');\n          }\n          if (num % 2 !== 0) {\n            return alert('짝수를 입력해주세요.');\n          }\n          handleStartButtonClick();\n        }}\n      >\n        <input\n          min={2}\n          max={20}\n          style={{ width: 300 }}\n          placeholder=\"카드 개수를 짝수로 입력하세요(최대 20)\"\n          type=\"number\"\n          value={count}\n          onChange={(e) => setCount(e.target.value)}\n        />\n        <button type=\"submit\">시작</button>\n      </form>\n    );\n  }\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        height: '100vh',\n      }}\n    >\n      <div style={{ maxWidth: 360 }}>\n        <div>\n          {!!time && (\n            <div style={{ marginBottom: 8 }}>\n              <div>{time}초</div>\n              <button\n                onClick={() => {\n                  setCards([]);\n                  setCount('');\n                }}\n              >\n                재시작하시겠습니까?\n              </button>\n            </div>\n          )}\n        </div>\n        <div>\n          {cards.map((card, idx) => {\n            return (\n              <Card key={`${card}-${idx}`}>\n                <CardInner\n                  flipped={flipped[idx]}\n                  onClick={() => {\n                    if (\n                      !!flipped[idx] ||\n                      clicked.current.size >= 2 ||\n                      index.current < cards.length + 1\n                    ) {\n                      return;\n                    }\n                    clicked.current.add(idx);\n                    setFlipped((flipped) => {\n                      const newFlipped = [...flipped];\n                      newFlipped[idx] = true;\n                      return newFlipped;\n                    });\n                  }}\n                >\n                  <FrontFace />\n                  <BackFace color={card} />\n                </CardInner>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Concentration;\n"],"sourceRoot":""}