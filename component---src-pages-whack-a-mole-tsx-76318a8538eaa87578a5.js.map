{"version":3,"sources":["webpack:///./src/pages/whack-a-mole.tsx"],"names":["Row","styled","div","Cell","Base","hidden","Gopher","hit","css","Bomb","Hole","HoleFront","WhackAMole","useState","Array","fill","holes","setHoles","start","useRef","score","setScore","time","setTime","life","setLife","timeoutId","useEffect","current","setTimeout","alert","endTime","Date","getTime","Math","floor","clearInterval","setInterval","newHoles","forEach","hole","idx","randomValue","random","onClick","map","key","abs"],"mappings":"oJAGMA,EAAMC,IAAOC,IAAV,wEAAGD,CAAH,kBAIHE,EAAOF,IAAOC,IAAV,yEAAGD,CAAH,0GASJG,EAAOH,IAAOC,IAAV,yEAAGD,CAAH,6GAKE,qBAAGI,QAAuB,KAKhCC,EAASL,YAAOG,GAAV,2EAAGH,CAAH,+GAGR,qBAAGM,KAEHC,YADG,sEAMDC,EAAOR,YAAOG,GAAV,yEAAGH,CAAH,6GAGN,qBAAGM,KAEHC,YADG,kEAKDE,EAAOT,IAAOC,IAAV,yEAAGD,CAAH,mKAQJU,EAAYV,IAAOC,IAAV,8EAAGD,CAAH,uKAoHAW,UA1Ge,WAC5B,MAA0BC,mBAAmBC,MAAM,GAAGC,KAAK,IAApDC,EAAP,KAAcC,EAAd,KACMC,EAAQC,iBAAO,MACrB,EAA0BN,mBAAS,GAA5BO,EAAP,KAAcC,EAAd,KACA,EAAwBR,mBAAS,GAA1BS,EAAP,KAAaC,EAAb,KACA,EAAwBV,mBAAS,GAA1BW,EAAP,KAAaC,EAAb,KACMC,EAAYP,iBAAO,MAqDzB,OApDAQ,qBAAU,WACJH,EAAO,IACTN,EAAMU,QAAU,KAChBC,YAAW,WACTC,MAAM,WACL,QAEJ,CAACN,IACJG,qBAAU,WACRJ,GAAQ,WACN,IAAMQ,GAAU,IAAIC,MAAOC,UACrBX,EAAOY,KAAKC,OAAOJ,EAAUb,EAAMU,SAAW,KAEpD,OADkB,GACFN,EAAO,GACrBJ,EAAMU,QAAU,KAChBQ,cAAcV,EAAUE,SACjB,GAJS,GAMCN,OAEpB,CAACN,IACJW,qBAAU,WAKR,GAJKT,EAAMU,UACTQ,cAAcV,EAAUE,SACxBX,EAASH,MAAM,GAAGC,KAAK,KAErBG,EAAMU,QAqBR,OApBAF,EAAUE,QAAUS,aAAY,WAC9BpB,GAAS,SAACD,GACR,IAAMsB,EAAW,YAAItB,GAerB,OAZAA,EAAMuB,SAAQ,SAACC,EAAMC,GACnB,IAAMC,EAAcR,KAAKS,SACrBH,EAAO,GAAKA,EAAO,EACrBF,EAASG,IAAwB,EAAjBH,EAASG,GACP,IAATD,EACTF,EAASG,GAAO,EACPC,EARQ,GASjBJ,EAASG,GAAO,EACPC,EATO,KAUhBJ,EAASG,GAAO,MAGbH,OAER,KACI,WACLF,cAAcV,EAAUE,YAG3B,CAACV,EAAMU,UAER,6BACE,6BACGN,EADH,KACWF,EADX,OACsBI,EACpB,4BACEoB,QAAS,WACP1B,EAAMU,SAAU,IAAII,MAAOC,UAC3BV,EAAQ,IACRN,EAASH,MAAM,GAAGC,KAAK,IACvBU,EAAQ,GACRJ,EAAS,KANb,OAYF,kBAACrB,EAAD,KACGgB,EAAM6B,KAAI,SAACL,EAAcC,GACxB,OACE,kBAACtC,EAAD,CACE2C,IAAKL,EACLG,QAAS,WACP3B,GAAS,SAACD,GACR,IAAMsB,EAAW,YAAItB,GASrB,OAR6B,IAAzBkB,KAAKa,IAAI/B,EAAMyB,MACjBpB,GAAS,SAACD,GAAD,OAAWA,EAAQ,KAC5BkB,EAASG,GAAO,GAEW,IAAzBP,KAAKa,IAAI/B,EAAMyB,MACjBhB,GAAQ,SAACD,GAAD,OAAUA,EAAO,KACzBc,EAASG,GAAO,GAEXH,OAIX,kBAAC5B,EAAD,MACA,kBAACJ,EAAD,CAAQD,OAAiB,IAATmC,EAAYjC,IAAc,IAATiC,IAAwB,IAAVA,IAC/C,kBAAC/B,EAAD,CAAMJ,OAAiB,IAATmC,EAAYjC,IAAc,IAATiC,IAAwB,IAAVA,IAC7C,kBAAC7B,EAAD","file":"component---src-pages-whack-a-mole-tsx-76318a8538eaa87578a5.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Row = styled.div`\n  width: 600px;\n`;\n\nconst Cell = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 200px;\n  height: 200px;\n  background: 'yellow';\n  overflow: hidden;\n`;\n\nconst Base = styled.div<{ hidden: boolean; hit: boolean }>`\n  display: block;\n  width: 200px;\n  height: 200px;\n  bottom: -200px;\n  bottom: ${({ hidden }) => hidden && 0};\n  position: absolute;\n  transition: bottom 1s;\n`;\n\nconst Gopher = styled(Base)`\n  background: url('/images/whack-a-mole/gopher.png') center center no-repeat;\n  background-size: 200px 200px;\n  ${({ hit }) =>\n    hit &&\n    css`\n      background-image: url('/images/whack-a-mole/dead_gopher.png');\n    `}\n`;\n\nconst Bomb = styled(Base)`\n  background: url('/images/whack-a-mole/bomb.png') center center no-repeat;\n  background-size: 200px 200px;\n  ${({ hit }) =>\n    hit &&\n    css`\n      background-image: url('/images/whack-a-mole/explode.png');\n    `}\n`;\nconst Hole = styled.div`\n  width: 200px;\n  height: 150px;\n  position: absolute;\n  bottom: 0;\n  background: url('/images/whack-a-mole/mole-hole.png') center center no-repeat;\n  background-size: 200px 150px;\n`;\nconst HoleFront = styled.div`\n  width: 200px;\n  height: 30px;\n  position: absolute;\n  bottom: 0;\n  background: url('/images/whack-a-mole/mole-hole-front.png') center center\n    no-repeat;\n  background-size: 200px 30px;\n`;\n\nconst WhackAMole: React.VFC = () => {\n  const [holes, setHoles] = useState<number[]>(Array(9).fill(0));\n  const start = useRef(null);\n  const [score, setScore] = useState(0);\n  const [time, setTime] = useState(0);\n  const [life, setLife] = useState(3);\n  const timeoutId = useRef(null);\n  useEffect(() => {\n    if (life < 1) {\n      start.current = null;\n      setTimeout(() => {\n        alert('게임 종료');\n      }, 1000);\n    }\n  }, [life]);\n  useEffect(() => {\n    setTime(() => {\n      const endTime = new Date().getTime();\n      const time = Math.floor((endTime - start.current) / 1000);\n      const totalTime = 60;\n      if (totalTime - time < 1) {\n        start.current = null;\n        clearInterval(timeoutId.current);\n        return 0;\n      }\n      return totalTime - time;\n    });\n  }, [holes]);\n  useEffect(() => {\n    if (!start.current) {\n      clearInterval(timeoutId.current);\n      setHoles(Array(9).fill(0));\n    }\n    if (start.current) {\n      timeoutId.current = setInterval(() => {\n        setHoles((holes) => {\n          const newHoles = [...holes];\n          const goherPercent = 0.3;\n          const bombPercent = 0.5;\n          holes.forEach((hole, idx) => {\n            const randomValue = Math.random();\n            if (hole > 0 && hole < 5) {\n              newHoles[idx] = newHoles[idx] * -1;\n            } else if (hole !== 0) {\n              newHoles[idx] = 0;\n            } else if (randomValue < goherPercent) {\n              newHoles[idx] = 1;\n            } else if (randomValue < bombPercent) {\n              newHoles[idx] = 2;\n            }\n          });\n          return newHoles;\n        });\n      }, 1000);\n      return () => {\n        clearInterval(timeoutId.current);\n      };\n    }\n  }, [start.current]);\n  return (\n    <div>\n      <div>\n        {time}초 {score}점 생명{life}\n        <button\n          onClick={() => {\n            start.current = new Date().getTime();\n            setTime(60);\n            setHoles(Array(9).fill(0));\n            setLife(3);\n            setScore(0);\n          }}\n        >\n          시작\n        </button>\n      </div>\n      <Row>\n        {holes.map((hole: number, idx) => {\n          return (\n            <Cell\n              key={idx}\n              onClick={() => {\n                setHoles((holes) => {\n                  const newHoles = [...holes];\n                  if (Math.abs(holes[idx]) === 1) {\n                    setScore((score) => score + 1);\n                    newHoles[idx] = 3;\n                  }\n                  if (Math.abs(holes[idx]) === 2) {\n                    setLife((life) => life - 1);\n                    newHoles[idx] = 4;\n                  }\n                  return newHoles;\n                });\n              }}\n            >\n              <Hole />\n              <Gopher hidden={hole === 1} hit={hole === 3 || hole === -3} />\n              <Bomb hidden={hole === 2} hit={hole === 4 || hole === -4} />\n              <HoleFront />\n            </Cell>\n          );\n        })}\n      </Row>\n    </div>\n  );\n};\nexport default WhackAMole;\n"],"sourceRoot":""}