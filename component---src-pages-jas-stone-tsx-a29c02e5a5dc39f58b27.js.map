{"version":3,"sources":["webpack:///./src/pages/jas-stone.tsx"],"names":["Card","styled","div","on","off","My","turn","Rival","MyDeck","RivalDeck","CardAttribute","CardCost","CardAtt","CardHp","TurnButton","button","CardFactory","isHero","att","Math","ceil","random","heroHp","hp","cost","floor","JasStone","useState","myHero","setMyHero","rivalHero","setRivalHero","rivalCost","setRivalCost","myCost","setMyCost","myTurn","setMyTurn","myDeck","setMyDeck","riverDeck","setRiverDeck","rivalFiled","setRivalFiled","myFiled","setMyFiled","selectFiled","setSelectFiled","attackCards","setAttackCards","attackHero","setAttackHero","myMaxCost","setMyMaxCost","rivalMaxCost","setRivalMaxCost","deckClick","deck","filed","idx","my","newCost","newDeck","filter","_","index","newFiled","filedClick","masterFiled","slaveFiled","card","map","masterHp","masterNewFiled","setTimeout","alert","hero","newAttackCards","heroClick","style","textAlign","onClick","height","Fragment","key","JSON","stringify","min"],"mappings":"oJAGMA,EAAOC,IAAOC,IAAV,sEAAGD,CAAH,yHAKQ,qBAAGE,GAAe,UAAY,eAEhC,qBAAGC,IAAiB,OAAS,WAGvCC,EAAKJ,IAAOC,IAAV,oEAAGD,CAAH,+EAIQ,qBAAGK,KAAmB,QAAU,UAG1CC,EAAQN,YAAOI,GAAV,uEAAGJ,CAAH,4BAILO,EAASP,IAAOC,IAAV,wEAAGD,CAAH,8FAONQ,EAAYR,YAAOO,GAAV,2EAAGP,CAAH,MAETS,EAAgBT,IAAOC,IAAV,+EAAGD,CAAH,yLAabU,EAAWV,YAAOS,GAAV,0EAAGT,CAAH,iEAORW,EAAUX,YAAOS,GAAV,yEAAGT,CAAH,qCAIPY,EAASZ,YAAOS,GAAV,wEAAGT,CAAH,+CAMNa,EAAab,IAAOc,OAAV,4EAAGd,CAAH,8CAMVe,EAAc,SAACC,GACnB,IAAMC,EAAMD,EACRE,KAAKC,KAAqB,EAAhBD,KAAKE,UACfF,KAAKC,KAAqB,EAAhBD,KAAKE,UACbC,EAASL,EAAS,GAAK,EACvBM,EAAKJ,KAAKC,KAAqB,EAAhBD,KAAKE,UAAgBC,EAE1C,MAAO,CACLJ,MACAK,KACAC,KAJWL,KAAKM,OAAOP,EAAMK,GAAM,KAiWxBG,UAzVa,WAC1B,MAA4BC,mBAASX,GAAY,IAA1CY,EAAP,KAAeC,EAAf,KACA,EAAkCF,mBAASX,GAAY,IAAhDc,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,mBAAS,GAApCK,EAAP,KAAkBC,EAAlB,KACA,EAA4BN,mBAAS,GAA9BO,EAAP,KAAeC,EAAf,KACA,EAA4BR,oBAAS,GAA9BS,EAAP,KAAeC,EAAf,KACA,EAA4BV,mBAAS,CACnCX,IACAA,IACAA,IACAA,IACAA,MALKsB,EAAP,KAAeC,EAAf,KAOA,EAAkCZ,mBAAS,CACzCX,IACAA,IACAA,IACAA,IACAA,MALKwB,EAAP,KAAkBC,EAAlB,KAOA,EAAoCd,mBAAS,IAAtCe,EAAP,KAAmBC,EAAnB,KACA,EAA8BhB,mBAAS,IAAhCiB,EAAP,KAAgBC,EAAhB,KACA,EAAsClB,mBAAS,MAAxCmB,EAAP,KAAoBC,EAApB,KACA,EAAsCpB,mBAAS,IAAxCqB,EAAP,KAAoBC,EAApB,KACA,EAAoCtB,oBAAS,GAAtCuB,EAAP,KAAmBC,EAAnB,KACA,EAAkCxB,mBAAS,GAApCyB,EAAP,KAAkBC,EAAlB,KACA,EAAwC1B,mBAAS,GAA1C2B,EAAP,KAAqBC,GAArB,KACMC,GAAY,SAAC,GAAyC,IAAvClD,EAAuC,EAAvCA,KAAMmD,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,MAAOlC,EAAoB,EAApBA,KAAMmC,EAAc,EAAdA,IAAKC,EAAS,EAATA,GACjD,GAAKtD,EAAL,CAGA,IAAMuD,EAAUrC,EAAOiC,EAAKE,GAAKnC,KACjC,KAAIqC,EAAU,GAAd,CAGA,IAAMC,EAAU,GAAH,mBACRtB,EAAUuB,QAAO,SAACC,EAAGC,GACtB,OAAOA,IAAUN,MAFR,CAIX3C,MAEIkD,EAAW,GAAH,mBAAOR,GAAP,CAAcD,EAAKE,KAC7BC,GACFf,EAAWqB,GACX/B,EAAU0B,GACVtB,EAAUuB,KAEVnB,EAAcuB,GACdjC,EAAa4B,GACbpB,EAAaqB,OAGXK,GAAa,SAAC,GAA+C,IAA7C7D,EAA6C,EAA7CA,KAAMsD,EAAuC,EAAvCA,GAAID,EAAmC,EAAnCA,IAAKS,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAC1CJ,EAAQnB,EACd,IAAIxC,IAAQ0C,EAAYW,GAGxB,GAAIrD,EACFyC,EAAeY,QAGjB,GAAoB,OAAhBb,EAAJ,CAGA,IAAMwB,GAAkB,IAAXL,EAAgBL,EAAK9B,EAAYF,EAAUwC,EAAYH,GAC9D1C,EAAK8C,EAAWV,GAAKpC,GAAK+C,EAAKpD,IACjCgD,EAAW,GAEbA,EADE3C,GAAM,EACG8C,EAAWN,QAAO,SAACC,EAAGC,GAAJ,OAAcN,IAAQM,KAExCI,EAAWE,KAAI,SAACD,EAAML,GAC/B,OAAIN,IAAQM,EACHK,EAET,iBAAYA,EAAZ,CAAkB/C,UAGtB,IAAMiD,EAAWF,EAAK/C,GAAK8C,EAAWV,GAAKzC,IACvCuD,EAAiB,IACN,IAAXR,GAAgBO,GAAY,EAC9BC,EAAiBL,EAAYL,QAAO,SAACC,EAAGL,GAAJ,OAAYA,IAAQM,MACpC,IAAXA,EACTQ,EAAiBL,EAAYG,KAAI,SAACD,EAAMX,GACtC,OAAIA,IAAQM,EACHK,EAET,iBAAYA,EAAZ,CAAkB/C,WAGpBkD,EAAiBL,EACbI,GAAY,GACdE,YACE,kBAAMC,MAASf,EAAK,WAAa,cACjC,KAGAA,EACF7B,GAAa,SAAC6C,GAAD,wBAAgBA,EAAhB,CAAsBrD,GAAIiD,OAEvC3C,GAAU,SAAC+C,GAAD,wBAAgBA,EAAhB,CAAsBrD,GAAIiD,QAIxC7B,EAAciB,EAAKa,EAAiBP,GACpCrB,EAAWe,EAAKM,EAAWO,GAC3BxB,GAAe,SAACD,GACd,IAAM6B,EAAiB,YAAI7B,GAE3B,OADA6B,EAAeZ,IAAS,EACjBY,KAET9B,EAAe,OACA,IAAXkB,GACFd,GAAc,KAGZ2B,GAAY,SAAC,GAAoC,IAAlCxE,EAAkC,EAAlCA,KAAMsD,EAA4B,EAA5BA,GAAIgB,EAAwB,EAAxBA,KAAMR,EAAkB,EAAlBA,YAC7BH,EAAQnB,EACd,IAAIxC,IAAQ4C,EAGZ,GAAI5C,GAAwB,OAAhBwC,EACVC,GAAgB,QAGlB,GAAKzC,GAAwB,OAAhBwC,EAAb,CAGA,IAAMwB,GAAkB,IAAXL,EAAgBL,EAAK9B,EAAYF,EAAUwC,EAAYH,GAC9D1C,EAAKqD,EAAKrD,GAAK+C,EAAKpD,IACpBsD,EAAWF,EAAK/C,GAAKqD,EAAK1D,IAkBhC,GAjBIK,GAAM,GACRmD,YACE,kBAAMC,MAASf,EAAK,WAAa,cACjC,KAGAA,GACF/B,GAAU,SAAC+C,GAAD,wBAAgBA,EAAhB,CAAsBrD,WACjB,IAAX0C,GACFlC,GAAa,SAAC6C,GAAD,wBAAgBA,EAAhB,CAAsBrD,GAAIiD,SAGzCzC,GAAa,SAAC6C,GAAD,wBAAgBA,EAAhB,CAAsBrD,WACpB,IAAX0C,GACFpC,GAAU,SAAC+C,GAAD,wBAAgBA,EAAhB,CAAsBrD,GAAIiD,SAGzB,IAAXP,EAAc,CAChB,IAAIQ,EAAiB,GACjBD,GAAY,EACdC,EAAiBL,EAAYL,QAAO,SAACC,EAAGL,GAAJ,OAAYA,IAAQM,MACpC,IAAXA,IACTQ,EAAiBL,EAAYG,KAAI,SAACD,EAAMX,GACtC,OAAIA,IAAQM,EACHK,EAET,iBAAYA,EAAZ,CAAkB/C,GAAIiD,QAGtBZ,EACFjB,EAAc8B,GAEd5B,EAAW4B,GAGfxB,GAAe,SAACD,GACd,IAAM6B,EAAiB,YAAI7B,GAE3B,OADA6B,EAAeZ,IAAS,EACjBY,KAET9B,EAAe,OACA,IAAXkB,GACFd,GAAc,KAGlB,OACE,oCACE,kBAAC5C,EAAD,CAAOD,MAAO8B,GACZ,qCACO,8BAAOJ,GADd,IACgC,8BAAOsB,IAEvC,yBAAKyB,MAAO,CAAEC,UAAW,WACvB,kBAAChF,EAAD,CACEI,KAAMgC,KAAYc,EAClB/C,IAAKiC,IAA2B,IAAjBU,EACfmC,QAAS,WACPH,GAAU,CACRxE,MAAO8B,EACPwB,IAAI,EACJgB,KAAM9C,EACNsC,YAAaxB,MAIjB,qCACA,kBAAChC,EAAD,KAAUkB,EAAUZ,KACpB,kBAACL,EAAD,KAASiB,EAAUP,MAGvB,yBAAKwD,MAAO,CAAEC,UAAW,SAAUE,OAAQ,MACxCxC,EAAW6B,KAAI,SAACD,EAAMX,GACrB,OACE,kBAAC,IAAMwB,SAAP,CAAgBC,IAAQC,KAAKC,UAAUhB,GAApB,IAA6BX,GAC9C,kBAAC3D,EAAD,CACEI,KAAMgC,GAAUY,EAAYW,GAC5BxD,IAAKiC,GAAUU,IAAgBa,EAC/BsB,QAAS,WACPd,GAAW,CACT7D,MAAO8B,EACPwB,IAAI,EACJQ,YAAaxB,EACbyB,WAAY3B,EACZiB,UAIJ,kBAAChD,EAAD,KAAW2D,EAAK9C,MAChB,kBAACZ,EAAD,KAAU0D,EAAKpD,KACf,kBAACL,EAAD,KAASyD,EAAK/C,WAO1B,kBAACd,EAAD,KACE,kCACC+B,EAAU+B,KAAI,SAACD,EAAMX,GACpB,OACE,kBAAC,IAAMwB,SAAP,CAAgBC,IAAQC,KAAKC,UAAUhB,GAApB,IAA6BX,GAC9C,kBAAC3D,EAAD,CACEiF,QAAS,WACPzB,GAAU,CACRlD,MAAO8B,EACPZ,KAAMQ,EACNyB,KAAMjB,EACNkB,MAAOhB,EACPiB,MACAC,IAAI,MAIR,kBAACjD,EAAD,KAAW2D,EAAK9C,MAChB,kBAACZ,EAAD,KAAU0D,EAAKpD,KACf,kBAACL,EAAD,KAASyD,EAAK/C,UAMxB,6BACA,kBAACT,EAAD,CACEmE,QAAS,WACH7C,GACFiB,GAAa,SAAC7B,GAAD,OAAUL,KAAKoE,IAAI/D,EAAO,EAAG,OAC1CW,EAAUhB,KAAKoE,IAAInC,EAAY,EAAG,OAElCG,IAAgB,SAAC/B,GAAD,OAAUL,KAAKoE,IAAI/D,EAAO,EAAG,OAC7CS,EAAad,KAAKoE,IAAIjC,EAAe,EAAG,MAE1CP,EAAe,MACfE,EAAe,IACfE,GAAc,GACdd,GAAU,SAACD,GAAD,OAAaA,OAZ3B,QAiBA,kBAAC/B,EAAD,CAAIC,KAAM8B,GACR,yBAAK2C,MAAO,CAAEC,UAAW,SAAUE,OAAQ,MACxCtC,EAAQ2B,KAAI,SAACD,EAAMX,GAClB,OACE,kBAAC,IAAMwB,SAAP,CAAgBC,IAAQC,KAAKC,UAAUhB,GAApB,IAA6BX,GAC9C,kBAAC3D,EAAD,CACEI,MAAOgC,GAAUY,EAAYW,GAC7BxD,KAAMiC,GAAUU,IAAgBa,EAChCsB,QAAS,WACPd,GAAW,CACT7D,KAAM8B,EACNwB,IAAI,EACJQ,YAAa1B,EACb2B,WAAYzB,EACZe,UAIJ,kBAAChD,EAAD,KAAW2D,EAAK9C,MAChB,kBAACZ,EAAD,KAAU0D,EAAKpD,KACf,kBAACL,EAAD,KAASyD,EAAK/C,UAMxB,yBAAKwD,MAAO,CAAEC,UAAW,WACvB,kBAAChF,EAAD,CACEI,MAAOgC,KAAYc,EACnB/C,KAAMiC,IAA2B,IAAjBU,EAChBmC,QAAS,WACPH,GAAU,CACRxE,KAAM8B,EACNwB,IAAI,EACJgB,KAAMhD,EACNwC,YAAa1B,MAIjB,qCACA,kBAAC9B,EAAD,KAAUgB,EAAOV,KACjB,kBAACL,EAAD,KAASe,EAAOL,MAGpB,qCACO,8BAAOW,GADd,IAC6B,8BAAOkB,KAGtC,kBAAC5C,EAAD,KACE,kCACC8B,EAAOiC,KAAI,SAACD,EAAMX,GACjB,OACE,kBAAC,IAAMwB,SAAP,CAAgBC,IAAQC,KAAKC,UAAUhB,GAApB,IAA6BX,GAC9C,kBAAC3D,EAAD,CACEiF,QAAS,WACPzB,GAAU,CACRlD,KAAM8B,EACNZ,KAAMU,EACNuB,KAAMnB,EACNoB,MAAOd,EACPe,MACAC,IAAI,MAIR,kBAACjD,EAAD,KAAW2D,EAAK9C,MAChB,kBAACZ,EAAD,KAAU0D,EAAKpD,KACf,kBAACL,EAAD,KAASyD,EAAK/C","file":"component---src-pages-jas-stone-tsx-a29c02e5a5dc39f58b27.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Card = styled.div<{ on?: boolean; off?: boolean }>`\n  width: 75px;\n  height: 120px;\n  display: inline-block;\n  position: relative;\n  border: solid ${({ on }) => (on ? '3px red' : '1px black')};\n  margin-bottom: 10px;\n  background: ${({ off }) => (off ? 'gray' : 'white')}; ;\n`;\n\nconst My = styled.div<{ turn: boolean }>`\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 50px;\n  background: ${({ turn }) => (turn ? 'white' : 'gray')};\n`;\n\nconst Rival = styled(My)`\n  vertical-align: bottom;\n`;\n\nconst MyDeck = styled.div`\n  display: inline-block;\n  vertical-align: top;\n  width: 300px;\n  background: silver;\n  text-align: center;\n`;\nconst RivalDeck = styled(MyDeck)``;\n\nconst CardAttribute = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  text-align: center;\n  line-height: 30px;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  display: inline-block;\n  position: absolute;\n  bottom: 0;\n  border: 1px solid black;\n`;\nconst CardCost = styled(CardAttribute)`\n  bottom: auto;\n  top: 0;\n  left: 0;\n  background-color: blue;\n  color: white;\n`;\nconst CardAtt = styled(CardAttribute)`\n  left: 0;\n  background-color: yellow;\n`;\nconst CardHp = styled(CardAttribute)`\n  right: 0;\n  background-color: red;\n  color: white;\n`;\n\nconst TurnButton = styled.button`\n  float: right;\n  position: relative;\n  top: -23px;\n`;\n\nconst CardFactory = (isHero?: boolean) => {\n  const att = isHero\n    ? Math.ceil(Math.random() * 2)\n    : Math.ceil(Math.random() * 5);\n  const heroHp = isHero ? 25 : 0;\n  const hp = Math.ceil(Math.random() * 5) + heroHp;\n  const cost = Math.floor((att + hp) / 2);\n  return {\n    att,\n    hp,\n    cost,\n  };\n};\n\nconst JasStone: React.VFC = () => {\n  const [myHero, setMyHero] = useState(CardFactory(true));\n  const [rivalHero, setRivalHero] = useState(CardFactory(true));\n  const [rivalCost, setRivalCost] = useState(1);\n  const [myCost, setMyCost] = useState(1);\n  const [myTurn, setMyTurn] = useState(true);\n  const [myDeck, setMyDeck] = useState([\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n  ]);\n  const [riverDeck, setRiverDeck] = useState([\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n  ]);\n  const [rivalFiled, setRivalFiled] = useState([]);\n  const [myFiled, setMyFiled] = useState([]);\n  const [selectFiled, setSelectFiled] = useState(null);\n  const [attackCards, setAttackCards] = useState([]);\n  const [attackHero, setAttackHero] = useState(false);\n  const [myMaxCost, setMyMaxCost] = useState(1);\n  const [rivalMaxCost, setRivalMaxCost] = useState(1);\n  const deckClick = ({ turn, deck, filed, cost, idx, my }) => {\n    if (!turn) {\n      return;\n    }\n    const newCost = cost - deck[idx].cost;\n    if (newCost < 0) {\n      return;\n    }\n    const newDeck = [\n      ...riverDeck.filter((_, index) => {\n        return index !== idx;\n      }),\n      CardFactory(),\n    ];\n    const newFiled = [...filed, deck[idx]];\n    if (my) {\n      setMyFiled(newFiled);\n      setMyCost(newCost);\n      setMyDeck(newDeck);\n    } else {\n      setRivalFiled(newFiled);\n      setRivalCost(newCost);\n      setRiverDeck(newDeck);\n    }\n  };\n  const filedClick = ({ turn, my, idx, masterFiled, slaveFiled }) => {\n    const index = selectFiled;\n    if (turn && attackCards[idx]) {\n      return;\n    }\n    if (turn) {\n      setSelectFiled(idx);\n      return;\n    }\n    if (selectFiled === null) {\n      return;\n    }\n    const card = index === -1 ? (my ? rivalHero : myHero) : masterFiled[index];\n    const hp = slaveFiled[idx].hp - card.att;\n    let newFiled = [];\n    if (hp <= 0) {\n      newFiled = slaveFiled.filter((_, index) => idx !== index);\n    } else {\n      newFiled = slaveFiled.map((card, index) => {\n        if (idx !== index) {\n          return card;\n        }\n        return { ...card, hp };\n      });\n    }\n    const masterHp = card.hp - slaveFiled[idx].att;\n    let masterNewFiled = [];\n    if (index !== -1 && masterHp <= 0) {\n      masterNewFiled = masterFiled.filter((_, idx) => idx !== index);\n    } else if (index !== -1) {\n      masterNewFiled = masterFiled.map((card, idx) => {\n        if (idx !== index) {\n          return card;\n        }\n        return { ...card, hp };\n      });\n    } else {\n      masterNewFiled = masterFiled;\n      if (masterHp <= 0) {\n        setTimeout(\n          () => alert(`${my ? '승리하셨습니다.' : '패배하였습니다.'}`),\n          500,\n        );\n      }\n      if (my) {\n        setRivalHero((hero) => ({ ...hero, hp: masterHp }));\n      } else {\n        setMyHero((hero) => ({ ...hero, hp: masterHp }));\n      }\n    }\n\n    setRivalFiled(my ? masterNewFiled : newFiled);\n    setMyFiled(my ? newFiled : masterNewFiled);\n    setAttackCards((attackCards) => {\n      const newAttackCards = [...attackCards];\n      newAttackCards[index] = true;\n      return newAttackCards;\n    });\n    setSelectFiled(null);\n    if (index === -1) {\n      setAttackHero(true);\n    }\n  };\n  const heroClick = ({ turn, my, hero, masterFiled }) => {\n    const index = selectFiled;\n    if (turn && attackHero) {\n      return;\n    }\n    if (turn && selectFiled === null) {\n      setSelectFiled(-1);\n      return;\n    }\n    if (!turn && selectFiled === null) {\n      return;\n    }\n    const card = index === -1 ? (my ? rivalHero : myHero) : masterFiled[index];\n    const hp = hero.hp - card.att;\n    const masterHp = card.hp - hero.att;\n    if (hp <= 0) {\n      setTimeout(\n        () => alert(`${my ? '패배하였습니다.' : '승리하셨습니다.'}`),\n        500,\n      );\n    }\n    if (my) {\n      setMyHero((hero) => ({ ...hero, hp }));\n      if (index === -1) {\n        setRivalHero((hero) => ({ ...hero, hp: masterHp }));\n      }\n    } else {\n      setRivalHero((hero) => ({ ...hero, hp }));\n      if (index === -1) {\n        setMyHero((hero) => ({ ...hero, hp: masterHp }));\n      }\n    }\n    if (index !== -1) {\n      let masterNewFiled = [];\n      if (masterHp <= 0) {\n        masterNewFiled = masterFiled.filter((_, idx) => idx !== index);\n      } else if (index !== -1) {\n        masterNewFiled = masterFiled.map((card, idx) => {\n          if (idx !== index) {\n            return card;\n          }\n          return { ...card, hp: masterHp };\n        });\n      }\n      if (my) {\n        setRivalFiled(masterNewFiled);\n      } else {\n        setMyFiled(masterNewFiled);\n      }\n    }\n    setAttackCards((attackCards) => {\n      const newAttackCards = [...attackCards];\n      newAttackCards[index] = true;\n      return newAttackCards;\n    });\n    setSelectFiled(null);\n    if (index === -1) {\n      setAttackHero(true);\n    }\n  };\n  return (\n    <>\n      <Rival turn={!myTurn}>\n        <div>\n          코스트: <span>{rivalCost}</span>/<span>{rivalMaxCost}</span>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <Card\n            off={!myTurn && !!attackHero}\n            on={!myTurn && selectFiled === -1}\n            onClick={() => {\n              heroClick({\n                turn: !myTurn,\n                my: false,\n                hero: rivalHero,\n                masterFiled: myFiled,\n              });\n            }}\n          >\n            <div>적 영웅</div>\n            <CardAtt>{rivalHero.att}</CardAtt>\n            <CardHp>{rivalHero.hp}</CardHp>\n          </Card>\n        </div>\n        <div style={{ textAlign: 'center', height: 150 }}>\n          {rivalFiled.map((card, idx) => {\n            return (\n              <React.Fragment key={`${JSON.stringify(card)}-${idx}`}>\n                <Card\n                  off={!myTurn && attackCards[idx]}\n                  on={!myTurn && selectFiled === idx}\n                  onClick={() => {\n                    filedClick({\n                      turn: !myTurn,\n                      my: false,\n                      masterFiled: myFiled,\n                      slaveFiled: rivalFiled,\n                      idx,\n                    });\n                  }}\n                >\n                  <CardCost>{card.cost}</CardCost>\n                  <CardAtt>{card.att}</CardAtt>\n                  <CardHp>{card.hp}</CardHp>\n                </Card>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </Rival>\n      <RivalDeck>\n        <div>덱</div>\n        {riverDeck.map((card, idx) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(card)}-${idx}`}>\n              <Card\n                onClick={() => {\n                  deckClick({\n                    turn: !myTurn,\n                    cost: rivalCost,\n                    deck: riverDeck,\n                    filed: rivalFiled,\n                    idx,\n                    my: false,\n                  });\n                }}\n              >\n                <CardCost>{card.cost}</CardCost>\n                <CardAtt>{card.att}</CardAtt>\n                <CardHp>{card.hp}</CardHp>\n              </Card>\n            </React.Fragment>\n          );\n        })}\n      </RivalDeck>\n      <hr />\n      <TurnButton\n        onClick={() => {\n          if (myTurn) {\n            setMyMaxCost((cost) => Math.min(cost + 1, 10));\n            setMyCost(Math.min(myMaxCost + 1, 10));\n          } else {\n            setRivalMaxCost((cost) => Math.min(cost + 1, 10));\n            setRivalCost(Math.min(rivalMaxCost + 1, 10));\n          }\n          setSelectFiled(null);\n          setAttackCards([]);\n          setAttackHero(false);\n          setMyTurn((myTurn) => !myTurn);\n        }}\n      >\n        턴넘기기\n      </TurnButton>\n      <My turn={myTurn}>\n        <div style={{ textAlign: 'center', height: 150 }}>\n          {myFiled.map((card, idx) => {\n            return (\n              <React.Fragment key={`${JSON.stringify(card)}-${idx}`}>\n                <Card\n                  off={!!myTurn && attackCards[idx]}\n                  on={!!myTurn && selectFiled === idx}\n                  onClick={() => {\n                    filedClick({\n                      turn: myTurn,\n                      my: true,\n                      masterFiled: rivalFiled,\n                      slaveFiled: myFiled,\n                      idx,\n                    });\n                  }}\n                >\n                  <CardCost>{card.cost}</CardCost>\n                  <CardAtt>{card.att}</CardAtt>\n                  <CardHp>{card.hp}</CardHp>\n                </Card>\n              </React.Fragment>\n            );\n          })}\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <Card\n            off={!!myTurn && !!attackHero}\n            on={!!myTurn && selectFiled === -1}\n            onClick={() => {\n              heroClick({\n                turn: myTurn,\n                my: true,\n                hero: myHero,\n                masterFiled: rivalFiled,\n              });\n            }}\n          >\n            <div>내 영웅</div>\n            <CardAtt>{myHero.att}</CardAtt>\n            <CardHp>{myHero.hp}</CardHp>\n          </Card>\n        </div>\n        <div>\n          코스트: <span>{myCost}</span>/<span>{myMaxCost}</span>\n        </div>\n      </My>\n      <MyDeck>\n        <div>덱</div>\n        {myDeck.map((card, idx) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(card)}-${idx}`}>\n              <Card\n                onClick={() => {\n                  deckClick({\n                    turn: myTurn,\n                    cost: myCost,\n                    deck: myDeck,\n                    filed: myFiled,\n                    idx,\n                    my: true,\n                  });\n                }}\n              >\n                <CardCost>{card.cost}</CardCost>\n                <CardAtt>{card.att}</CardAtt>\n                <CardHp>{card.hp}</CardHp>\n              </Card>\n            </React.Fragment>\n          );\n        })}\n      </MyDeck>\n    </>\n  );\n};\n\nexport default JasStone;\n"],"sourceRoot":""}