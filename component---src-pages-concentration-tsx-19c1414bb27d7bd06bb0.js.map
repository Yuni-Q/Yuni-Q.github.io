{"version":3,"file":"component---src-pages-concentration-tsx-19c1414bb27d7bd06bb0.js","mappings":"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","sources":["webpack://yuni-q-blog/./src/pages/concentration.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Card = styled.div`\n  display: inline-block;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  width: 70px;\n  height: 100px;\n  perspective: 140px;\n`;\n\nconst CardInner = styled.div<{ flipped: boolean }>`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n  ${({ flipped }) =>\n    flipped\n      ? css`\n          transform: rotateY(180deg);\n        `\n      : ''};\n`;\n\nconst Face = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  backface-visibility: hidden;\n`;\n\nconst FrontFace = styled(Face)`\n  background: navy;\n`;\nconst BackFace = styled(Face)<{ color: string }>`\n  transform: rotateY(180deg);\n  background: ${({ color }) => color};\n`;\n\nconst colors = [\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'white',\n  'pink',\n  'cyan',\n  'violet',\n  'gray',\n  'black',\n];\nconst shuffle = (num: number) => {\n  const shuffled = [];\n  const colorList = colors.slice(0, num / 2);\n  const list = colorList.concat(colorList);\n  for (let i = 0; list.length > 0; i += 1) {\n    const randomIndex = Math.floor(Math.random() * list.length);\n    shuffled.push(list.splice(randomIndex, 1)[0]);\n  }\n  return shuffled;\n};\n\nconst Concentration: React.VFC = () => {\n  const [count, setCount] = useState('');\n  const [cards, setCards] = useState<string[]>([]);\n  const [time, setTime] = useState(0);\n  const startTime = useRef(new Date().getTime());\n  const [flipped, setFlipped] = useState<boolean[]>(\n    Array(cards.length).fill(false),\n  );\n  const index = useRef(0);\n  const clicked = useRef(new Set<number>());\n  const handleStartButtonClick = useCallback(() => {\n    setTimeout(() => {\n      const num = parseInt(count, 10);\n      setFlipped(Array(num).fill(false));\n      setCards(shuffle(num));\n      index.current = 0;\n      setTime(0);\n    }, 500);\n  }, [count]);\n  useEffect(() => {\n    if (!cards.length && flipped.length) {\n      return;\n    }\n    if (index.current < cards.length + 1) {\n      setTimeout(() => {\n        setFlipped((flipped) => {\n          const newFlipped = [...flipped];\n          newFlipped[index.current] = true;\n          index.current += 1;\n          return newFlipped;\n        });\n      }, 100);\n    }\n    if (index.current === cards.length + 1) {\n      setTimeout(() => {\n        setFlipped(Array(cards.length).fill(false));\n        index.current += 1;\n        startTime.current = new Date().getTime();\n      }, 3000);\n    }\n    if (clicked.current.size === 2) {\n      const [first, second] = [...clicked.current];\n      if (cards[first] === cards[second]) {\n        clicked.current = new Set();\n      }\n      if (cards[first] !== cards[second]) {\n        setTimeout(() => {\n          clicked.current = new Set();\n          setFlipped((flipped) => {\n            const newFlipped = [...flipped];\n            newFlipped[first] = false;\n            newFlipped[second] = false;\n            return newFlipped;\n          });\n        }, 500);\n      }\n    }\n    if (index.current > cards.length + 1 && flipped.every((f) => !!f)) {\n      const endTime = new Date().getTime();\n      const newTime = Math.floor((endTime - startTime.current) / 1000);\n      setTime(newTime);\n      setTimeout(() => {\n        alert('축하합니다.');\n      }, 500);\n    }\n  }, [flipped, cards]);\n  if (!cards.length) {\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const num = parseInt(count, 10);\n          if (num > 20 || num < 2) {\n            return alert('2 이상 20 이하의 숫자를 입력해주세요.');\n          }\n          if (num % 2 !== 0) {\n            return alert('짝수를 입력해주세요.');\n          }\n          handleStartButtonClick();\n        }}\n      >\n        <input\n          min={2}\n          max={20}\n          style={{ width: 300 }}\n          placeholder=\"카드 개수를 짝수로 입력하세요(최대 20)\"\n          type=\"number\"\n          value={count}\n          onChange={(e) => setCount(e.target.value)}\n        />\n        <button type=\"submit\">시작</button>\n      </form>\n    );\n  }\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        height: '100vh',\n      }}\n    >\n      <div style={{ maxWidth: 360 }}>\n        <div>\n          {!!time && (\n            <div style={{ marginBottom: 8 }}>\n              <div>{time}초</div>\n              <button\n                onClick={() => {\n                  setCards([]);\n                  setCount('');\n                }}\n              >\n                재시작하시겠습니까?\n              </button>\n            </div>\n          )}\n        </div>\n        <div>\n          {cards.map((card, idx) => {\n            return (\n              <Card key={`${card}-${idx}`}>\n                <CardInner\n                  flipped={flipped[idx]}\n                  onClick={() => {\n                    if (\n                      !!flipped[idx] ||\n                      clicked.current.size >= 2 ||\n                      index.current < cards.length + 1\n                    ) {\n                      return;\n                    }\n                    clicked.current.add(idx);\n                    setFlipped((flipped) => {\n                      const newFlipped = [...flipped];\n                      newFlipped[idx] = true;\n                      return newFlipped;\n                    });\n                  }}\n                >\n                  <FrontFace />\n                  <BackFace color={card} />\n                </CardInner>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Concentration;\n"],"names":["Card","styled","div","withConfig","displayName","componentId","CardInner","_ref","flipped","css","Face","FrontFace","BackFace","_ref2","color","colors","Concentration","count","setCount","useState","cards","setCards","time","setTime","startTime","useRef","Date","getTime","setFlipped","Array","length","fill","index","clicked","Set","handleStartButtonClick","useCallback","setTimeout","num","parseInt","shuffled","colorList","slice","list","concat","i","randomIndex","Math","floor","random","push","splice","shuffle","current","useEffect","newFlipped","_toConsumableArray","size","first","second","every","f","endTime","newTime","alert","React","style","display","justifyContent","alignItems","flexDirection","height","maxWidth","marginBottom","onClick","map","card","idx","key","add","onSubmit","e","preventDefault","min","max","width","placeholder","type","value","onChange","target"],"sourceRoot":""}