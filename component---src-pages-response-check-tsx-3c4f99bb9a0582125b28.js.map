{"version":3,"sources":["webpack:///./src/pages/response-check.tsx"],"names":["Screen","styled","div","color","ResponseCheck","useState","setColor","recodes","setRecodes","recode","setRecode","date","useRef","timeoutId","onClick","useCallback","current","setTimeout","Date","getTime","Math","floor","random","alert","clearTimeout","newTime","sort","a","b","style","display","justifyContent","alignItems","flexDirection","height","length","reduce","prev","curr","map","idx","key"],"mappings":"8JAOMA,EAASC,IAAOC,IAAV,yEAAGD,CAAH,iGAKU,qBAAGE,SACd,kBATS,QAST,EAAGA,MAAqC,QAAU,WAoE9CC,UAjEkB,WAAM,MACXC,mBAdR,QAcXF,EAD8B,KACvBG,EADuB,OAEPD,mBAAS,IAAhCE,EAF8B,KAErBC,EAFqB,OAGTH,mBAAS,GAA9BI,EAH8B,KAGtBC,EAHsB,KAI/BC,EAAOC,iBAAO,MACdC,EAAYD,iBAAO,MACnBE,EAAUC,uBAAY,WAc1B,GAjCgB,SAoBZZ,IACFG,EApBc,OAqBdO,EAAUG,QAAUC,YAAW,WAC7BN,EAAKK,SAAU,IAAIE,MAAOC,UAC1Bb,EAtBU,iBAuBTc,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB,MAxBxB,QA0BZnB,IACFQ,EAAKK,QAAU,KACfV,EA7Bc,QA8BdiB,MAAM,YACNC,aAAaX,EAAUG,UA7BX,gBA+BVb,EAAqB,CACvB,IACMsB,GADU,IAAIP,MAAOC,UACDR,EAAKK,QAC/BR,GAAW,SAACD,GAEV,MADmB,CAACkB,GAAJ,mBAAgBlB,IACdmB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,QAEvClB,EAAUe,GACVnB,EAzCc,WA2Cf,CAACH,IACJ,OACE,yBACE0B,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACfC,OAAQ,UAGV,kBAAClC,EAAD,CAAQG,MAAOA,EAAOW,QAASA,GAtDjB,SAuDXX,EACG,cAvDQ,QAwDRA,EACA,iBACA,UAEN,6BACE,6BACGI,EAAQ4B,OAAS,GAAjB,MACO1B,EADP,aAEGF,EAAQ6B,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,IAAM,GAAK/B,EAAQ4B,OAF5D,MAKF5B,EAAQgC,KAAI,SAAC9B,EAAQ+B,GACpB,OACE,yBAAKC,IAAQhC,EAAL,IAAe+B,GAAWA,EAAM,EAAxC,OAAgD/B,EAAhD","file":"component---src-pages-response-check-tsx-3c4f99bb9a0582125b28.js","sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst WAITE_COLOR = 'aqua';\nconst READY_COLOR = 'red';\nconst NOW_COLOR = 'greenyellow';\n\nconst Screen = styled.div<{ color: string }>`\n  width: 300px;\n  height: 200px;\n  text-align: center;\n  user-select: none;\n  background-color: ${({ color }) => color};\n  color: ${({ color }) => (color === READY_COLOR ? 'white' : 'black')};\n`;\n\nconst ResponseCheck: React.VFC = () => {\n  const [color, setColor] = useState(WAITE_COLOR);\n  const [recodes, setRecodes] = useState([]);\n  const [recode, setRecode] = useState(0);\n  const date = useRef(null);\n  const timeoutId = useRef(null);\n  const onClick = useCallback(() => {\n    if (color === WAITE_COLOR) {\n      setColor(READY_COLOR);\n      timeoutId.current = setTimeout(() => {\n        date.current = new Date().getTime();\n        setColor(NOW_COLOR);\n      }, Math.floor(Math.random() * 1000) + 2000);\n    }\n    if (color === READY_COLOR) {\n      date.current = null;\n      setColor(WAITE_COLOR);\n      alert('너무 성급하군요');\n      clearTimeout(timeoutId.current);\n    }\n    if (color === NOW_COLOR) {\n      const endTime = new Date().getTime();\n      const newTime = endTime - date.current;\n      setRecodes((recodes) => {\n        const newRecodes = [newTime, ...recodes];\n        return newRecodes.sort((a, b) => a - b);\n      });\n      setRecode(newTime);\n      setColor(WAITE_COLOR);\n    }\n  }, [color]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        height: '100vh',\n      }}\n    >\n      <Screen color={color} onClick={onClick}>\n        {color === WAITE_COLOR\n          ? '클릭해서 시작하세요.'\n          : color === READY_COLOR\n          ? '초록색이 되면 클릭하세요.'\n          : '클릭하세요!'}\n      </Screen>\n      <div>\n        <div>\n          {recodes.length > 0 &&\n            `햔재 ${recode}ms / 평균 : ${\n              recodes.reduce((prev, curr) => prev + curr, 0) / recodes.length\n            }ms`}\n        </div>\n        {recodes.map((recode, idx) => {\n          return (\n            <div key={`${recode}-${idx}`}>{`${idx + 1}위 : ${recode}ms`}</div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ResponseCheck;\n"],"sourceRoot":""}