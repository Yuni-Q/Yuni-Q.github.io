{"version":3,"file":"component---src-pages-lotto-tsx-b779e2994eb9912c3d14.js","mappings":"+IAGA,MAAMA,E,QAAOC,QAAOC,IAAGC,WAAA,CAAAC,YAAA,cAAAC,YAAA,eAAVJ,CAAU,2JA6FvB,UAjFyBK,KACvB,MAAM,EAACC,EAAK,EAAEC,IAAYC,EAAAA,EAAAA,UAAmB,KACvC,EAACC,EAAS,EAAEC,IAAiBF,EAAAA,EAAAA,UAAiB,MAC9CG,GAAWC,EAAAA,EAAAA,QAAO,OACxBC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAYC,MAAM,IACrBC,KAAK,GACLC,KAAI,CAACC,EAAGC,IAAUA,EAAQ,IACvBC,EAAU,GAChB,KAAON,EAAUO,OAAS,GAAG,CAC3B,MAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWR,EAAUO,QAE9CI,EADcX,EAAUY,OAAOJ,EAAQ,GACnB,GAC1BF,EAAQO,KAAKF,EACf,CACA,MAAMG,EAAWR,EAAQM,OAAO,EAAG,GAAGG,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACnDC,EAAQZ,EAAQ,GACtBT,EAASsB,QAAUC,aAAY,KAC7B3B,GAAUD,IACJA,EAAMe,OAAS,GACjBc,YAAW,KACTzB,EAAcsB,EAAM,GACnB,KAEE,GAAPI,QAAAC,EAAAA,EAAAA,GAAW/B,GAAK,CAAEsB,EAAStB,EAAMe,YACjC,GACD,IAAK,GACP,KACHR,EAAAA,EAAAA,YAAU,KACa,IAAjBP,EAAMe,QACRiB,cAAc3B,EAASsB,QACzB,GACC,CAAC3B,IAEJ,MAAMiC,GAAWC,EAAAA,EAAAA,cAAaC,GACxBA,GAAO,GACF,cAELA,GAAO,GACF,SAELA,GAAO,GACF,SAELA,GAAO,GACF,aAEF,aACN,IACH,OACEC,EAAAA,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACfC,OAAQ,UAGVN,EAAAA,cAAA,WACEA,EAAAA,cAAA,WAAK,UACK,IACPpC,EAAMW,KAAKgC,GAERP,EAAAA,cAAC3C,EAAI,CAAC4C,MAAO,CAAEO,WAAYX,EAASU,IAASE,IAAKF,GAC/CA,MAKTP,EAAAA,cAAA,WAAK,OACE,IACJjC,GACCiC,EAAAA,cAAC3C,EAAI,CAAC4C,MAAO,CAAEO,WAAYX,EAAS9B,KAAeA,KAIrD,C","sources":["webpack://yuni-q-blog/./src/pages/lotto.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Ball = styled.div`\n  display: inline-block;\n  border: 1px solid black;\n  width: 40px;\n  height: 40px;\n  line-height: 40px;\n  font-size: 20px;\n  text-align: center;\n  margin: 0 10px;\n  border-radius: 50%;\n`;\n\nconst Lotto: React.VFC = () => {\n  const [balls, setBalls] = useState<number[]>([]);\n  const [bonusBall, setBonusBalls] = useState<number>(null);\n  const interval = useRef(null);\n  useEffect(() => {\n    const candidate = Array(45)\n      .fill(0)\n      .map((_, index) => index + 1);\n    const shuffle = [];\n    while (candidate.length > 0) {\n      const random = Math.floor(Math.random() * candidate.length);\n      const spliceArray = candidate.splice(random, 1);\n      const value = spliceArray[0];\n      shuffle.push(value);\n    }\n    const winBalls = shuffle.splice(0, 6).sort((a, b) => a - b);\n    const bonus = shuffle[6];\n    interval.current = setInterval(() => {\n      setBalls((balls) => {\n        if (balls.length > 4) {\n          setTimeout(() => {\n            setBonusBalls(bonus);\n          }, 1000);\n        }\n        return [...balls, winBalls[balls.length]];\n      });\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    if (balls.length === 6) {\n      clearInterval(interval.current);\n    }\n  }, [balls]);\n\n  const getColor = useCallback((num: number) => {\n    if (num >= 40) {\n      return 'greenyellow';\n    }\n    if (num >= 30) {\n      return 'orange';\n    }\n    if (num >= 20) {\n      return 'yellow';\n    }\n    if (num >= 10) {\n      return 'aquamarine';\n    }\n    return 'lightpink';\n  }, []);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <div>\n          추첨 결과는?{' '}\n          {balls.map((ball) => {\n            return (\n              <Ball style={{ background: getColor(ball) }} key={ball}>\n                {ball}\n              </Ball>\n            );\n          })}\n        </div>\n        <div>\n          보너스:{' '}\n          {bonusBall && (\n            <Ball style={{ background: getColor(bonusBall) }}>{bonusBall}</Ball>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Lotto;\n"],"names":["Ball","styled","div","withConfig","displayName","componentId","Lotto","balls","setBalls","useState","bonusBall","setBonusBalls","interval","useRef","useEffect","candidate","Array","fill","map","_","index","shuffle","length","random","Math","floor","value","splice","push","winBalls","sort","a","b","bonus","current","setInterval","setTimeout","concat","_toConsumableArray","clearInterval","getColor","useCallback","num","React","style","display","justifyContent","alignItems","flexDirection","height","ball","background","key"],"sourceRoot":""}