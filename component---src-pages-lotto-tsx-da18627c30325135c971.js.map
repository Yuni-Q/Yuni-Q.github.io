{"version":3,"sources":["webpack:///./src/pages/lotto.tsx"],"names":["Ball","styled","div","Lotto","useState","balls","setBalls","bonusBall","setBonusBalls","interval","useRef","useEffect","candidate","Array","fill","map","_","index","shuffle","length","random","Math","floor","value","splice","push","winBalls","sort","a","b","bonus","current","setInterval","setTimeout","clearInterval","getColor","useCallback","num","style","display","justifyContent","alignItems","flexDirection","height","ball","background","key"],"mappings":"wIAGMA,E,UAAOC,EAAOC,IAAV,8DAAGD,CAAH,2JA6FKE,UAjFU,WAAM,MACHC,mBAAmB,IAAtCC,EADsB,KACfC,EADe,OAEMF,mBAAiB,MAA7CG,EAFsB,KAEXC,EAFW,KAGvBC,EAAWC,iBAAO,MACxBC,qBAAU,WAKR,IAJA,IAAMC,EAAYC,MAAM,IACrBC,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OAAcA,EAAQ,KACvBC,EAAU,GACTN,EAAUO,OAAS,GAAG,CAC3B,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWR,EAAUO,QAE9CI,EADcX,EAAUY,OAAOJ,EAAQ,GACnB,GAC1BF,EAAQO,KAAKF,GAEf,IAAMG,EAAWR,EAAQM,OAAO,EAAG,GAAGG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACnDC,EAAQZ,EAAQ,GACtBT,EAASsB,QAAUC,aAAY,WAC7B1B,GAAS,SAACD,GAMR,OALIA,EAAMc,OAAS,GACjBc,YAAW,WACTzB,EAAcsB,KACb,KAEL,sBAAWzB,GAAX,CAAkBqB,EAASrB,EAAMc,eAElC,OACF,IACHR,qBAAU,WACa,IAAjBN,EAAMc,QACRe,cAAczB,EAASsB,WAExB,CAAC1B,IAEJ,IAAM8B,EAAWC,uBAAY,SAACC,GAC5B,OAAIA,GAAO,GACF,cAELA,GAAO,GACF,SAELA,GAAO,GACF,SAELA,GAAO,GACF,aAEF,cACN,IACH,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACfC,OAAQ,UAGV,6BACE,uCACU,IACPtC,EAAMU,KAAI,SAAC6B,GACV,OACE,kBAAC5C,EAAD,CAAMsC,MAAO,CAAEO,WAAYV,EAASS,IAASE,IAAKF,GAC/CA,OAKT,oCACO,IACJrC,GACC,kBAACP,EAAD,CAAMsC,MAAO,CAAEO,WAAYV,EAAS5B,KAAeA","file":"component---src-pages-lotto-tsx-da18627c30325135c971.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Ball = styled.div`\n  display: inline-block;\n  border: 1px solid black;\n  width: 40px;\n  height: 40px;\n  line-height: 40px;\n  font-size: 20px;\n  text-align: center;\n  margin: 0 10px;\n  border-radius: 50%;\n`;\n\nconst Lotto: React.VFC = () => {\n  const [balls, setBalls] = useState<number[]>([]);\n  const [bonusBall, setBonusBalls] = useState<number>(null);\n  const interval = useRef(null);\n  useEffect(() => {\n    const candidate = Array(45)\n      .fill(0)\n      .map((_, index) => index + 1);\n    const shuffle = [];\n    while (candidate.length > 0) {\n      const random = Math.floor(Math.random() * candidate.length);\n      const spliceArray = candidate.splice(random, 1);\n      const value = spliceArray[0];\n      shuffle.push(value);\n    }\n    const winBalls = shuffle.splice(0, 6).sort((a, b) => a - b);\n    const bonus = shuffle[6];\n    interval.current = setInterval(() => {\n      setBalls((balls) => {\n        if (balls.length > 4) {\n          setTimeout(() => {\n            setBonusBalls(bonus);\n          }, 1000);\n        }\n        return [...balls, winBalls[balls.length]];\n      });\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    if (balls.length === 6) {\n      clearInterval(interval.current);\n    }\n  }, [balls]);\n\n  const getColor = useCallback((num: number) => {\n    if (num >= 40) {\n      return 'greenyellow';\n    }\n    if (num >= 30) {\n      return 'orange';\n    }\n    if (num >= 20) {\n      return 'yellow';\n    }\n    if (num >= 10) {\n      return 'aquamarine';\n    }\n    return 'lightpink';\n  }, []);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <div>\n          추첨 결과는?{' '}\n          {balls.map((ball) => {\n            return (\n              <Ball style={{ background: getColor(ball) }} key={ball}>\n                {ball}\n              </Ball>\n            );\n          })}\n        </div>\n        <div>\n          보너스:{' '}\n          {bonusBall && (\n            <Ball style={{ background: getColor(bonusBall) }}>{bonusBall}</Ball>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Lotto;\n"],"sourceRoot":""}