{"version":3,"file":"component---src-pages-rsp-tsx-0734309de5b180b82bff.js","mappings":"+IAGA,MAAMA,EAAO,CACXC,SAAU,GACVC,MAAO,IACPC,OAAQ,KAGJC,EAAa,CACjBF,KAAM,EACND,SAAU,EACVE,OAAQ,GAGJE,EAAqBC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,0BAAAC,YAAA,eAAVJ,CAAU,kFAE/BK,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAMC,GAAsBZ,EAAKC,QAAQ,IAsG5D,UAhGuBY,KACrB,MAAMC,GAAaC,EAAAA,EAAAA,QAAO,MACpBC,GAAYD,EAAAA,EAAAA,QAAO,OACnB,EAACH,EAAQ,EAAEK,IAAeC,EAAAA,EAAAA,UAASlB,EAAKC,WACxC,EAACkB,EAAK,EAAEC,IAAYF,EAAAA,EAAAA,UAAS,IAC7B,EAACG,EAAQ,EAAEC,IAAeJ,EAAAA,EAAAA,WAAS,IACnC,EAACK,EAAQ,EAAEC,IAAeN,EAAAA,EAAAA,UAAS,GAEnCO,GAAUC,EAAAA,EAAAA,cACbC,IACCL,GAAY,GACZM,cAAcd,EAAWe,SAEzBb,EAAUa,QAAUC,YAAW,KAC7BF,cAAcd,EAAWe,SACzBP,GAAY,GACZS,GAAU,GACT,KAEH,MAAMC,EAAiBC,OAAOC,QAAQlC,GAAMmC,MAAMC,GACzCA,EAAI,KAAOxB,IACjB,GACGyB,EAAYV,EAAMW,OAA6BC,GAI/CC,EADUpC,EAAWiC,GADLjC,EAAW4B,GAGjC,MAAI,CAAC,GAAI,GAAGS,SAASD,IACnBE,QAAQC,IAAI,WACZvB,GAAUD,GAAUA,EAAQ,KAG1B,EAAE,EAAG,GAAGsB,SAASD,IACnBE,QAAQC,IAAI,MACZvB,GAAUD,GAAUA,EAAQ,SAC5BK,GAAaD,GAAaA,EAAW,UAGvCmB,QAAQC,IAAI,MAAM,GAEpB,CAAC/B,KAEHgC,EAAAA,EAAAA,YAAU,KACJrB,EAAW,IACbD,GAAY,GACZM,cAAcd,EAAWe,SACzBgB,aAAa7B,EAAUa,SACzB,GACC,CAACN,IACJ,MAAMQ,GAAWL,EAAAA,EAAAA,cAAY,KAC3BZ,EAAWe,QAAUiB,aAAY,KAC/B7B,GAAaL,GACPA,IAAaZ,EAAKC,SACbD,EAAKE,KAEVU,IAAaZ,EAAKE,KACbF,EAAKG,MAEVS,IAAaZ,EAAKG,MACbH,EAAKC,cADd,GAGA,GACD,GAAG,GACL,IAIH,OAHA2C,EAAAA,EAAAA,YAAU,KACRb,GAAU,GACT,IAEDgB,EAAAA,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACfC,OAAQ,UAGVN,EAAAA,cAAC1C,EAAkB,CAACO,SAAUA,IAC9BmC,EAAAA,cAAA,OAAKC,MAAO,CAAEM,UAAW,KACvBP,EAAAA,cAAA,UAAQR,GAAG,WAAWlB,SAAUA,EAAUI,QAASA,GAAS,MAG5DsB,EAAAA,cAAA,UAAQR,GAAG,OAAOlB,SAAUA,EAAUI,QAASA,GAAS,MAGxDsB,EAAAA,cAAA,UAAQR,GAAG,QAAQlB,SAAUA,EAAUI,QAASA,GAAS,MAI3DsB,EAAAA,cAAA,OAAKC,MAAO,CAAEM,UAAW,IACtB/B,EAAW,GAAK,SAAS,IAAEJ,EAAM,KAEhC,C","sources":["webpack://yuni-q-blog/./src/pages/rsp.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst rspX = {\n  scissors: 10,\n  rock: -220,\n  paper: -430,\n};\n\nconst scoreTable = {\n  rock: 0,\n  scissors: 1,\n  paper: -1,\n};\n\nconst RspBackgroundImage = styled.div<{ position?: number }>`\n  background: url(/rsp.png)\n    ${({ position }) => (position ? position : rspX.scissors)}px 0 / cover\n    no-repeat;\n  width: 180px;\n  height: 200px;\n`;\n\nconst Rsp: React.VFC = () => {\n  const intervalId = useRef(null);\n  const timeoutId = useRef(null);\n  const [position, setPosition] = useState(rspX.scissors);\n  const [score, setScore] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const [outCount, setOutcount] = useState(0);\n\n  const onClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      setDisabled(true);\n      clearInterval(intervalId.current);\n\n      timeoutId.current = setTimeout(() => {\n        clearInterval(intervalId.current);\n        setDisabled(false);\n        interval();\n      }, 1000);\n\n      const computerChoice = Object.entries(rspX).find((arr) => {\n        return arr[1] === position;\n      })[0];\n      const myChoice = (event.target as HTMLButtonElement).id;\n\n      const computerScore = scoreTable[computerChoice];\n      const myScore = scoreTable[myChoice];\n      const diff = myScore - computerScore;\n      if ([2, -1].includes(diff)) {\n        console.log('승리');\n        setScore((score) => score + 1);\n        return;\n      }\n      if ([-2, 1].includes(diff)) {\n        console.log('패배');\n        setScore((score) => score - 1);\n        setOutcount((outCount) => outCount + 1);\n        return;\n      }\n      console.log('무승부');\n    },\n    [position],\n  );\n  useEffect(() => {\n    if (outCount > 2) {\n      setDisabled(true);\n      clearInterval(intervalId.current);\n      clearTimeout(timeoutId.current);\n    }\n  }, [outCount]);\n  const interval = useCallback(() => {\n    intervalId.current = setInterval(() => {\n      setPosition((position) => {\n        if (position === rspX.scissors) {\n          return rspX.rock;\n        }\n        if (position === rspX.rock) {\n          return rspX.paper;\n        }\n        if (position === rspX.paper) {\n          return rspX.scissors;\n        }\n      });\n    }, 50);\n  }, []);\n  useEffect(() => {\n    interval();\n  }, []);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        height: '100vh',\n      }}\n    >\n      <RspBackgroundImage position={position} />\n      <div style={{ marginTop: 24 }}>\n        <button id=\"scissors\" disabled={disabled} onClick={onClick}>\n          가위\n        </button>\n        <button id=\"rock\" disabled={disabled} onClick={onClick}>\n          바위\n        </button>\n        <button id=\"paper\" disabled={disabled} onClick={onClick}>\n          보\n        </button>\n      </div>\n      <div style={{ marginTop: 8 }}>\n        {outCount > 2 && '최종 점수는'} {score}점\n      </div>\n    </div>\n  );\n};\n\nexport default Rsp;\n"],"names":["rspX","scissors","rock","paper","scoreTable","RspBackgroundImage","styled","div","withConfig","displayName","componentId","_ref","position","Rsp","intervalId","useRef","timeoutId","setPosition","useState","score","setScore","disabled","setDisabled","outCount","setOutcount","onClick","useCallback","event","clearInterval","current","setTimeout","interval","computerChoice","Object","entries","find","arr","myChoice","target","id","diff","includes","console","log","useEffect","clearTimeout","setInterval","React","style","display","justifyContent","alignItems","flexDirection","height","marginTop"],"sourceRoot":""}