{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["Index","data","initialCount","Storage","initialCategory","CATEGORY_TYPE","ALL","useState","count","setCount","countRef","useRef","category","setCategory","siteMetadata","site","countOfInitialPost","configs","posts","allMarkdownRemark","edges","categories","map","node","frontmatter","useEffect","sendGAEvent","HOME_TITLE","GA_ACTION","EXPOSE","window","addEventListener","onScroll","passive","IOManager","ScrollManager","removeEventListener","current","document","querySelector","scrollIntoView","behavior","inline","block","currentPos","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","prev","dismissCondition","triggerCondition","length","title","keywords","selectCategory"],"mappings":"iSAgKeA,UA5GiB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAC3BC,EAAeC,IAAiB,GAChCC,EAAkBD,IAAoBE,IAAcC,KAFd,EAGlBC,mBAASL,GAA5BM,EAHqC,KAG9BC,EAH8B,KAItCC,EAAWC,iBAAOH,GAJoB,EAKZD,mBAASH,GAAlCQ,EALqC,KAK3BC,EAL2B,KAMpCC,EAAiBb,EAAKc,KAAtBD,aACAE,EAAuBF,EAAaG,QAApCD,mBACFE,EAAQjB,EAAKkB,kBAAkBC,MAC/BC,EAAa,IAAOH,EAAMI,KAAI,qBAAGC,KAAgBC,YAAYZ,aAEnEa,qBAAU,WAMR,OALAC,YAAYC,IAAYC,IAAUC,OAAQF,KAC1CG,OAAOC,iBAAP,SAAkCC,EAAU,CAAEC,SAAS,IACvDC,MACAC,MAEO,WACLL,OAAOM,oBAAP,SAAqCJ,GACrCE,MACAC,SAED,IAEHV,qBAAU,WACRf,EAAS2B,QAAU7B,EACnB0B,MACA/B,IAAiBK,GACjBL,IAAoBS,MAGtBa,qBAAU,WACRa,SAASC,cAAc,0BAA0BC,eAAe,CAC9DC,SAAU,SACVC,OAAQ,SACRC,MAAO,UAER,CAAC/B,IAEJ,IAIMoB,EAAW,WACf,IAAMY,EAAad,OAAOe,QAAUf,OAAOgB,YACrCC,EAAe,kBA9EzB,SAAqBH,GACnB,OAAOI,MAA0BJ,EA6EJK,CAAYL,GAhFzB,IAoFd,OAAOM,KAAmB,kBAAMzC,GAAS,SAAC0C,GAAD,OAAUA,EAAO,OAAI,CAC5DC,iBAAkB,kBAAOL,KACzBM,iBAAkB,kBAAMN,KAJxB7B,EAAMoC,OAAS5C,EAAS2B,QAAUrB,IAE7BkC,IAMT,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMK,MAAO5B,IAAY6B,SAAU1C,EAAa0C,WAChD,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEnC,WAAYA,EACZT,SAAUA,EACV6C,eAvBiB,SAAC7C,GACtBC,EAAYD,MAwBV,kBAAC,IAAD,CACEM,MAAOA,EACPF,mBAAoBA,EACpBR,MAAOA,EACPI,SAAUA","file":"component---src-pages-index-tsx-f5cefe27e5afaf68a76c.js","sourcesContent":["import { graphql } from 'gatsby';\nimport _ from 'lodash';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Bio } from '../components/bio';\nimport { Category } from '../components/category';\nimport { Contents } from '../components/contents';\nimport { Head } from '../components/head';\nimport { CATEGORY_TYPE, HOME_TITLE } from '../constants';\nimport { Layout } from '../layout';\nimport * as Dom from '../utils/dom';\nimport * as EventManager from '../utils/event-manager';\nimport sendGAEvent, { GA_ACTION } from '../utils/ga';\nimport * as ScrollManager from '../utils/scroll';\nimport * as Storage from '../utils/storage';\nimport * as IOManager from '../utils/visible';\n\n// const DEST_POS = 316;\nconst BASE_LINE = 80;\n\nfunction getDistance(currentPos) {\n  return Dom.getDocumentHeight() - currentPos;\n}\n\ninterface Props {\n  data: {\n    allMarkdownRemark: {\n      edges: {\n        node: {\n          excerpt: string;\n          fields: {\n            slug: string;\n          };\n          frontmatter: {\n            category: string;\n            date: string;\n            draft: boolean;\n            tags: string[];\n            title: string;\n          };\n        };\n      }[];\n    };\n    site: {\n      siteMetadata: {\n        configs: { countOfInitialPost: number };\n        keywords: string[];\n      };\n      title: string;\n    };\n  };\n}\n\nconst Index: React.VFC<Props> = ({ data }) => {\n  const initialCount = Storage.getCount(1);\n  const initialCategory = Storage.getCategory(CATEGORY_TYPE.ALL);\n  const [count, setCount] = useState(initialCount);\n  const countRef = useRef(count);\n  const [category, setCategory] = useState(initialCategory);\n  const { siteMetadata } = data.site;\n  const { countOfInitialPost } = siteMetadata.configs;\n  const posts = data.allMarkdownRemark.edges;\n  const categories = _.uniq(posts.map(({ node }) => node.frontmatter.category));\n\n  useEffect(() => {\n    sendGAEvent(HOME_TITLE, GA_ACTION.EXPOSE, HOME_TITLE);\n    window.addEventListener(`scroll`, onScroll, { passive: false });\n    IOManager.init();\n    ScrollManager.init();\n\n    return () => {\n      window.removeEventListener(`scroll`, onScroll);\n      IOManager.destroy();\n      ScrollManager.destroy();\n    };\n  }, []);\n\n  useEffect(() => {\n    countRef.current = count;\n    IOManager.refreshObserver();\n    Storage.setCount(count);\n    Storage.setCategory(category);\n  });\n\n  useEffect(() => {\n    document.querySelector('li[aria-selected=true]').scrollIntoView({\n      behavior: 'smooth',\n      inline: 'center',\n      block: 'end',\n    });\n  }, [category]);\n\n  const selectCategory = (category) => {\n    setCategory(category);\n  };\n\n  const onScroll = () => {\n    const currentPos = window.scrollY + window.innerHeight;\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE;\n    const doesNeedMore = () =>\n      posts.length > countRef.current * countOfInitialPost;\n\n    return EventManager.toFit(() => setCount((prev) => prev + 1), {\n      dismissCondition: () => !isTriggerPos(),\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\n    })();\n  };\n\n  return (\n    <Layout>\n      <Head title={HOME_TITLE} keywords={siteMetadata.keywords} />\n      <Bio />\n      <Category\n        categories={categories}\n        category={category}\n        selectCategory={selectCategory}\n      />\n      <Contents\n        posts={posts}\n        countOfInitialPost={countOfInitialPost}\n        count={count}\n        category={category}\n      />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        keywords\n        title\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { ne: null }, draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            category\n            tags\n            draft\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Index;\n"],"sourceRoot":""}