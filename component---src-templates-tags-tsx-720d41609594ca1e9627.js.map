{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["data","location","initialCount","Storage","initialCategory","CATEGORY_TYPE","ALL","useState","count","setCount","countRef","useRef","category","setCategory","siteMetadata","site","countOfInitialPost","configs","posts","allMarkdownRemark","edges","categories","map","node","frontmatter","useEffect","window","addEventListener","onScroll","passive","IOManager","ScrollManager","removeEventListener","current","currentPos","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","prev","dismissCondition","triggerCondition","length","title","HOME_TITLE","keywords","selectCategory","pageQuery"],"mappings":"+TAyBe,sBAAwB,IAArBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACjBC,EAAeC,IAAiB,GAChCC,EAAkBD,IAAoBE,IAAcC,KAFpB,EAGZC,mBAASL,GAA5BM,EAH+B,KAGxBC,EAHwB,KAIhCC,EAAWC,iBAAOH,GAJc,EAKND,mBAASH,GAAlCQ,EAL+B,KAKrBC,EALqB,KAO9BC,EAAiBd,EAAKe,KAAtBD,aACAE,EAAuBF,EAAaG,QAApCD,mBACFE,EAAQlB,EAAKmB,kBAAkBC,MAC/BC,EAAa,IAAOH,EAAMI,KAAI,qBAAGC,KAAgBC,YAAYZ,aAEnEa,qBAAU,WAKT,OAJAC,OAAOC,iBAAP,SAAkCC,EAAU,CAAEC,SAAS,IACvDC,MACAC,MAEO,WACNL,OAAOM,oBAAP,SAAqCJ,GACrCE,MACAC,SAEC,IAEHN,qBAAU,WACTf,EAASuB,QAAUzB,EACnBsB,MACA3B,IAAiBK,GACjBL,IAAoBS,MAGrB,IAKMgB,EAAW,WAChB,IAAMM,EAAaR,OAAOS,QAAUT,OAAOU,YACrCC,EAAe,kBA1CvB,SAAqBH,GACpB,OAAOI,MAA0BJ,EAyCLK,CAAYL,GA5CvB,IAgDhB,OAAOM,KAAmB,kBAAM/B,GAAS,SAAAgC,GAAI,OAAIA,EAAO,OAAI,CAC3DC,iBAAkB,kBAAOL,KACzBM,iBAAkB,kBAAMN,KAJxBnB,EAAM0B,OAASlC,EAASuB,QAAUjB,IAE5BwB,IAMR,OACC,kBAAC,IAAD,CAAQvC,SAAUA,EAAU4C,MAAO/B,EAAa+B,OAC/C,kBAAC,IAAD,CAAMA,MAAOC,IAAYC,SAAUjC,EAAaiC,WAChD,kBAAC,IAAD,MACA,kBAAC,IAAD,CACC1B,WAAYA,EACZT,SAAUA,EACVoC,eAxBoB,SAAApC,GACtBC,EAAYD,GACZmB,IAxCe,QAgEd,kBAAC,IAAD,CACCb,MAAOA,EACPF,mBAAoBA,EACpBR,MAAOA,EACPI,SAAUA,MAMP,IAAMqC,EAAY","file":"component---src-templates-tags-tsx-720d41609594ca1e9627.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport _ from 'lodash';\r\n\r\nimport { Layout } from '../layout';\r\nimport { Bio } from '../components/bio';\r\nimport { Head } from '../components/head';\r\nimport { Category } from '../components/category';\r\nimport { Contents } from '../components/contents';\r\n\r\nimport * as ScrollManager from '../utils/scroll';\r\nimport * as Storage from '../utils/storage';\r\nimport * as IOManager from '../utils/visible';\r\nimport * as EventManager from '../utils/event-manager';\r\nimport * as Dom from '../utils/dom';\r\n\r\nimport { HOME_TITLE, CATEGORY_TYPE } from '../constants';\r\n\r\nconst DEST_POS = 316;\r\nconst BASE_LINE = 80;\r\n\r\nfunction getDistance(currentPos) {\r\n\treturn Dom.getDocumentHeight() - currentPos;\r\n}\r\n\r\nexport default ({ data, location }) => {\r\n\tconst initialCount = Storage.getCount(1);\r\n\tconst initialCategory = Storage.getCategory(CATEGORY_TYPE.ALL);\r\n\tconst [count, setCount] = useState(initialCount);\r\n\tconst countRef = useRef(count);\r\n\tconst [category, setCategory] = useState(initialCategory);\r\n\r\n\tconst { siteMetadata } = data.site;\r\n\tconst { countOfInitialPost } = siteMetadata.configs;\r\n\tconst posts = data.allMarkdownRemark.edges;\r\n\tconst categories = _.uniq(posts.map(({ node }) => node.frontmatter.category));\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(`scroll`, onScroll, { passive: false });\r\n\t\tIOManager.init();\r\n\t\tScrollManager.init();\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(`scroll`, onScroll);\r\n\t\t\tIOManager.destroy();\r\n\t\t\tScrollManager.destroy();\r\n\t\t};\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tcountRef.current = count;\r\n\t\tIOManager.refreshObserver();\r\n\t\tStorage.setCount(count);\r\n\t\tStorage.setCategory(category);\r\n\t});\r\n\r\n\tconst selectCategory = category => {\r\n\t\tsetCategory(category);\r\n\t\tScrollManager.go(DEST_POS);\r\n\t};\r\n\r\n\tconst onScroll = () => {\r\n\t\tconst currentPos = window.scrollY + window.innerHeight;\r\n\t\tconst isTriggerPos = () => getDistance(currentPos) < BASE_LINE;\r\n\t\tconst doesNeedMore = () =>\r\n\t\t\tposts.length > countRef.current * countOfInitialPost;\r\n\r\n\t\treturn EventManager.toFit(() => setCount(prev => prev + 1), {\r\n\t\t\tdismissCondition: () => !isTriggerPos(),\r\n\t\t\ttriggerCondition: () => isTriggerPos() && doesNeedMore(),\r\n\t\t})();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Layout location={location} title={siteMetadata.title}>\r\n\t\t\t<Head title={HOME_TITLE} keywords={siteMetadata.keywords} />\r\n\t\t\t<Bio />\r\n\t\t\t<Category\r\n\t\t\t\tcategories={categories}\r\n\t\t\t\tcategory={category}\r\n\t\t\t\tselectCategory={selectCategory}\r\n\t\t\t/>\r\n\t\t\t<Contents\r\n\t\t\t\tposts={posts}\r\n\t\t\t\tcountOfInitialPost={countOfInitialPost}\r\n\t\t\t\tcount={count}\r\n\t\t\t\tcategory={category}\r\n\t\t\t/>\r\n\t\t</Layout>\r\n\t);\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n\tquery($tag: String) {\r\n\t\tsite {\r\n\t\t\tsiteMetadata {\r\n\t\t\t\ttitle\r\n\t\t\t\tconfigs {\r\n\t\t\t\t\tcountOfInitialPost\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tallMarkdownRemark(\r\n\t\t\tlimit: 2000\r\n\t\t\tsort: { fields: [frontmatter___date], order: DESC }\r\n\t\t\tfilter: {\r\n\t\t\t\tfrontmatter: {\r\n\t\t\t\t\ttags: { in: [$tag] }\r\n\t\t\t\t\tcategory: { ne: null }\r\n\t\t\t\t\tdraft: { eq: false }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t) {\r\n\t\t\ttotalCount\r\n\t\t\tedges {\r\n\t\t\t\tnode {\r\n\t\t\t\t\texcerpt(pruneLength: 300)\r\n\t\t\t\t\tfields {\r\n\t\t\t\t\t\tslug\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfrontmatter {\r\n\t\t\t\t\t\tdate(formatString: \"DD [<span>] MMMM [</span>]\")\r\n\t\t\t\t\t\ttitle\r\n\t\t\t\t\t\tcategory\r\n\t\t\t\t\t\ttags\r\n\t\t\t\t\t\tdraft\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n"],"sourceRoot":""}