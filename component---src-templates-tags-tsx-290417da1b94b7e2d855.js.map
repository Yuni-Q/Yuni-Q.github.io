{"version":3,"file":"component---src-templates-tags-tsx-290417da1b94b7e2d855.js","mappings":"sQAsBA,UAAeA,IAAwB,IAAvB,KAAEC,EAAI,SAAEC,GAAUF,EAChC,MAAMG,EAAeC,EAAAA,GAAiB,GAChCC,EAAkBD,EAAAA,GAAoBE,EAAAA,GAAcC,MACpD,EAACC,EAAK,EAAEC,IAAYC,EAAAA,EAAAA,UAASP,GAC7BQ,GAAWC,EAAAA,EAAAA,QAAOJ,IAClB,EAACK,EAAQ,EAAEC,IAAeJ,EAAAA,EAAAA,UAASL,IAEnC,aAAEU,GAAiBd,EAAKe,MACxB,mBAAEC,GAAuBF,EAAaG,QACtCC,EAAQlB,EAAKmB,kBAAkBC,MAC/BC,EAAaC,IAAOJ,EAAMK,KAAIC,IAAA,IAAC,KAAEC,GAAMD,EAAA,OAAKC,EAAKC,YAAYd,QAAQ,MAE3Ee,EAAAA,EAAAA,YAAU,MACRC,EAAAA,EAAAA,IACE,OACAC,EAAAA,GAAUC,QACV7B,aAAQ,EAARA,EAAU8B,SAASC,MAAM,SAAS,GAAGA,MAAM,KAAK,KAAMC,EAAAA,IAExDC,OAAOC,iBAAiB,SAAUC,EAAU,CAAEC,SAAS,IACvDC,EAAAA,KACAC,EAAAA,IAEO,KACLL,OAAOM,oBAAoB,SAAUJ,GACrCE,EAAAA,KACAC,EAAAA,GAAuB,IAExB,KAEHZ,EAAAA,EAAAA,YAAU,KACRjB,EAAS+B,QAAUlC,EACnB+B,EAAAA,KACAnC,EAAAA,GAAiBI,GACjBJ,EAAAA,GAAoBS,EAAS,KAG/Be,EAAAA,EAAAA,YAAU,KACRe,SAASC,cAAc,0BAA0BC,eAAe,CAC9DC,SAAU,SACVC,OAAQ,SACRC,MAAO,OACP,GACD,CAACnC,IAEJ,MAIMwB,EAAWA,KACf,MAAMY,EAAad,OAAOe,QAAUf,OAAOgB,YACrCC,EAAeA,IAtDzB,SAAqBH,GACnB,OAAOI,EAAAA,KAA0BJ,CACnC,CAoD+BK,CAAYL,GAxDzB,GA4Dd,OAAOM,EAAAA,GAAmB,IAAM9C,GAAU+C,GAASA,EAAO,KAAI,CAC5DC,iBAAkBA,KAAOL,IACzBM,iBAAkBA,IAAMN,KAJxBjC,EAAMwC,OAAShD,EAAS+B,QAAUzB,GAE7BsC,EAGH,EAEN,OACEK,EAAAA,cAACC,EAAAA,EAAM,CACL3D,SAAUA,EACV4D,MACE5D,EACI,IAAI6D,mBACF7D,EAAS8B,SAASC,MAAM,SAAS,GAAGA,MAAM,KAAK,MAEjDlB,EAAa+C,OAGnBF,EAAAA,cAACI,EAAAA,EAAI,CACHF,OAAO5D,aAAQ,EAARA,EAAU8B,SAASC,MAAM,SAAS,GAAGA,MAAM,KAAK,KAAMC,EAAAA,GAC7D+B,SAAUlD,EAAakD,WAEzBL,EAAAA,cAACM,EAAAA,EAAQ,CACP5C,WAAYA,EACZT,SAAUA,EACVsD,eAjCkBtD,IACtBC,EAAYD,EAAS,IAkCnB+C,EAAAA,cAACQ,EAAAA,EAAQ,CACPjD,MAAOA,EACPF,mBAAoBA,EACpBT,MAAOA,EACPK,SAAUA,IAIjB,C","sources":["webpack://yuni-q-blog/./src/templates/tags.tsx"],"sourcesContent":["import { graphql } from 'gatsby';\nimport _ from 'lodash';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Category } from '../components/category';\nimport { Contents } from '../components/contents';\nimport { Head } from '../components/head';\nimport { CATEGORY_TYPE, HOME_TITLE } from '../constants';\nimport { Layout } from '../layout';\nimport * as Dom from '../utils/dom';\nimport * as EventManager from '../utils/event-manager';\nimport sendGAEvent, { GA_ACTION } from '../utils/ga';\nimport * as ScrollManager from '../utils/scroll';\nimport * as Storage from '../utils/storage';\nimport * as IOManager from '../utils/visible';\n\nconst DEST_POS = 316;\nconst BASE_LINE = 80;\n\nfunction getDistance(currentPos) {\n  return Dom.getDocumentHeight() - currentPos;\n}\n\nexport default ({ data, location }) => {\n  const initialCount = Storage.getCount(1);\n  const initialCategory = Storage.getCategory(CATEGORY_TYPE.ALL);\n  const [count, setCount] = useState(initialCount);\n  const countRef = useRef(count);\n  const [category, setCategory] = useState(initialCategory);\n\n  const { siteMetadata } = data.site;\n  const { countOfInitialPost } = siteMetadata.configs;\n  const posts = data.allMarkdownRemark.edges;\n  const categories = _.uniq(posts.map(({ node }) => node.frontmatter.category));\n\n  useEffect(() => {\n    sendGAEvent(\n      'tags',\n      GA_ACTION.EXPOSE,\n      location?.pathname.split('tags/')[1].split('/')[0] || HOME_TITLE,\n    );\n    window.addEventListener(`scroll`, onScroll, { passive: false });\n    IOManager.init();\n    ScrollManager.init();\n\n    return () => {\n      window.removeEventListener(`scroll`, onScroll);\n      IOManager.destroy();\n      ScrollManager.destroy();\n    };\n  }, []);\n\n  useEffect(() => {\n    countRef.current = count;\n    IOManager.refreshObserver();\n    Storage.setCount(count);\n    Storage.setCategory(category);\n  });\n\n  useEffect(() => {\n    document.querySelector('li[aria-selected=true]').scrollIntoView({\n      behavior: 'smooth',\n      inline: 'center',\n      block: 'end',\n    });\n  }, [category]);\n\n  const selectCategory = (category) => {\n    setCategory(category);\n  };\n\n  const onScroll = () => {\n    const currentPos = window.scrollY + window.innerHeight;\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE;\n    const doesNeedMore = () =>\n      posts.length > countRef.current * countOfInitialPost;\n\n    return EventManager.toFit(() => setCount((prev) => prev + 1), {\n      dismissCondition: () => !isTriggerPos(),\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\n    })();\n  };\n  return (\n    <Layout\n      location={location}\n      title={\n        location\n          ? `#${decodeURIComponent(\n              location.pathname.split('tags/')[1].split('/')[0],\n            )}`\n          : siteMetadata.title\n      }\n    >\n      <Head\n        title={location?.pathname.split('tags/')[1].split('/')[0] || HOME_TITLE}\n        keywords={siteMetadata.keywords}\n      />\n      <Category\n        categories={categories}\n        category={category}\n        selectCategory={selectCategory}\n      />\n      <Contents\n        posts={posts}\n        countOfInitialPost={countOfInitialPost}\n        count={count}\n        category={category}\n      />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: {\n          tags: { in: [$tag] }\n          category: { ne: null }\n          draft: { eq: false }\n        }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD [<span>] MMMM [</span>]\")\n            title\n            category\n            tags\n            draft\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","data","location","initialCount","Storage","initialCategory","CATEGORY_TYPE","ALL","count","setCount","useState","countRef","useRef","category","setCategory","siteMetadata","site","countOfInitialPost","configs","posts","allMarkdownRemark","edges","categories","_uniq","map","_ref2","node","frontmatter","useEffect","sendGAEvent","GA_ACTION","EXPOSE","pathname","split","HOME_TITLE","window","addEventListener","onScroll","passive","IOManager","ScrollManager","removeEventListener","current","document","querySelector","scrollIntoView","behavior","inline","block","currentPos","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","prev","dismissCondition","triggerCondition","length","React","Layout","title","decodeURIComponent","Head","keywords","Category","selectCategory","Contents"],"sourceRoot":""}