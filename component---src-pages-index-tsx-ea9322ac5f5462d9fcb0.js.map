{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["data","location","initialCount","Storage","initialCategory","CATEGORY_TYPE","ALL","useState","count","setCount","countRef","useRef","category","setCategory","siteMetadata","site","countOfInitialPost","configs","posts","allMarkdownRemark","edges","categories","map","node","frontmatter","useEffect","window","addEventListener","onScroll","passive","IOManager","ScrollManager","removeEventListener","current","document","querySelector","scrollIntoView","behavior","inline","block","currentPos","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","prev","dismissCondition","triggerCondition","length","title","HOME_TITLE","keywords","selectCategory","pageQuery"],"mappings":"+TAyBe,sBAAwB,IAArBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACjBC,EAAeC,IAAiB,GAChCC,EAAkBD,IAAoBE,IAAcC,KAFpB,EAGZC,mBAASL,GAA5BM,EAH+B,KAGxBC,EAHwB,KAIhCC,EAAWC,iBAAOH,GAJc,EAKND,mBAASH,GAAlCQ,EAL+B,KAKrBC,EALqB,KAO9BC,EAAiBd,EAAKe,KAAtBD,aACAE,EAAuBF,EAAaG,QAApCD,mBACFE,EAAQlB,EAAKmB,kBAAkBC,MAC/BC,EAAa,IAAOH,EAAMI,KAAI,qBAAGC,KAAgBC,YAAYZ,aAEnEa,qBAAU,WAKT,OAJAC,OAAOC,iBAAP,SAAkCC,EAAU,CAAEC,SAAS,IACvDC,MACAC,MAEO,WACNL,OAAOM,oBAAP,SAAqCJ,GACrCE,MACAC,SAEC,IAEHN,qBAAU,WACTf,EAASuB,QAAUzB,EACnBsB,MACA3B,IAAiBK,GACjBL,IAAoBS,MAGrBa,qBAAU,WACTS,SAASC,cAAc,0BAA0BC,eAAe,CAC/DC,SAAU,SACVC,OAAQ,SACRC,MAAO,UAEN,CAAC3B,IAEJ,IAIMgB,EAAW,WAChB,IAAMY,EAAad,OAAOe,QAAUf,OAAOgB,YACrCC,EAAe,kBAjDvB,SAAqBH,GACpB,OAAOI,MAA0BJ,EAgDLK,CAAYL,GAnDvB,IAuDhB,OAAOM,KAAmB,kBAAMrC,GAAS,SAAAsC,GAAI,OAAIA,EAAO,OAAI,CAC3DC,iBAAkB,kBAAOL,KACzBM,iBAAkB,kBAAMN,KAJxBzB,EAAMgC,OAASxC,EAASuB,QAAUjB,IAE5B8B,IAMR,OACC,kBAAC,IAAD,CAAQ7C,SAAUA,EAAUkD,MAAOrC,EAAaqC,OAC/C,kBAAC,IAAD,CAAMA,MAAOC,IAAYC,SAAUvC,EAAauC,WAChD,kBAAC,IAAD,MACA,kBAAC,IAAD,CACChC,WAAYA,EACZT,SAAUA,EACV0C,eAvBoB,SAAA1C,GACtBC,EAAYD,MAwBX,kBAAC,IAAD,CACCM,MAAOA,EACPF,mBAAoBA,EACpBR,MAAOA,EACPI,SAAUA,MAMP,IAAM2C,EAAY","file":"component---src-pages-index-tsx-ea9322ac5f5462d9fcb0.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { graphql } from 'gatsby';\nimport _ from 'lodash';\n\nimport { Layout } from '../layout';\nimport { Bio } from '../components/bio';\nimport { Head } from '../components/head';\nimport { Category } from '../components/category';\nimport { Contents } from '../components/contents';\n\nimport * as ScrollManager from '../utils/scroll';\nimport * as Storage from '../utils/storage';\nimport * as IOManager from '../utils/visible';\nimport * as EventManager from '../utils/event-manager';\nimport * as Dom from '../utils/dom';\n\nimport { HOME_TITLE, CATEGORY_TYPE } from '../constants';\n\nconst DEST_POS = 316;\nconst BASE_LINE = 80;\n\nfunction getDistance(currentPos) {\n\treturn Dom.getDocumentHeight() - currentPos;\n}\n\nexport default ({ data, location }) => {\n\tconst initialCount = Storage.getCount(1);\n\tconst initialCategory = Storage.getCategory(CATEGORY_TYPE.ALL);\n\tconst [count, setCount] = useState(initialCount);\n\tconst countRef = useRef(count);\n\tconst [category, setCategory] = useState(initialCategory);\n\n\tconst { siteMetadata } = data.site;\n\tconst { countOfInitialPost } = siteMetadata.configs;\n\tconst posts = data.allMarkdownRemark.edges;\n\tconst categories = _.uniq(posts.map(({ node }) => node.frontmatter.category));\n\n\tuseEffect(() => {\n\t\twindow.addEventListener(`scroll`, onScroll, { passive: false });\n\t\tIOManager.init();\n\t\tScrollManager.init();\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`scroll`, onScroll);\n\t\t\tIOManager.destroy();\n\t\t\tScrollManager.destroy();\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tcountRef.current = count;\n\t\tIOManager.refreshObserver();\n\t\tStorage.setCount(count);\n\t\tStorage.setCategory(category);\n\t});\n\n\tuseEffect(() => {\n\t\tdocument.querySelector('li[aria-selected=true]').scrollIntoView({\n\t\t\tbehavior: 'smooth',\n\t\t\tinline: 'center',\n\t\t\tblock: 'end',\n\t\t});\n\t}, [category]);\n\n\tconst selectCategory = category => {\n\t\tsetCategory(category);\n\t};\n\n\tconst onScroll = () => {\n\t\tconst currentPos = window.scrollY + window.innerHeight;\n\t\tconst isTriggerPos = () => getDistance(currentPos) < BASE_LINE;\n\t\tconst doesNeedMore = () =>\n\t\t\tposts.length > countRef.current * countOfInitialPost;\n\n\t\treturn EventManager.toFit(() => setCount(prev => prev + 1), {\n\t\t\tdismissCondition: () => !isTriggerPos(),\n\t\t\ttriggerCondition: () => isTriggerPos() && doesNeedMore(),\n\t\t})();\n\t};\n\n\treturn (\n\t\t<Layout location={location} title={siteMetadata.title}>\n\t\t\t<Head title={HOME_TITLE} keywords={siteMetadata.keywords} />\n\t\t\t<Bio />\n\t\t\t<Category\n\t\t\t\tcategories={categories}\n\t\t\t\tcategory={category}\n\t\t\t\tselectCategory={selectCategory}\n\t\t\t/>\n\t\t\t<Contents\n\t\t\t\tposts={posts}\n\t\t\t\tcountOfInitialPost={countOfInitialPost}\n\t\t\t\tcount={count}\n\t\t\t\tcategory={category}\n\t\t\t/>\n\t\t</Layout>\n\t);\n};\n\nexport const pageQuery = graphql`\n\tquery {\n\t\tsite {\n\t\t\tsiteMetadata {\n\t\t\t\ttitle\n\t\t\t\tconfigs {\n\t\t\t\t\tcountOfInitialPost\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tallMarkdownRemark(\n\t\t\tsort: { fields: [frontmatter___date], order: DESC }\n\t\t\tfilter: { frontmatter: { category: { ne: null }, draft: { eq: false } } }\n\t\t) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\texcerpt(pruneLength: 200, truncate: true)\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\tdate(formatString: \"MMMM DD, YYYY\")\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tcategory\n\t\t\t\t\t\ttags\n\t\t\t\t\t\tdraft\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n"],"sourceRoot":""}