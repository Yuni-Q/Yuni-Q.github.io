{"version":3,"file":"component---src-pages-response-check-tsx-6f40d9500920a0a84d80.js","mappings":"wJAGA,MAAMA,EAAc,OACdC,EAAc,MACdC,EAAY,cAEZC,EAASC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,yBAAAC,YAAA,eAAVJ,CAAU,iGAKHK,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,CAAK,IAC/BC,IAAA,IAAC,MAAED,GAAOC,EAAA,OAAMD,IAAUT,EAAc,QAAU,OAAO,IAoEpE,UAjEiCW,KAC/B,MAAM,EAACF,EAAK,EAAEG,IAAYC,EAAAA,EAAAA,UAASd,IAC7B,EAACe,EAAO,EAAEC,IAAcF,EAAAA,EAAAA,UAAS,KACjC,EAACG,EAAM,EAAEC,IAAaJ,EAAAA,EAAAA,UAAS,GAC/BK,GAAOC,EAAAA,EAAAA,QAAO,MACdC,GAAYD,EAAAA,EAAAA,QAAO,MACnBE,GAAUC,EAAAA,EAAAA,cAAY,KAc1B,GAbIb,IAAUV,IACZa,EAASZ,GACToB,EAAUG,QAAUC,YAAW,KAC7BN,EAAKK,SAAU,IAAIE,MAAOC,UAC1Bd,EAASX,EAAU,GAClB0B,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB,MAEpCpB,IAAUT,IACZkB,EAAKK,QAAU,KACfX,EAASb,GACT+B,MAAM,YACNC,aAAaX,EAAUG,UAErBd,IAAUR,EAAW,CACvB,MACM+B,GADU,IAAIP,MAAOC,UACDR,EAAKK,QAC/BR,GAAYD,GACS,CAACkB,GAAOC,QAAAC,EAAAA,EAAAA,GAAKpB,IACdqB,MAAK,CAACC,EAAGC,IAAMD,EAAIC,MAEvCpB,EAAUe,GACVpB,EAASb,EACX,IACC,CAACU,IACJ,OACE6B,EAAAA,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACfC,OAAQ,UAGVN,EAAAA,cAACpC,EAAM,CAACO,MAAOA,EAAOY,QAASA,GAC5BZ,IAAUV,EACP,cACAU,IAAUT,EACV,iBACA,UAENsC,EAAAA,cAAA,WACEA,EAAAA,cAAA,WACGxB,EAAQ+B,OAAS,GAAC,MACX7B,EAAM,aACVF,EAAQgC,QAAO,CAACC,EAAMC,IAASD,EAAOC,GAAM,GAAKlC,EAAQ+B,OAAM,MAGpE/B,EAAQmC,KAAI,CAACjC,EAAQkC,IAElBZ,EAAAA,cAAA,OAAKa,IAAQnC,EAAM,IAAIkC,GAAWA,EAAM,EAAC,OAAOlC,EAAM,SAIxD,C","sources":["webpack://yuni-q-blog/./src/pages/response-check.tsx"],"sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst WAITE_COLOR = 'aqua';\nconst READY_COLOR = 'red';\nconst NOW_COLOR = 'greenyellow';\n\nconst Screen = styled.div<{ color: string }>`\n  width: 300px;\n  height: 200px;\n  text-align: center;\n  user-select: none;\n  background-color: ${({ color }) => color};\n  color: ${({ color }) => (color === READY_COLOR ? 'white' : 'black')};\n`;\n\nconst ResponseCheck: React.VFC = () => {\n  const [color, setColor] = useState(WAITE_COLOR);\n  const [recodes, setRecodes] = useState([]);\n  const [recode, setRecode] = useState(0);\n  const date = useRef(null);\n  const timeoutId = useRef(null);\n  const onClick = useCallback(() => {\n    if (color === WAITE_COLOR) {\n      setColor(READY_COLOR);\n      timeoutId.current = setTimeout(() => {\n        date.current = new Date().getTime();\n        setColor(NOW_COLOR);\n      }, Math.floor(Math.random() * 1000) + 2000);\n    }\n    if (color === READY_COLOR) {\n      date.current = null;\n      setColor(WAITE_COLOR);\n      alert('너무 성급하군요');\n      clearTimeout(timeoutId.current);\n    }\n    if (color === NOW_COLOR) {\n      const endTime = new Date().getTime();\n      const newTime = endTime - date.current;\n      setRecodes((recodes) => {\n        const newRecodes = [newTime, ...recodes];\n        return newRecodes.sort((a, b) => a - b);\n      });\n      setRecode(newTime);\n      setColor(WAITE_COLOR);\n    }\n  }, [color]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        height: '100vh',\n      }}\n    >\n      <Screen color={color} onClick={onClick}>\n        {color === WAITE_COLOR\n          ? '클릭해서 시작하세요.'\n          : color === READY_COLOR\n          ? '초록색이 되면 클릭하세요.'\n          : '클릭하세요!'}\n      </Screen>\n      <div>\n        <div>\n          {recodes.length > 0 &&\n            `햔재 ${recode}ms / 평균 : ${\n              recodes.reduce((prev, curr) => prev + curr, 0) / recodes.length\n            }ms`}\n        </div>\n        {recodes.map((recode, idx) => {\n          return (\n            <div key={`${recode}-${idx}`}>{`${idx + 1}위 : ${recode}ms`}</div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ResponseCheck;\n"],"names":["WAITE_COLOR","READY_COLOR","NOW_COLOR","Screen","styled","div","withConfig","displayName","componentId","_ref","color","_ref2","ResponseCheck","setColor","useState","recodes","setRecodes","recode","setRecode","date","useRef","timeoutId","onClick","useCallback","current","setTimeout","Date","getTime","Math","floor","random","alert","clearTimeout","newTime","concat","_toConsumableArray","sort","a","b","React","style","display","justifyContent","alignItems","flexDirection","height","length","reduce","prev","curr","map","idx","key"],"sourceRoot":""}