{"version":3,"file":"component---src-pages-image-editor-tsx-1db4c0bea57f133ebb8a.js","mappings":"+IAiBA,MAEMA,EAAc,eAGdC,EAAiB,IACjBC,EAAiB,IAEjBC,EAAc,aAIdC,EAA2B,CAC/BC,EAAG,EACHC,EAAG,EACHC,MAAO,EACPC,OAAQ,GAGJC,EAAuB,CAC3BJ,EAAG,EACHC,EAAG,EACHC,MAAO,EACPC,OAAQ,GAkWV,UA/V8BE,KAC5B,MAAMC,GAAYC,EAAAA,EAAAA,QAA0B,MACtCC,GAAaD,EAAAA,EAAAA,QAA0B,MACvCE,GAAYF,EAAAA,EAAAA,QAA0B,OAEtC,EAACG,EAAc,EAAEC,IAAqBC,EAAAA,EAAAA,WAAS,IAC/C,EAACC,EAAa,EAAEC,IAAoBF,EAAAA,EAAAA,UAAiB,IAErD,EAACG,EAAU,EAAEC,IAAiBJ,EAAAA,EAAAA,WAAS,IACvC,EAACK,EAAU,EAAEC,IAAiBN,EAAAA,EAAAA,UAAqBb,IACnD,EAACoB,EAAW,EAAEC,IAAkBR,EAAAA,EAAAA,UAAuB,IAY7D,SAASS,IACP,MAAMC,EAASd,EAAWe,QAC1B,GAAe,OAAXD,EAAiB,OAErB,MAAME,EAAUF,EAAOG,WAAW,MAC5BC,EAAQC,EAAmBhC,GACjC+B,EAAME,OAKN,WACE,MAAM,EAAE5B,EAAC,EAAEC,EAAC,MAAEC,EAAK,OAAEC,GAAW0B,EAAYH,EAAOb,GAC7CiB,EAAaC,EAAqB,CAAE7B,QAAOC,UAAUU,GAC3DmB,EAAaV,EAAQQ,GACrBN,SAAAA,EAASS,OAAQC,KAAKC,GAAKvC,EAAkBiB,GAC7CW,SAAAA,EAASY,UAAUV,EAAO1B,EAAGC,EAAGC,EAAOC,GAEvCgB,EAAYkB,SAAQC,IAAiB,OAAXC,GAAMD,EAC9B,MAAME,EAAQN,KAAKO,IAAI5B,GAAiB,IAC1B,KAAV2B,GACFpC,EAASJ,EAAIuC,EAAKG,UAAYH,EAAKtC,EAAIsC,EAAKpC,OAC5CC,EAASH,EAAIsC,EAAKvC,EAClBI,EAASF,MAAQqC,EAAKpC,OACtBC,EAASD,OAASoC,EAAKrC,OACJ,MAAVsC,GACTpC,EAASJ,EAAIuC,EAAKI,SAAWJ,EAAKvC,EAAIuC,EAAKrC,MAC3CE,EAASH,EAAIsC,EAAKG,UAAYH,EAAKtC,EAAIsC,EAAKpC,OAC5CC,EAASF,MAAQqC,EAAKrC,MACtBE,EAASD,OAASoC,EAAKpC,QACJ,MAAVqC,GACTpC,EAASJ,EAAIuC,EAAKtC,EAClBG,EAASH,EAAIsC,EAAKI,SAAWJ,EAAKvC,EAAIuC,EAAKrC,MAC3CE,EAASF,MAAQqC,EAAKpC,OACtBC,EAASD,OAASoC,EAAKrC,QAEvBE,EAASJ,EAAIuC,EAAKvC,EAClBI,EAASH,EAAIsC,EAAKtC,EAClBG,EAASF,MAAQqC,EAAKrC,MACtBE,EAASD,OAASoC,EAAKpC,QAEzB,MAAMyC,EAAcC,aAAW,EAAXA,EAAaC,aAC/B1C,EAASJ,EACTI,EAASH,EACTG,EAASF,MACTE,EAASD,QAEXqB,SAAAA,EAASuB,aAAaH,EAA0BxC,EAASJ,EAAGI,EAASH,EAAE,IAGzEuB,SAAAA,EAASwB,SACX,EA3CA,MAAMC,EAAa3C,EAAUiB,QACvBsB,EAAcI,aAAU,EAAVA,EAAYxB,WAAW,KA2C7C,CAoFA,SAASyB,IACP,IAAKnC,EAAY,OAEjB,MAAMO,EAAShB,EAAUiB,QACnBC,EAAUF,aAAM,EAANA,EAAQG,WAAW,MACnC,GAAyB,IAArBR,EAAWf,OAAqC,IAAtBe,EAAWd,OAAc,CACrD,MAAM,EAAEH,EAAC,EAAEC,EAAC,MAAEC,EAAK,OAAEC,GAAWc,EACV,KAAlBJ,IACFsC,QAAQC,IAAI,KAAMnC,GAClBb,EAASJ,EAAIC,EACbG,EAASH,GAAIuB,aAAO,EAAPA,EAASF,OAAOnB,QAASH,EAAIE,EAC1CE,EAASF,MAAQC,EACjBC,EAASD,OAASD,GAEE,MAAlBW,IACFT,EAASJ,GAAIwB,aAAO,EAAPA,EAASF,OAAOpB,OAAQF,EAAIE,EACzCE,EAASH,GAAIuB,aAAO,EAAPA,EAASF,OAAOnB,QAASF,EAAIE,EAC1CC,EAASF,MAAQA,EACjBE,EAASD,OAASA,GAEE,MAAlBU,IACFT,EAASJ,GAAIwB,aAAO,EAAPA,EAASF,OAAOpB,OAAQD,EAAIE,EACzCC,EAASH,EAAID,EACbI,EAASF,MAAQC,EACjBC,EAASD,OAASD,GAEE,IAAlBW,IACFT,EAASJ,EAAIA,EACbI,EAASH,EAAIA,EACbG,EAASF,MAAQA,EACjBE,EAASD,OAASA,GAGpBiB,GAAgBiC,GAAK,GAAAC,QAAAC,EAAAA,EAAAA,GAChBF,GAAK,CACR,CACErD,EAAGI,EAASJ,EACZC,EAAGG,EAASH,EACZC,MAAOE,EAASF,MAChBC,OAAQC,EAASD,OACjBwC,SAAUrB,aAAM,EAANA,EAAQpB,MAClBwC,UAAWpB,aAAM,EAANA,EAAQnB,OACnBU,oBAGN,CACAK,EAAcnB,EAChB,CAqCA,SAAS4B,EAAmB6B,GAC1B,MAAM9B,EAAQ,IAAI+B,MAElB,OADA/B,EAAMgC,IAAMF,EACL9B,CACT,CAEA,SAASM,EACPV,EAAgCqC,GAEhC,IADA,MAAEzD,EAAK,OAAEC,GAAcwD,EAER,OAAXrC,KACHA,EAAOpB,MAAOoB,EAAOnB,QAAU,CAACD,EAAOC,GAC1C,CAEA,SAAS4B,EAAoB6B,EAE3B/C,GACM,IAFN,MAAEX,EAAK,OAAEC,GAAcyD,EAGvB,MAAO,CACL1D,MAAOW,EAAgBjB,EAAiBO,EAASD,EACjDC,OAAQU,EAAgBjB,EAAiBM,EAAQC,EAErD,CAEA,SAAS0B,EACPH,EACAb,GAEA,MAAMiB,EAAaC,EACjB,CAAE7B,MAzSiB,IAySQC,OAxSP,KAySpBU,GAEIgD,EACJnC,EAAMxB,MAAQwB,EAAMvB,QAAU2B,EAAW5B,MAAQ4B,EAAW3B,QAExDD,EAAQ2D,EACV/B,EAAW5B,MACVwB,EAAMxB,MAAQ4B,EAAW3B,OAAUuB,EAAMvB,OACxCA,EAAS0D,EACVnC,EAAMvB,OAAS2B,EAAW5B,MAASwB,EAAMxB,MAC1C4B,EAAW3B,OAOf,MAAO,CAAEH,GANEkC,KAAK4B,MAAMjD,EAAgBjB,GAAkBM,EAM5CD,GAJTiC,KAAK4B,OACFjD,EApTU,IAoTqBhB,EAAkBD,GACjDO,EAESD,QAAOC,SACxB,CAEA,OAxRA4D,EAAAA,EAAAA,WAAU1C,EAAgB,CAACJ,KAE3B8C,EAAAA,EAAAA,YAAU,MA8DV,WACE,MAAMzC,EAAShB,EAAUiB,QACzB,GAAe,OAAXD,EAAiB,OAErB,MAAME,EAAUF,EAAOG,WAAW,MAC5BC,EAAQC,EAAmBhC,GAGjC,SAASqE,IACP,MAAM,EAAEhE,EAAC,EAAEC,EAAC,MAAEC,EAAK,OAAEC,GAAW0B,EAAYH,EAAOb,GAC7CiB,EAAaC,EAAqB,CAAE7B,QAAOC,UAAUU,GAC3DmB,EAAaV,EAAQQ,GACrBN,SAAAA,EAASS,OAAQC,KAAKC,GAAKvC,EAAkBiB,GACzCW,IAASA,EAAQyC,OAASnE,GAC9B0B,SAAAA,EAASY,UAAUV,EAAO1B,EAAGC,EAAGC,EAAOC,GACvCqB,SAAAA,EAASwB,SACX,CAVAtB,EAAME,OAASoC,CAWjB,CA9EEE,GAgFF,WACE,MAAM5C,EAASb,EAAUc,QACzB,GAAe,OAAXD,EAAiB,OAErB,MAAMI,EAAQC,EAAmBhC,GAGjC,SAASwE,IACP,MAAM,MAAEjE,EAAK,OAAEC,GAAW0B,EAAYH,EAAOb,GACvCiB,EAAaC,EAAqB,CAAE7B,QAAOC,UAAUU,GAC3DmB,EAAaV,EAAQQ,EACvB,CANAJ,EAAME,OAASuC,CAOjB,CA3FEC,GACA/C,GAAgB,GACf,CAAC1B,EAAakB,KAEjBkD,EAAAA,EAAAA,YAyFA,WACE,MAAMzC,EAASb,EAAUc,QACnBC,EAAUF,aAAM,EAANA,EAAQG,WAAW,MAC/BH,IAAQE,SAAAA,EAAS6C,UAAU,EAAG,EAAG/C,EAAOpB,MAAOoB,EAAOnB,SACtDqB,IAASA,EAAQ8C,UAAY,4BACjC9C,SAAAA,EAAS+C,SACPtD,EAAWjB,EACXiB,EAAWhB,EACXgB,EAAWf,MACXe,EAAWd,OAEf,GApGwB,CAACc,IAiRvBuD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UACEC,MAAO,CAAEC,MAAOhE,EAAiB,OAAS,SAC1CiE,QA3EN,WACMjE,GACFI,EAAiB,GAEnBH,GAAmBiE,IAAkBA,GACvC,GAuEK,QAGAlE,GACC8D,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAQG,QA3EhB,WACE7D,GAAkB0B,IAAWA,EA1Pb,IA0PoC3C,GACtD,GAyE4C,OACpC2E,EAAAA,cAAA,UAAQG,QAzEhB,WACE7D,GACG0B,IAAWA,EAAQ3C,EA9PN,IA8PsCA,GAExD,GAqE2C,OAGvC2E,EAAAA,cAAA,UACEC,MAAO,CAAEC,MAAO3D,EAAa,OAAS,SACtC4D,QAzEN,WACM5D,GACFK,EAAe,IAEjBJ,GAAe6D,IAAcA,GAC/B,GAqEK,QAGDL,EAAAA,cAAA,UAAQG,QAlGZ,WACEvD,EAAe,IACfN,EAAiB,GACjBE,GAAc,GACdL,GAAkB,EACpB,GA6FkC,OAC9B6D,EAAAA,cAAA,WACAA,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UACEC,MAAO,CACLrE,SAAU,WACV0E,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEbC,IAAK3E,IAEPkE,EAAAA,cAAA,UACEC,MAAO,CACLrE,SAAU,WACV0E,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEbC,IAAKzE,IAEPgE,EAAAA,cAAA,UACEC,MAAO,CACLrE,SAAU,WACV0E,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEbC,IAAKxE,EACLyE,YA3NR,SAAwBC,GAIU,IAAAC,EAAAC,EAAA,IAJT,QACvBC,EAAO,QACPC,EAAO,QACPC,GAC8BL,EAG9B,GAFAhC,QAAQC,IAAI,kBAAmB,CAAErC,aAAYuE,aAExCvE,EAAY,OACjB,GAlJe,IAkJXuE,EAAwB,OAE5B,MAAMG,EACsC,QADxBL,EACD,QADCC,EAClB5E,EAAUc,eAAO,IAAA8D,OAAA,EAAjBA,EAAmBK,+BAAuB,IAAAN,EAAAA,EAAI,IAAIO,QAAQ,EAAG,EAAG,EAAG,GACrEzE,EAAc,IACTnB,EACHC,EAAGuF,EAAUE,EAAezF,EAC5BC,EAAGuF,EAAUC,EAAexF,GAEhC,EA2MQ2F,YAzMR,SAAwBC,GAIU,IAAAC,EAAAC,EAAA,IAJT,QACvBT,EAAO,QACPC,EAAO,QACPC,GAC8BK,EAC9B,IAAK9E,EAAY,OACjB,GAnKe,IAmKXuE,EAAwB,OAE5B,MAAMG,EACsC,QADxBK,EACD,QADCC,EAClBtF,EAAUc,eAAO,IAAAwE,OAAA,EAAjBA,EAAmBL,+BAAuB,IAAAI,EAAAA,EAAI,IAAIH,QAAQ,EAAG,EAAG,EAAG,GACrEzE,GAAeqB,IAAI,IACdA,EACHrC,MAAOqF,EAAUhD,EAAKvC,EAAIyF,EAAezF,EACzCG,OAAQqF,EAAUjD,EAAKtC,EAAIwF,EAAexF,KAE9C,EA2LQ+F,UAAW9C,EACX+C,aAzIR,SAAyBC,GAA6C,IAA5C,QAAEZ,GAAwCY,EAClE/C,QAAQC,IAAI,mBAAoB,CAAErC,aAAYuE,YAhO/B,IAkOXA,GACJpC,GACF,KAuIK,C","sources":["webpack://yuni-q-blog/./src/pages/image-editor.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, MouseEvent } from 'react';\n\ninterface Size {\n  width: number;\n  height: number;\n}\n\ninterface Rectangle extends Size {\n  x: number;\n  y: number;\n}\n\ninterface BlurryArea extends Rectangle {\n  maxWidth?: number;\n  maxHeight?: number;\n}\n\nconst MAX_CANVAS_WIDTH = 800;\nconst MAX_CANVAS_HEIGHT = 600;\nconst imageSource = '/favicon.png';\n\nconst RIGHT_ANGLE = 90;\nconst STRAIGHT_ANGLE = 180;\nconst COMPLETE_ANGLE = 360;\n\nconst BLUR_FILTER = 'blur(10px)';\n\nconst LEFT_CLICK = 1;\n\nconst INITIAL_AREA: BlurryArea = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n};\n\nconst position: BlurryArea = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n};\n\nconst ImageEditor: React.FC = () => {\n  const blurLayer = useRef<HTMLCanvasElement>(null);\n  const imageLayer = useRef<HTMLCanvasElement>(null);\n  const dragLayer = useRef<HTMLCanvasElement>(null);\n\n  const [isRotationMode, setIsRotationMode] = useState(false);\n  const [rotationAngle, setRotationAngle] = useState<number>(0);\n\n  const [isBlurMode, setIsBlurMode] = useState(false);\n  const [blurryArea, setBlurryArea] = useState<BlurryArea>(INITIAL_AREA);\n  const [blurryAreas, setBlurryAreas] = useState<BlurryArea[]>([]);\n\n  useEffect(drawImageLayer, [blurryArea]);\n\n  useEffect(() => {\n    drawBlurLayer();\n    drawDragLayer();\n    drawImageLayer();\n  }, [imageSource, rotationAngle]);\n\n  useEffect(drawDragArea, [blurryArea]);\n\n  function drawImageLayer() {\n    const canvas = imageLayer.current;\n    if (canvas === null) return;\n\n    const context = canvas.getContext('2d');\n    const image = createImageElement(imageSource);\n    image.onload = drawEditedImage;\n\n    const blurCanvas = blurLayer.current;\n    const blurContext = blurCanvas?.getContext('2d');\n\n    function drawEditedImage() {\n      const { x, y, width, height } = locateImage(image, rotationAngle);\n      const canvasSize = getRotatedCanvasSize({ width, height }, rotationAngle);\n      resizeCanvas(canvas, canvasSize);\n      context?.rotate((Math.PI / STRAIGHT_ANGLE) * rotationAngle);\n      context?.drawImage(image, x, y, width, height);\n\n      blurryAreas.forEach(({ ...area }) => {\n        const angle = Math.abs(rotationAngle) % 360;\n        if (angle === 90) {\n          position.x = area.maxHeight - area.y - area.height;\n          position.y = area.x;\n          position.width = area.height;\n          position.height = area.width;\n        } else if (angle === 180) {\n          position.x = area.maxWidth - area.x - area.width;\n          position.y = area.maxHeight - area.y - area.height;\n          position.width = area.width;\n          position.height = area.height;\n        } else if (angle === 270) {\n          position.x = area.y;\n          position.y = area.maxWidth - area.x - area.width;\n          position.width = area.height;\n          position.height = area.width;\n        } else {\n          position.x = area.x;\n          position.y = area.y;\n          position.width = area.width;\n          position.height = area.height;\n        }\n        const blurryImage = blurContext?.getImageData(\n          position.x,\n          position.y,\n          position.width,\n          position.height,\n        );\n        context?.putImageData(blurryImage as ImageData, position.x, position.y);\n      });\n\n      context?.restore();\n    }\n  }\n\n  function drawBlurLayer() {\n    const canvas = blurLayer.current;\n    if (canvas === null) return;\n\n    const context = canvas.getContext('2d');\n    const image = createImageElement(imageSource);\n    image.onload = drawBlurImage;\n\n    function drawBlurImage() {\n      const { x, y, width, height } = locateImage(image, rotationAngle);\n      const canvasSize = getRotatedCanvasSize({ width, height }, rotationAngle);\n      resizeCanvas(canvas, canvasSize);\n      context?.rotate((Math.PI / STRAIGHT_ANGLE) * rotationAngle);\n      if (context) context.filter = BLUR_FILTER;\n      context?.drawImage(image, x, y, width, height);\n      context?.restore();\n    }\n  }\n\n  function drawDragLayer() {\n    const canvas = dragLayer.current;\n    if (canvas === null) return;\n\n    const image = createImageElement(imageSource);\n    image.onload = fitCanvasToImage;\n\n    function fitCanvasToImage() {\n      const { width, height } = locateImage(image, rotationAngle);\n      const canvasSize = getRotatedCanvasSize({ width, height }, rotationAngle);\n      resizeCanvas(canvas, canvasSize);\n    }\n  }\n\n  function drawDragArea() {\n    const canvas = dragLayer.current;\n    const context = canvas?.getContext('2d');\n    if (canvas) context?.clearRect(0, 0, canvas.width, canvas.height);\n    if (context) context.fillStyle = 'rgba(255, 255, 255, 0.2)';\n    context?.fillRect(\n      blurryArea.x,\n      blurryArea.y,\n      blurryArea.width,\n      blurryArea.height,\n    );\n  }\n\n  function handleMouseDown({\n    buttons,\n    clientX,\n    clientY,\n  }: MouseEvent<HTMLCanvasElement>) {\n    console.log('handleMouseDown', { isBlurMode, buttons });\n\n    if (!isBlurMode) return;\n    if (buttons !== LEFT_CLICK) return;\n\n    const canvasPosition =\n      dragLayer.current?.getBoundingClientRect() ?? new DOMRect(0, 0, 0, 0);\n    setBlurryArea({\n      ...INITIAL_AREA,\n      x: clientX - canvasPosition.x,\n      y: clientY - canvasPosition.y,\n    });\n  }\n\n  function handleMouseMove({\n    buttons,\n    clientX,\n    clientY,\n  }: MouseEvent<HTMLCanvasElement>) {\n    if (!isBlurMode) return;\n    if (buttons !== LEFT_CLICK) return;\n\n    const canvasPosition =\n      dragLayer.current?.getBoundingClientRect() ?? new DOMRect(0, 0, 0, 0);\n    setBlurryArea((area) => ({\n      ...area,\n      width: clientX - area.x - canvasPosition.x,\n      height: clientY - area.y - canvasPosition.y,\n    }));\n  }\n\n  function handleMouseUp() {\n    if (!isBlurMode) return;\n\n    const canvas = blurLayer.current;\n    const context = canvas?.getContext('2d');\n    if (blurryArea.width !== 0 && blurryArea.height !== 0) {\n      const { x, y, width, height } = blurryArea;\n      if (rotationAngle === 90) {\n        console.log('??', blurryArea);\n        position.x = y;\n        position.y = context?.canvas.height - x - width;\n        position.width = height;\n        position.height = width;\n      }\n      if (rotationAngle === 180) {\n        position.x = context?.canvas.width - x - width;\n        position.y = context?.canvas.height - y - height;\n        position.width = width;\n        position.height = height;\n      }\n      if (rotationAngle === 270) {\n        position.x = context?.canvas.width - y - height;\n        position.y = x;\n        position.width = height;\n        position.height = width;\n      }\n      if (rotationAngle === 0) {\n        position.x = x;\n        position.y = y;\n        position.width = width;\n        position.height = height;\n      }\n\n      setBlurryAreas((areas) => [\n        ...areas,\n        {\n          x: position.x,\n          y: position.y,\n          width: position.width,\n          height: position.height,\n          maxWidth: canvas?.width,\n          maxHeight: canvas?.height,\n          rotationAngle,\n        },\n      ]);\n    }\n    setBlurryArea(INITIAL_AREA);\n  }\n\n  function handleMouseLeave({ buttons }: MouseEvent<HTMLCanvasElement>) {\n    console.log('handleMouseLeave', { isBlurMode, buttons });\n\n    if (buttons !== LEFT_CLICK) return;\n    handleMouseUp();\n  }\n\n  function handleClear() {\n    setBlurryAreas([]);\n    setRotationAngle(0);\n    setIsBlurMode(false);\n    setIsRotationMode(false);\n  }\n\n  function handleRotate() {\n    if (isRotationMode) {\n      setRotationAngle(0);\n    }\n    setIsRotationMode((rotationMode) => !rotationMode);\n  }\n  function handleRotateRight() {\n    setRotationAngle((angle) => (angle + RIGHT_ANGLE) % COMPLETE_ANGLE);\n  }\n  function handleRotateLeft() {\n    setRotationAngle(\n      (angle) => (angle + COMPLETE_ANGLE - RIGHT_ANGLE) % COMPLETE_ANGLE,\n    );\n  }\n  function handleBlur() {\n    if (isBlurMode) {\n      setBlurryAreas([]);\n    }\n    setIsBlurMode((blurMode) => !blurMode);\n  }\n\n  function createImageElement(source: string) {\n    const image = new Image();\n    image.src = source;\n    return image;\n  }\n\n  function resizeCanvas(\n    canvas: HTMLCanvasElement | null,\n    { width, height }: Size,\n  ) {\n    if (canvas === null) return;\n    [canvas.width, canvas.height] = [width, height];\n  }\n\n  function getRotatedCanvasSize(\n    { width, height }: Size,\n    rotationAngle: number,\n  ): Size {\n    return {\n      width: rotationAngle % STRAIGHT_ANGLE ? height : width,\n      height: rotationAngle % STRAIGHT_ANGLE ? width : height,\n    };\n  }\n\n  function locateImage(\n    image: HTMLImageElement,\n    rotationAngle: number,\n  ): Rectangle {\n    const canvasSize = getRotatedCanvasSize(\n      { width: MAX_CANVAS_WIDTH, height: MAX_CANVAS_HEIGHT },\n      rotationAngle,\n    );\n    const isLongerWidth =\n      image.width > image.height + (canvasSize.width - canvasSize.height);\n\n    const width = isLongerWidth\n      ? canvasSize.width\n      : (image.width * canvasSize.height) / image.height;\n    const height = isLongerWidth\n      ? (image.height * canvasSize.width) / image.width\n      : canvasSize.height;\n    const x = -Math.floor(rotationAngle / STRAIGHT_ANGLE) * width;\n    const y =\n      -Math.floor(\n        ((rotationAngle + RIGHT_ANGLE) % COMPLETE_ANGLE) / STRAIGHT_ANGLE,\n      ) * height;\n\n    return { x, y, width, height };\n  }\n\n  return (\n    <>\n      <button\n        style={{ color: isRotationMode ? 'blue' : 'black' }}\n        onClick={handleRotate}\n      >\n        회전모드\n      </button>\n      {isRotationMode && (\n        <>\n          <button onClick={handleRotateRight}>오른쪽</button>\n          <button onClick={handleRotateLeft}>왼쪽</button>\n        </>\n      )}\n      <button\n        style={{ color: isBlurMode ? 'blue' : 'black' }}\n        onClick={handleBlur}\n      >\n        블러모드\n      </button>\n      <button onClick={handleClear}>지우기</button>\n      <br />\n      <>\n        <canvas\n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n          }}\n          ref={blurLayer}\n        />\n        <canvas\n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n          }}\n          ref={imageLayer}\n        />\n        <canvas\n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n          }}\n          ref={dragLayer}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseLeave}\n        />\n      </>\n    </>\n  );\n};\n\nexport default ImageEditor;\n"],"names":["imageSource","STRAIGHT_ANGLE","COMPLETE_ANGLE","BLUR_FILTER","INITIAL_AREA","x","y","width","height","position","ImageEditor","blurLayer","useRef","imageLayer","dragLayer","isRotationMode","setIsRotationMode","useState","rotationAngle","setRotationAngle","isBlurMode","setIsBlurMode","blurryArea","setBlurryArea","blurryAreas","setBlurryAreas","drawImageLayer","canvas","current","context","getContext","image","createImageElement","onload","locateImage","canvasSize","getRotatedCanvasSize","resizeCanvas","rotate","Math","PI","drawImage","forEach","_ref","area","angle","abs","maxHeight","maxWidth","blurryImage","blurContext","getImageData","putImageData","restore","blurCanvas","handleMouseUp","console","log","areas","concat","_toConsumableArray","source","Image","src","_ref5","_ref6","isLongerWidth","floor","useEffect","drawBlurImage","filter","drawBlurLayer","fitCanvasToImage","drawDragLayer","clearRect","fillStyle","fillRect","React","style","color","onClick","rotationMode","blurMode","top","left","transform","ref","onMouseDown","_ref2","_dragLayer$current$ge","_dragLayer$current","buttons","clientX","clientY","canvasPosition","getBoundingClientRect","DOMRect","onMouseMove","_ref3","_dragLayer$current$ge2","_dragLayer$current2","onMouseUp","onMouseLeave","_ref4"],"sourceRoot":""}