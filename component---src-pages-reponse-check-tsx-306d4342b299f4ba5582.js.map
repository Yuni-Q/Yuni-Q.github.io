{"version":3,"sources":["webpack:///./src/pages/reponse-check.tsx"],"names":["Screen","styled","div","color","ResponseCheck","useState","setColor","recodes","setRecodes","date","useRef","timeoutId","onClick","useCallback","current","setTimeout","Date","getTime","Math","floor","random","alert","clearTimeout","endTime","style","display","justifyContent","alignItems","flexDirection","height","length","reduce","prev","curr","map","recode","idx","key"],"mappings":"8JAOMA,EAASC,IAAOC,IAAV,4EAAGD,CAAH,iGAKU,qBAAGE,SACd,kBATS,QAST,EAAGA,MAAqC,QAAU,WA4D9CC,UAzDkB,WAAM,MACXC,mBAdR,QAcXF,EAD8B,KACvBG,EADuB,OAEPD,mBAAS,IAAhCE,EAF8B,KAErBC,EAFqB,KAG/BC,EAAOC,iBAAO,MACdC,EAAYD,iBAAO,MACnBE,EAAUC,uBAAY,WAc1B,GAhCgB,SAmBZV,IACFG,EAnBc,OAoBdK,EAAUG,QAAUC,YAAW,WAC7BN,EAAKK,SAAU,IAAIE,MAAOC,UAC1BX,EArBU,iBAsBTY,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB,MAvBxB,QAyBZjB,IACFM,EAAKK,QAAU,KACfR,EA5Bc,QA6Bde,MAAM,YACNC,aAAaX,EAAUG,UA5BX,gBA8BVX,EAAqB,CACvB,IAAMoB,GAAU,IAAIP,MAAOC,UAC3BT,GAAW,SAACD,GAAD,OAAcgB,EAAUd,EAAKK,SAA7B,mBAAyCP,OACpDD,EAnCc,WAqCf,CAACH,IACJ,OACE,yBACEqB,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACfC,OAAQ,UAGV,kBAAC7B,EAAD,CAAQG,MAAOA,EAAOS,QAASA,GAhDjB,SAiDXT,EACG,cAjDQ,QAkDRA,EACA,iBACA,UAEN,6BACE,6BACGI,EAAQuB,OAAS,GAAjB,QAEGvB,EAAQwB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,IAAM,GAAK1B,EAAQuB,OAF5D,MAKFvB,EAAQ2B,KAAI,SAACC,EAAQC,GACpB,OAAO,yBAAKC,IAAQF,EAAL,IAAeC,GAAWD,EAAlC","file":"component---src-pages-reponse-check-tsx-306d4342b299f4ba5582.js","sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst WAITE_COLOR = 'aqua';\nconst READY_COLOR = 'red';\nconst NOW_COLOR = 'greenyellow';\n\nconst Screen = styled.div<{ color: string }>`\n  width: 300px;\n  height: 200px;\n  text-align: center;\n  user-select: none;\n  background-color: ${({ color }) => color};\n  color: ${({ color }) => (color === READY_COLOR ? 'white' : 'black')};\n`;\n\nconst ResponseCheck: React.VFC = () => {\n  const [color, setColor] = useState(WAITE_COLOR);\n  const [recodes, setRecodes] = useState([]);\n  const date = useRef(null);\n  const timeoutId = useRef(null);\n  const onClick = useCallback(() => {\n    if (color === WAITE_COLOR) {\n      setColor(READY_COLOR);\n      timeoutId.current = setTimeout(() => {\n        date.current = new Date().getTime();\n        setColor(NOW_COLOR);\n      }, Math.floor(Math.random() * 1000) + 2000);\n    }\n    if (color === READY_COLOR) {\n      date.current = null;\n      setColor(WAITE_COLOR);\n      alert('너무 성급하군요');\n      clearTimeout(timeoutId.current);\n    }\n    if (color === NOW_COLOR) {\n      const endTime = new Date().getTime();\n      setRecodes((recodes) => [endTime - date.current, ...recodes]);\n      setColor(WAITE_COLOR);\n    }\n  }, [color]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        height: '100vh',\n      }}\n    >\n      <Screen color={color} onClick={onClick}>\n        {color === WAITE_COLOR\n          ? '클릭해서 시작하세요.'\n          : color === READY_COLOR\n          ? '초록색이 되면 클릭하세요.'\n          : '클릭하세요!'}\n      </Screen>\n      <div>\n        <div>\n          {recodes.length > 0 &&\n            `평균 : ${\n              recodes.reduce((prev, curr) => prev + curr, 0) / recodes.length\n            }ms`}\n        </div>\n        {recodes.map((recode, idx) => {\n          return <div key={`${recode}-${idx}`}>{`${recode}ms`}</div>;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ResponseCheck;\n"],"sourceRoot":""}