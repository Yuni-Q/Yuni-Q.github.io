{"version":3,"file":"component---src-pages-space-invaders-tsx-7e30a62357f533647936.js","mappings":"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","sources":["webpack://yuni-q-blog/./src/pages/space-invaders.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst Grid = styled.div`\n  width: 302px;\n  height: 300px;\n  border: 1px solid black;\n  display: flex;\n  flex-wrap: wrap;\n\n  > div {\n    width: 20px;\n    height: 20px;\n    &.invader {\n      background-color: purple;\n      border-radius: 10px;\n    }\n    &.shooter {\n      background-color: green;\n    }\n    &.laser {\n      background-color: orange;\n    }\n    &.boom {\n      background-color: red;\n    }\n  }\n`;\n\nconst SpaceInvaders: React.VFC = () => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const grid = ref.current as HTMLDivElement;\n    const resultDisplay = document.querySelector('.results');\n    let currentShooterIndex = 202;\n    const width = 15;\n    let direction = 1;\n    let invadersId = null;\n    let goingRight = true;\n    const aliensRemoved = [];\n    let results = 0;\n\n    for (let i = 0; i < 255; i++) {\n      const square = document.createElement('div');\n      grid.appendChild(square);\n    }\n\n    const squares = Array.from(document.querySelectorAll('.grid div'));\n\n    const alienInvaders = [\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      15,\n      16,\n      17,\n      18,\n      19,\n      20,\n      21,\n      22,\n      23,\n      24,\n      30,\n      31,\n      32,\n      33,\n      34,\n      35,\n      36,\n      37,\n      38,\n      39,\n    ];\n\n    const draw = () => {\n      for (let i = 0; i < alienInvaders.length; i++) {\n        if (!aliensRemoved.includes(i)) {\n          squares[alienInvaders[i]].classList.add('invader');\n        }\n      }\n    };\n    draw();\n\n    const remove = () => {\n      for (let i = 0; i < alienInvaders.length; i++) {\n        squares[alienInvaders[i]].classList.remove('invader');\n      }\n    };\n\n    squares[currentShooterIndex].classList.add('shooter');\n\n    const moveShooter = (e) => {\n      squares[currentShooterIndex].classList.remove('shooter');\n      switch (e.key) {\n        case 'ArrowLeft':\n          if (currentShooterIndex % width !== 0) currentShooterIndex -= 1;\n          break;\n        case 'ArrowRight':\n          if (currentShooterIndex % width < width - 1) currentShooterIndex += 1;\n          break;\n      }\n      squares[currentShooterIndex].classList.add('shooter');\n    };\n    document.addEventListener('keydown', moveShooter);\n\n    const moveInvaders = () => {\n      const leftEdge = alienInvaders[0] % width === 0;\n      const rightEdge =\n        alienInvaders[alienInvaders.length - 1] % width === width - 1;\n      remove();\n\n      if (rightEdge && goingRight) {\n        for (let i = 0; i < alienInvaders.length; i++) {\n          alienInvaders[i] += width + 1;\n          direction = -1;\n          goingRight = false;\n        }\n      }\n\n      if (leftEdge && !goingRight) {\n        for (let i = 0; i < alienInvaders.length; i++) {\n          alienInvaders[i] += width - 1;\n          direction = 1;\n          goingRight = true;\n        }\n      }\n\n      for (let i = 0; i < alienInvaders.length; i++) {\n        alienInvaders[i] += direction;\n      }\n\n      draw();\n\n      if (squares[currentShooterIndex].classList.contains('invader')) {\n        console.log('game over');\n        resultDisplay.innerHTML = 'GAVE OVER';\n        clearInterval(invadersId);\n      }\n\n      for (let i = 0; i < alienInvaders.length; i++) {\n        if (alienInvaders[i] > squares.length) {\n          resultDisplay.innerHTML = 'GAVE OVER';\n          clearInterval(invadersId);\n        }\n      }\n\n      if (aliensRemoved.length == alienInvaders.length) {\n        resultDisplay.innerHTML = 'You Win';\n        clearInterval(invadersId);\n      }\n    };\n\n    invadersId = setInterval(moveInvaders, 300);\n\n    const shoot = (e) => {\n      let laserId;\n      let currentLaserIndex = currentShooterIndex;\n      const moveLaser = () => {\n        squares[currentLaserIndex].classList.remove('laser');\n        currentLaserIndex -= width;\n        squares[currentLaserIndex].classList.add('laser');\n\n        if (squares[currentLaserIndex].classList.contains('invader')) {\n          squares[currentLaserIndex].classList.remove('laser');\n          squares[currentLaserIndex].classList.remove('invader');\n          squares[currentLaserIndex].classList.add('boom');\n\n          setTimeout(\n            () => squares[currentLaserIndex].classList.remove('boom'),\n            300,\n          );\n          clearInterval(laserId);\n          const alienRemoved = alienInvaders.indexOf(currentLaserIndex);\n          aliensRemoved.push(alienRemoved);\n          results++;\n          resultDisplay.innerHTML = results.toString();\n        }\n      };\n      switch (e.key) {\n        case 'ArrowUp':\n          laserId = setInterval(moveLaser, 100);\n      }\n    };\n    document.addEventListener('keydown', shoot);\n  }, []);\n  return (\n    <>\n      <h1 className=\"results\"></h1>\n      <Grid className=\"grid\" ref={ref}></Grid>\n    </>\n  );\n};\n\nexport default SpaceInvaders;\n"],"names":["Grid","styled","div","withConfig","displayName","componentId","SpaceInvaders","ref","useRef","useEffect","grid","current","resultDisplay","document","querySelector","currentShooterIndex","width","direction","invadersId","goingRight","aliensRemoved","results","i","square","createElement","appendChild","squares","Array","from","querySelectorAll","alienInvaders","draw","length","includes","classList","add","addEventListener","e","remove","key","setInterval","moveInvaders","leftEdge","rightEdge","contains","console","log","innerHTML","clearInterval","laserId","currentLaserIndex","moveLaser","setTimeout","alienRemoved","indexOf","push","toString","React","className"],"sourceRoot":""}