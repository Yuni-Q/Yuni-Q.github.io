{"version":3,"sources":["webpack:///./src/pages/search.tsx"],"names":["Search","props","useState","filteredData","query","state","setState","useEffect","IOManager","siteMetadata","data","site","posts","title","HOME_TITLE","keywords","className","type","placeholder","aria-label","onChange","event","target","value","allMarkdownRemark","edges","filter","post","node","html","frontmatter","category","tags","draft","toLowerCase","includes","join","style","marginBottom","data-ad-client","data-ad-slot","data-ad-format","data-full-width-responsive","length","countOfInitialPost","count","CATEGORY_TYPE","ALL","render"],"mappings":"4FAAA,oHAUMA,EAAS,SAACC,GACd,IAEA,EAA0BC,mBAAS,CACjCC,aAAc,GACdC,MAJiB,KAEZC,EAAP,KAAcC,EAAd,KA4BAC,qBAAU,WACRC,QACC,CAACH,IAEJ,IACQI,EADSR,EAATS,KACsBC,KAAtBF,aACAL,EAAwBC,EAAxBD,MAAOD,EAAiBE,EAAjBF,aAETS,EADmBT,GArCN,KAqCsBC,EACRD,EAAe,GAEhD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMU,MAAOC,IAAYC,SAAUN,EAAaM,WAChD,2BACEC,UAAU,yCACVC,KAAK,OACLC,YAAY,SACZC,aAAW,SACXC,SAzCoB,SAACC,GACzB,IAAMjB,EAAQiB,EAAMC,OAAOC,MAIrBpB,GAHWF,EAATS,KACWc,kBAAkBC,OAAS,IAEnBC,QAAO,SAACC,GACjC,MAA8BA,EAAKC,KAA3BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,YACNC,EAAiCD,EAAjCC,SAAUlB,EAAuBiB,EAAvBjB,MAAOmB,EAAgBF,EAAhBE,KAAgBF,EAAVG,MAE/B,OACGJ,GAAQA,EAAKK,cAAcC,SAAS/B,EAAM8B,gBAC1CH,GAAYA,EAASG,cAAcC,SAAS/B,EAAM8B,gBAClDrB,GAASA,EAAMqB,cAAcC,SAAS/B,EAAM8B,gBAC5CF,GAAQA,EAAKI,KAAK,IAAIF,cAAcC,SAAS/B,MAIlDE,EAAS,CACPF,QACAD,oBAwBA,yBAAKkC,MAAO,CAAEC,aAAc,KAC1B,kBAAC,MAAD,CACEtB,UAAU,cACVuB,iBAAe,0BACfC,eAAa,aACbC,iBAAe,OACfC,6BAA2B,UAGb,IAAjB9B,EAAM+B,QAAgB,6CACtB/B,EAAM+B,OAAS,GACd,kBAAC,IAAD,CACE/B,MAAOA,EACPgC,mBAAoBhC,EAAM+B,OAC1BE,MAAOjC,EAAM+B,OACbZ,SAAUe,IAAcC,QAOnB,mBAAC9C,GAAD,OACb,kBAAC,cAAD,CACEG,MAAK,aAoCL4C,OAAQ,SAACtC,GAAD,OAAU,kBAACV,EAAD,eAAQU,KAAMA,GAAUT","file":"component---src-pages-search-tsx-664ad599071fc1f8597d.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, graphql, StaticQuery } from 'gatsby';\nimport { Layout } from '../layout/index';\nimport { Head } from '../components/head/index';\nimport { CATEGORY_TYPE, HOME_TITLE } from '../constants/index';\nimport { Bio } from '../components/bio/index';\nimport { Ins } from './index';\nimport { Contents } from '../components/contents/index';\nimport * as IOManager from '../utils/visible';\n\nconst Search = (props) => {\n  const emptyQuery = '';\n\n  const [state, setState] = useState({\n    filteredData: [],\n    query: emptyQuery,\n  });\n\n  const handleInputChange = (event) => {\n    const query = event.target.value;\n    const { data } = props;\n    const posts = data.allMarkdownRemark.edges || [];\n\n    const filteredData = posts.filter((post) => {\n      const { html, frontmatter } = post.node;\n      const { category, title, tags, draft } = frontmatter;\n\n      return (\n        (html && html.toLowerCase().includes(query.toLowerCase())) ||\n        (category && category.toLowerCase().includes(query.toLowerCase())) ||\n        (title && title.toLowerCase().includes(query.toLowerCase())) ||\n        (tags && tags.join('').toLowerCase().includes(query))\n      );\n    });\n\n    setState({\n      query,\n      filteredData,\n    });\n  };\n\n  useEffect(() => {\n    IOManager.init();\n  }, [state]);\n\n  const { data } = props;\n  const { siteMetadata } = data.site;\n  const { query, filteredData } = state;\n  const hasSearchResults = filteredData && query !== emptyQuery;\n  const posts = hasSearchResults ? filteredData : [];\n\n  return (\n    <Layout>\n      <Head title={HOME_TITLE} keywords={siteMetadata.keywords} />\n      <input\n        className=\"form-control form-control-sm ml-3 w-75\"\n        type=\"text\"\n        placeholder=\"Search\"\n        aria-label=\"Search\"\n        onChange={handleInputChange}\n      />\n      <div style={{ marginBottom: 24 }}>\n        <Ins\n          className=\"adsbygoogle\"\n          data-ad-client=\"ca-pub-2667251850399676\"\n          data-ad-slot=\"4831328462\"\n          data-ad-format=\"auto\"\n          data-full-width-responsive=\"true\"\n        ></Ins>\n      </div>\n      {posts.length === 0 && <div>검색 결과가 없습니다.</div>}\n      {posts.length > 0 && (\n        <Contents\n          posts={posts}\n          countOfInitialPost={posts.length}\n          count={posts.length}\n          category={CATEGORY_TYPE.ALL}\n        />\n      )}\n    </Layout>\n  );\n};\n\nexport default (props) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            keywords\n            title\n            configs {\n              countOfInitialPost\n            }\n          }\n        }\n        allMarkdownRemark(\n          sort: { fields: [frontmatter___date], order: DESC }\n          filter: {\n            frontmatter: { category: { ne: null }, draft: { eq: false } }\n          }\n        ) {\n          edges {\n            node {\n              html\n              excerpt(pruneLength: 200, truncate: true)\n              fields {\n                slug\n              }\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                category\n                tags\n                draft\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(data) => <Search data={data} {...props} />}\n  />\n);\n"],"sourceRoot":""}