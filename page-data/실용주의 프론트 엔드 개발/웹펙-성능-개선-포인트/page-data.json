{"componentChunkName":"component---src-templates-blog-post-js","path":"/실용주의 프론트 엔드 개발/웹펙-성능-개선-포인트/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"e4ca1467-e5b5-5fe3-83ba-1e3d275d7a16","excerpt":"트리 쉐이킹 트리 쉐이킹은 사용하지 않는 코드를 제거하는 방식입니다. ES2015 모듈의 구문에 의존하여 의존성 트리를 만들고 사용하지 않는 코드를 삭제합니다. 모듈을 가져올 때는 import arrayUtils from ‘array-utils’; 이렇게 가져오면 대량의 자바스크립트가 포함될 수 있습니다. 그렇기 때문에 import { unique, implode, explode } from “array-utils…","html":"<h2 id=\"트리-쉐이킹\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%A6%AC-%EC%89%90%EC%9D%B4%ED%82%B9\" aria-label=\"트리 쉐이킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.webpack-korea.org/guides/tree-shaking/\">트리 쉐이킹</a></h2>\n<ul>\n<li>트리 쉐이킹은 사용하지 않는 코드를 제거하는 방식입니다. ES2015 모듈의 구문에 의존하여 의존성 트리를 만들고 사용하지 않는 코드를 삭제합니다.</li>\n<li>모듈을 가져올 때는 import arrayUtils from ‘array-utils’; 이렇게 가져오면 대량의 자바스크립트가 포함될 수 있습니다. 그렇기 때문에 import { unique, implode, explode } from “array-utils”;와 같이 필요한 코드만 사용해야 합니다.</li>\n<li>사이드 이펙트를 일으키지 않는다고 보장할 수 없는 코드는 제거되지 않고 남겨둡니다.</li>\n<li>코드를 제거할 때는 UglifyJs와 같은 서드 파티 도구를 사용해야 합니다.</li>\n</ul>\n<h2 id=\"코드-스플리팅\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%94%8C%EB%A6%AC%ED%8C%85\" aria-label=\"코드 스플리팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://webpack.js.org/guides/code-splitting/\">코드 스플리팅</a></h2>\n<ul>\n<li>자바스크립트를 청크로 분할하고 청크를 필요로 하는 애플리케이션의 경로에만 이 청크들을 배분하여 성능을 개선하는 기술입니다.</li>\n<li>\n<p>코드 스프리팅은 세가지가 있습니다.</p>\n<ul>\n<li>첫번째는 엔트리입니다. 기본적으로는 entry에 2개를 설정합니다. app과 vendor인데, app은 우리가 개발한 코드이고, vendor는 서드 파티 라이브러리입니다. vendor는 자주 변경되지 않기 때문에 캐싱을 위해 분리합니다.</li>\n<li>두번째는 중복 코드 방지입니다. 엔트리에 지정한 모듈들이 동일한 모듈을 의존하면 중복된 코드를 포함하게 됩니다. 그래서 SplitChunksPlugin를 사용하여 공통 의존성을 다른 청크파일로 분리합니다.</li>\n<li>세번째는 동적 모듈 로딩입니다. ES Proposal에 있는 import()로 사용하는 모듈과 웹펙 기능인 require.ensure를 사용하면 청크를 만들게 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"성능-개선-포인트\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0-%ED%8F%AC%EC%9D%B8%ED%8A%B8\" aria-label=\"성능 개선 포인트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능 개선 포인트</h2>\n<ul>\n<li>모듈 사용시 필요한 부분만 사용하고, UglifyJs 플러그인을 사용합니다.</li>\n<li>사이드 이펙트가 없는 함수를 만들어 트리쉐이킹을 합니다.</li>\n<li>Entry에 app, vendor와 같이 수동 번들링 설정을 합니다.</li>\n<li>중복 의존성 코드 방지를 위해 SplitChunksPlugin을 사용합니다.</li>\n<li>동적 모듈 로딩을 할 수 있는 부분은 동적 모듈 로딩을 합니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/13/network/webpack\">웹펙 성능 개선 포인트</a></li>\n</ul>","frontmatter":{"title":"웹펙 성능 개선 포인트","date":"July 07, 2020"}}},"pageContext":{"slug":"/실용주의 프론트 엔드 개발/웹펙-성능-개선-포인트/","previous":{"fields":{"slug":"/GoF 디자인 패턴/구조패턴/"},"frontmatter":{"title":"구조패턴","category":"gof 디자인 패턴","draft":false}},"next":{"fields":{"slug":"/실용주의 프론트 엔드 개발/프론트엔드-성능-체크리스트/"},"frontmatter":{"title":"프론트엔드 성능 체크리스트","category":"실용주의 프론트 엔드 개발","draft":false}}}}}