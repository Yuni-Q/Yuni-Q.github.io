{"componentChunkName":"component---src-templates-blog-post-js","path":"/실용주의 프론트 엔드 개발/하드웨어/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"7f58e396-2755-5505-ac18-1342459db8b9","excerpt":"메모리 데이터는 HDD -> RAM -> Register 순서로 읽습니다. 데이터가 Register에 없게 되면 RAM 또는 HDD에서 읽게 되는데, 이 때는 Cache fault라고 합니다. RAM 또는 HDD로부터 데이터를 읽는데는 많은 시간이 필요합니다. 하드 디스크 하드디스크 디스크 캐시가 있습니다. CPU와 물리적인 하드 디스크 사이의 버퍼 역할을 하는 하드 디스크의 내장 메모리입니다. 램 임시 데이터를 RAM과 HDD에 저장하는 것의 차이점은 성능, 비용 및 CPU…","html":"<h2 id=\"메모리\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"메모리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리</h2>\n<ul>\n<li>데이터는 HDD -> RAM -> Register 순서로 읽습니다. 데이터가 Register에 없게 되면 RAM 또는 HDD에서 읽게 되는데, 이 때는 Cache fault라고 합니다. RAM 또는 HDD로부터 데이터를 읽는데는 많은 시간이 필요합니다.</li>\n</ul>\n<h3 id=\"하드-디스크\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%93%9C-%EB%94%94%EC%8A%A4%ED%81%AC\" aria-label=\"하드 디스크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하드 디스크</h3>\n<ul>\n<li>하드디스크 디스크 캐시가 있습니다. CPU와 물리적인 하드 디스크 사이의 버퍼 역할을 하는 하드 디스크의 내장 메모리입니다.</li>\n</ul>\n<h3 id=\"램\" style=\"position:relative;\"><a href=\"#%EB%9E%A8\" aria-label=\"램 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>램</h3>\n<ul>\n<li>임시 데이터를 RAM과 HDD에 저장하는 것의 차이점은 성능, 비용 및 CPU 접근성입니다. 램은 응답 시간이 수십 나노초인 반면에 HDD는 수십 밀리초의 응답 시간을 가집니다.</li>\n</ul>\n<h3 id=\"cpu-캐시레지스터\" style=\"position:relative;\"><a href=\"#cpu-%EC%BA%90%EC%8B%9C%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0\" aria-label=\"cpu 캐시레지스터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU 캐시(레지스터)</h3>\n<ul>\n<li>캐시 메모리는 RAM과 CPU 사이의 버퍼 역할을 하는 매우 빠른 메모리 타입입니다. 이는 필요시 CPU가 즉시 사용할 수 있도록 자주 요청되는 데이터와 명령어들을 저장합니다.</li>\n<li>CPU는 적은 양의 고속 스토리지로 구성된 레지스터(Register)라고 하는 특수한 온칩 메모리(On-chip memory)를 내장하고 있습니다. 레지스터는 가장 가깝고, 가장 작으며 가장 빠른 메모리입니다.</li>\n</ul>\n<h2 id=\"속도\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EB%8F%84\" aria-label=\"속도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속도</h2>\n<ul>\n<li>코드로부터 만들어지는 어셈블리의 수를 줄임으로써 속도를 향상시킵니다.</li>\n</ul>\n<h3 id=\"loop-unrolling\" style=\"position:relative;\"><a href=\"#loop-unrolling\" aria-label=\"loop unrolling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loop Unrolling</h3>\n<ul>\n<li>Loop Unrolling은 프로그램의 루프 로직을 수정하여 속도를 향상 시키는 방법입니다. 루프 안의 내용을 일부 수작업으로 늘어놓는 일을 해야 합니다. 루프는 루프 조건문을 검사하고 점프를 하는 오버헤드가 있습니다. 이 과정의 어셈블리 코드를 줄이는 대신 바이너리 코드를 늘리는 것입니다. 메모리를 좀 더 사용하는 대신 시간을 절약하는 것입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Normal</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">delete</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Loop Unrolling</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">delete</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/13/hardware\">하드웨어</a></li>\n</ul>","frontmatter":{"title":"하드웨어","date":"July 08, 2020"}}},"pageContext":{"slug":"/실용주의 프론트 엔드 개발/하드웨어/","previous":{"fields":{"slug":"/실용주의 프론트 엔드 개발/네트워크/"},"frontmatter":{"title":"네트워크","category":"실용주의 프론트 엔드 개발","draft":false}},"next":{"fields":{"slug":"/실용주의 프론트 엔드 개발/접근성/"},"frontmatter":{"title":"접근성","category":"실용주의 프론트 엔드 개발","draft":false}}}}}