{"componentChunkName":"component---src-templates-blog-post-js","path":"/실용주의 프론트 엔드 개발/네트워크/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"29144188-88bd-5e17-8d34-d2e00f285fb1","excerpt":"TTFB(Time to First Byte) 첫 번째 바이트 시간을 1.3초 미만으로 해야 합니다. 브라우저가 데이터를 받기 전까지 대기하는 시간을 최대한 줄여야 합니다. Keep-Alive HTTP 클라이언트와 HTTP 서버 간의 연결 과정은 다음과 같습니다. URL을 DNS 서버를 통해 HTTP 서버의 IP를 요청합니다. HTTP 서버와 TCP 연결을 시도합니다. HTTPS 경우 SSL 핸드쉐이크 이 후 HTTP…","html":"<h2 id=\"ttfbtime-to-first-byte\" style=\"position:relative;\"><a href=\"#ttfbtime-to-first-byte\" aria-label=\"ttfbtime to first byte permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TTFB(Time to First Byte)</h2>\n<ul>\n<li>첫 번째 바이트 시간을 1.3초 미만으로 해야 합니다. 브라우저가 데이터를 받기 전까지 대기하는 시간을 최대한 줄여야 합니다.</li>\n</ul>\n<h2 id=\"keep-alive\" style=\"position:relative;\"><a href=\"#keep-alive\" aria-label=\"keep alive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keep-Alive</h2>\n<ul>\n<li>HTTP 클라이언트와 HTTP 서버 간의 연결 과정은 다음과 같습니다.</li>\n<li>URL을 DNS 서버를 통해 HTTP 서버의 IP를 요청합니다.</li>\n<li>HTTP 서버와 TCP 연결을 시도합니다.</li>\n<li>[HTTPS 경우] SSL 핸드쉐이크</li>\n<li>이 후 HTTP 요청을 하게 됩니다.</li>\n<li>여기서 클라이언트와 서버 연결 과정이 빈번하게 발생되면 웹 사이트의 리소스를 전달하는 시간이 그만큼 소요됩니다. 클라이언트와 서버의 연결 과정을 절약하기 위해 Keep-Alive 설정을 합니다.</li>\n</ul>\n<h2 id=\"파일\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC\" aria-label=\"파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일</h2>\n<ul>\n<li>파일을 다운 받는 시간을 줄이기 위해서는 파일의 용량을 최소화해야 합니다. 파일을 빨리 다운 받을 수록 사용자에게 필요한 UI를 빨리 제공할 수 있습니다.</li>\n</ul>\n<h3 id=\"what\" style=\"position:relative;\"><a href=\"#what\" aria-label=\"what permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What</h3>\n<ul>\n<li>HTML, CSS, JS 파일에 주석과 공백을 제거합니다.</li>\n<li>\n<p>웹 폰트는 WOFF2 사용합니다.</p>\n<ul>\n<li>WOFF1 보다 30% 압축률이 향상되었다.</li>\n</ul>\n</li>\n<li>이미지는 압축된 이미지를 사용합니다.</li>\n</ul>\n<h3 id=\"how\" style=\"position:relative;\"><a href=\"#how\" aria-label=\"how permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How</h3>\n<ul>\n<li>번들러를 통해 소스 코드, 리소스 파일을 최적화 합니다.</li>\n<li>\n<p>&#x3C;link> 태그의 rel 속성에 preconnect를 사용합니다.</p>\n<ul>\n<li>DNS Lookup만 하려면 dns-prefetch를 사용합니다.</li>\n</ul>\n</li>\n<li>이미지의 압축 포맷을 JPEG 2000m, JPEG XR 또는 WebP를 사용합니다.</li>\n<li>필요한 코드만 포함합니다.</li>\n<li>HTTP 캐싱을 사용합니다.</li>\n</ul>\n<h2 id=\"api-요청\" style=\"position:relative;\"><a href=\"#api-%EC%9A%94%EC%B2%AD\" aria-label=\"api 요청 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API 요청</h2>\n<ul>\n<li>현재 보여주는 페이지에서 필요한 내용만 요청합니다.</li>\n<li>병렬 처리 가능한 부분은 병렬 처리합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Not Good</span>\n<span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">requestData1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">requestData2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> data3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">requestData3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Good</span>\n<span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">,</span> data3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\t\trequestData1<span class=\"token punctuation\">,</span>\n\t\trequestData2<span class=\"token punctuation\">,</span>\n\t\trequestData3<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>디바운스와 스로틀링을 합니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/13/network\">네트워크</a></li>\n</ul>","frontmatter":{"title":"네트워크","date":"July 07, 2020"}}},"pageContext":{"slug":"/실용주의 프론트 엔드 개발/네트워크/","previous":{"fields":{"slug":"/실용주의 프론트 엔드 개발/프론트엔드-성능-체크리스트/"},"frontmatter":{"title":"프론트엔드 성능 체크리스트","category":"실용주의 프론트 엔드 개발","draft":false}},"next":{"fields":{"slug":"/실용주의 프론트 엔드 개발/하드웨어/"},"frontmatter":{"title":"하드웨어","category":"실용주의 프론트 엔드 개발","draft":false}}}}}