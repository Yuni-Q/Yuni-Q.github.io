{"componentChunkName":"component---src-templates-blog-post-js","path":"/실용주의 프론트 엔드 개발/테스트-코드도-이해하기-쉽게-작성하자/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"31799e0e-33dd-5cff-b114-90fd2a092403","excerpt":"테스트 코드가 읽기 쉬워야 한다는 점은 테스트와 상관없는 실제 코드와 마찬가지로 중요합니다. 다른 프로그래머는 종종 테스트 코드를 실제 코드가 어떻게 동작하며 어떻게 사용되어야 하는지에 관한 비공식적인 문서라고 생각합니다. 테스트 코드가 읽기 쉬우면, 사용자는 실제 코드가 어떻게 동작하는 지 그만큼 더 쉽게 이해할 수 있습니다. 일반적인 설계 원리를 따르면 덜 중요한 세부 사항은 사용자가 볼 필요 없게 숨겨서 더 중요한 내용이 눈에 잘 띄게 해야 합니다. TDD…","html":"<ul>\n<li>테스트 코드가 읽기 쉬워야 한다는 점은 테스트와 상관없는 실제 코드와 마찬가지로 중요합니다.</li>\n<li>다른 프로그래머는 종종 테스트 코드를 실제 코드가 어떻게 동작하며 어떻게 사용되어야 하는지에 관한 비공식적인 문서라고 생각합니다.</li>\n<li>테스트 코드가 읽기 쉬우면, 사용자는 실제 코드가 어떻게 동작하는 지 그만큼 더 쉽게 이해할 수 있습니다.</li>\n<li>일반적인 설계 원리를 따르면 덜 중요한 세부 사항은 사용자가 볼 필요 없게 숨겨서 더 중요한 내용이 눈에 잘 띄게 해야 합니다.</li>\n</ul>\n<h2 id=\"tdd\" style=\"position:relative;\"><a href=\"#tdd\" aria-label=\"tdd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD</h2>\n<ul>\n<li>테스트 코드 작성</li>\n<li>테스트 실행</li>\n<li>개발 코드 작성</li>\n<li>테스트 실행 및 반복</li>\n<li>테스트 통과시 리펙토링</li>\n<li>이러한 작업들을 반복해 본질적으로 필요한 코드만 작성하고 코드의 신뢰성을 높이는 데 포커스된 개발 방법론 입니다.</li>\n</ul>\n<h2 id=\"bdd\" style=\"position:relative;\"><a href=\"#bdd\" aria-label=\"bdd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BDD</h2>\n<ul>\n<li>TDD의 단점은 코드 관점으로 테스트를 작성하여 코드 수정 시 불필요한 테스트 코드 수정사항이 발생합니다. 이러한 상황을 해결하기 위해 BDD 방밥론이 나왔는 데 사용자 시나리오 관점으로 suite를 작성합니다.</li>\n<li>사용자 관점에서 기능 단위로 작성하며 개발 코드 변경시 테스트 코드가 변경되지 않도록 행동 단위로 작성합니다.</li>\n<li>\n<p>기본적으로 테스트 코드 작성 순서는 아래와 같이 합니다.</p>\n<ul>\n<li>Feature : 테스트에 대상의 기능/책임을 명시합니다.</li>\n<li>Scenario : 테스트 목적에 대한 상황을 설명합니다.</li>\n<li>Given : 시나리오 진행에 필요한 값을 설정합니다.</li>\n<li>When : 시나리오를 진행하는데 필요한 조건을 명시합니다.</li>\n<li>Then : 시나리오를 완료했을 때 보장해야 하는 결과를 명시합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"명세-기반-테스트-기법-종류\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%84%B8-%EA%B8%B0%EB%B0%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B8%B0%EB%B2%95-%EC%A2%85%EB%A5%98\" aria-label=\"명세 기반 테스트 기법 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명세 기반 테스트 기법 종류</h2>\n<ul>\n<li>테스트 기법을 정확히 알고 있어야 원하는 테스트와 테스트 코드의 목적을 명확히 할 수 있습니다.</li>\n<li>테스트 코드에는 테스트 기법 하나씩 사용하여 읽기 쉬운 코드를 만들도록 해야 합니다.</li>\n</ul>\n<h3 id=\"1-동등분할\" style=\"position:relative;\"><a href=\"#1-%EB%8F%99%EB%93%B1%EB%B6%84%ED%95%A0\" aria-label=\"1 동등분할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 동등분할</h3>\n<ul>\n<li>테스트 대상 데이터의 구간을 일정 간격으로 분할하여 케이스를 구성합니다.</li>\n<li>보통 데이터의 구간에 중간값을 대표값으로 사용합니다.</li>\n</ul>\n<h3 id=\"2-경계값-분석\" style=\"position:relative;\"><a href=\"#2-%EA%B2%BD%EA%B3%84%EA%B0%92-%EB%B6%84%EC%84%9D\" aria-label=\"2 경계값 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 경계값 분석</h3>\n<ul>\n<li>분기 또는 반복 구문의 경계 값을 기준으로 케이스를 구성합니다.</li>\n<li>min, min+, normal, max-, max 다섯 경우의 케이스로 구성합니다.</li>\n</ul>\n<h3 id=\"3-결정-테이블\" style=\"position:relative;\"><a href=\"#3-%EA%B2%B0%EC%A0%95-%ED%85%8C%EC%9D%B4%EB%B8%94\" aria-label=\"3 결정 테이블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 결정 테이블</h3>\n<ul>\n<li>조건(입력 값)과 행위(결과 값)를 테이블로 구성하여 케이스 및 절차를 구성합니다.</li>\n<li>프로세스 수행 중 요구되는 결정 또는 조건과 프로세스와 관련된 모든 동작을 기술합니다.</li>\n</ul>\n<h3 id=\"4-조합\" style=\"position:relative;\"><a href=\"#4-%EC%A1%B0%ED%95%A9\" aria-label=\"4 조합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 조합</h3>\n<ul>\n<li>테스트하는 데 필요한 값이 다른 파라미터의 값과 최소한 한 번씩은 조합을하여 케이스를 구성합니다.</li>\n<li>대부분의 결함이 두 개 요소의 상호작용에 기인한다는 것에 착안하여, 두 개 요소의 모든 조합을 다룹니다.</li>\n</ul>\n<h3 id=\"5-상태전이\" style=\"position:relative;\"><a href=\"#5-%EC%83%81%ED%83%9C%EC%A0%84%EC%9D%B4\" aria-label=\"5 상태전이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 상태전이</h3>\n<ul>\n<li>시스템의 각 상태를 중심으로 케이스를 도출하고 전이 상태를 절차로 구성합니다.</li>\n<li>객체의 상태를 구분하고 이벤트에 의해 어느 한 상태에서 다른 상태로 전이되는 경우의 수를 테스트 케이스로 구성합니다.</li>\n<li>상태 머신을 사용하는 UI 컴포넌트 테스트 시 유용합니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/6/6_2\">테스트 코드도 이해하기 쉽게 작성하자</a></li>\n</ul>","frontmatter":{"title":"테스트 코드도 이해하기 쉽게 작성하자","date":"May 01, 2020"}}},"pageContext":{"slug":"/실용주의 프론트 엔드 개발/테스트-코드도-이해하기-쉽게-작성하자/","previous":{"fields":{"slug":"/javascript/javascript-웹-응용-프로그램-작성을위한-최고의-디자인-패턴/"},"frontmatter":{"title":"JavaScript 웹 응용 프로그램 작성을위한 최고의 디자인 패턴","category":"javascript","draft":false}},"next":{"fields":{"slug":"/실용주의 프론트 엔드 개발/객체지향과-함수형/"},"frontmatter":{"title":"객체지향과 함수형","category":"실용주의 프론트 엔드 개발","draft":false}}}}}