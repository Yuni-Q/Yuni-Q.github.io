{"componentChunkName":"component---src-templates-blog-post-js","path":"/코딩을 지탱하는 기술/에러처리/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"51988e2d-a370-5651-a1a6-a20ba8aefffc","excerpt":"…","html":"<ul>\n<li>사고 발생 시 큰 사고로 이어지지 않도록 예방하는 것이 필요하여 실패를 알리는 구조가 필요했습니다.</li>\n</ul>\n<h3 id=\"실패를-전달하는-방법\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%8C%A8%EB%A5%BC-%EC%A0%84%EB%8B%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"실패를 전달하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실패를 전달하는 방법</h3>\n<ol>\n<li>반환값으로 실패를 전달하면 호출처가 반환값을 체크해서 에러 처리를 하는 방법입니다.</li>\n<li>\n<p>실패를 놓칩니다.</p>\n<ul>\n<li>프로그래머가 반환값 확인을 잊어버렸을 때 실패를 놓치게 됩니다.</li>\n<li>연쇄적으로 문제가 발생할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>에러 처리 때문에 코드를 해석하기 어렵습니다.</p>\n<ul>\n<li>원래 하고 싶은 것을 기술한 코드 사이에 실패했을 경우의 코드가 채워져 흐름을 읽기 어렵습니다.</li>\n</ul>\n</li>\n<li>함수를 호출하기 전에 에러 처리 코드를 등록해두고, 실패 시 에러 처리 코드로 점프하는 방법입니다.</li>\n<li>\n<p>점프로 에러 처리를 한다.</p>\n<ul>\n<li>원래 하고 싶은 것을 기술한 코드와 실패했을 때의 처리가 분리됩니다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"예외-전파의-문제점\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8-%EC%A0%84%ED%8C%8C%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"예외 전파의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외 전파의 문제점</h3>\n<ul>\n<li>모든 함수의 소스 코드를 보지 않으면 함수가 어떤 예외를 던질 가능성이 있는 지 알 수 없습니다. 깜박하고 예외가 던져질 가능성이 놓치고 있다면 프로그램이 비정상 종료되어 버릴 수 있는 것입니다.</li>\n</ul>\n<h3 id=\"java의-검사-예외\" style=\"position:relative;\"><a href=\"#java%EC%9D%98-%EA%B2%80%EC%82%AC-%EC%98%88%EC%99%B8\" aria-label=\"java의 검사 예외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java의 검사 예외</h3>\n<ul>\n<li>\n<p>이 문제를 피하기 위해선 <code class=\"language-text\">어떤 예외를 던질지를 명시적으로 선언하는 것</code>이 필요하다고 주장했습니다. Java에서는 <code class=\"language-text\">throw에서 던질 수 있는 것</code>, 즉 다른 수많은 언어들이 예외라고 부르고 있는 것을 다음과 같이 더 세분화하고 있습니다.</p>\n<ul>\n<li>예외 처리를 하지 않아도 되는 중요한 문제</li>\n<li>예외 처리를 해도 좋은 실행 시 예외</li>\n<li>예외 처리를 해도 좋은 기타 예외</li>\n</ul>\n</li>\n<li>여기서 <code class=\"language-text\">기타 예외</code>는 검사 예외라고 불리며 메소드 정의 시 예외를 밖으로 던진다는 것을 선언해줄 필요가 있습니다. 그것을 위해 준비되어 있는 것이 throw 절입니다.</li>\n<li>검사 예외를 사용하면 <code class=\"language-text\">깜박하고 예외를 던질 가능성을 놓쳐버리는 일</code> 따위는 발생하지 않게 됩니다. 예외를 던질 가능성이 있는 메소드를 호출할 경우 <code class=\"language-text\">메소드가 던지는 예외를 그대로 호출처로 전달</code>할지 아니면 <code class=\"language-text\">메소드가 던지는 예외를 자신이 처리</code>할지 둘 중 하나를 선택해서 구현하게 됩니다. 어느 쪽도 동작하지 않는 경우는 놓친 것을 컴파일러가 지정해줍니다.</li>\n</ul>\n<h3 id=\"검사-예외가-잘-사용되지-않는-이유\" style=\"position:relative;\"><a href=\"#%EA%B2%80%EC%82%AC-%EC%98%88%EC%99%B8%EA%B0%80-%EC%9E%98-%EC%82%AC%EC%9A%A9%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"검사 예외가 잘 사용되지 않는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>검사 예외가 잘 사용되지 않는 이유</h3>\n<ul>\n<li>검사 예외는 매우 좋은 기능 처럼 보이지만 다른 언어에서 잘 채용되지 않고 있습니다. 그 이유는 throws나 try/catch에 기술하는 예외의 갯수가 너무 방대해 지거나, 어떤 메소드에서 던질 예외를 하나 추가하면 그 메소드를 호출하고 있는 모든 메소드를 수정해야만 합니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/11/undefined-5#race-condition\">코딩을 지탱하는 기술</a></li>\n</ul>","frontmatter":{"title":"에러처리","date":"July 01, 2020"}}},"pageContext":{"slug":"/코딩을 지탱하는 기술/에러처리/","previous":{"fields":{"slug":"/코딩을 지탱하는 기술/병행처리/"},"frontmatter":{"title":"병행처리","category":"코딩을 지탱하는 기술","draft":false}},"next":{"fields":{"slug":"/코딩을 지탱하는 기술/객체지향/"},"frontmatter":{"title":"객체지향","category":"코딩을 지탱하는 기술","draft":false}}}}}