{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean architecture/10장-isp-인터페이스-분리-원칙/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"f5f5c353-2148-5ded-b859-9c736f194759","excerpt":"ISP: 인터페이스 분리 원칙 (Interface Segregation Principle) ISP…","html":"<h2 id=\"isp-인터페이스-분리-원칙-interface-segregation-principle\" style=\"position:relative;\"><a href=\"#isp-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC-%EC%9B%90%EC%B9%99-interface-segregation-principle\" aria-label=\"isp 인터페이스 분리 원칙 interface segregation principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ISP: 인터페이스 분리 원칙 (Interface Segregation Principle)</h2>\n<ul>\n<li>ISP를 아키텍처가 아니라 언어와 관련된 문제라고 결론 내릴 여지가 있습니다. 정적 타입언어는 사용자가 타입선언문을 사용하도록 강제합니다. 선언문으로 인해 소스 코드 의존성이 발생하고, 이로 인해 재컴파일 또는 재배포가 강제되는 상황이 무조건 초래됩니다. 하지만 동적 타입 언어에서는 이러한 선언문이 존재하지 않습니다. 따라서 소스 코드 의존성이 아예 없으며, 결국 재컴파일과 재배포가 필요없습니다.</li>\n<li>한걸음 물러서서 ISP를 사용하는 근본적인 동기를 살펴보면, 잠재되어 있는 더 깊은 우려사항을 볼 수 있습니다. 일반적으로 필요 이상으로 많은 걸 포함하는 모듈에 의존하는 것은 해로운 일입니다. 소스코드의 의존성의 경우 이는 분명한 사실인데, 불필요한 재컴파일과 재배포를 강제하기 때문입니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/11/clean-architecture/10-isp\">10장 ISP 인터페이스 분리 원칙</a></li>\n</ul>","frontmatter":{"title":"10장 ISP 인터페이스 분리 원칙","date":"May 04, 2020"}}},"pageContext":{"slug":"/clean architecture/10장-isp-인터페이스-분리-원칙/","previous":{"fields":{"slug":"/clean architecture/5장-객체-지향-프로그래밍/"},"frontmatter":{"title":"5장 객체 지향 프로그래밍","category":"clean architecture","draft":false}},"next":{"fields":{"slug":"/clean architecture/13장-컴포넌트-응집도/"},"frontmatter":{"title":"13장 컴포넌트 응집도","category":"clean architecture","draft":false}}}}}