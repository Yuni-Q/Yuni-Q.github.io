{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean architecture/11장-dip-의존성-역전-원칙/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni-q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"70bb50ac-1942-5ef0-819a-8abfb3d990fd","excerpt":"DIP: 의존성 역전 원칙 (Dependency Inversion Principle) 의존성 역전 원칙에서 말하는 유연성이 극대화된 시스템이란 소스 코드 의존성이 추상에 의존하여 구체에는 의존하지 않는 시스템입니다. 이 아이디어를 규칙으로 보기는 확실히 비현실적입니다. 소프트웨어 시스템이라면 구체적인 많은 장치에 반드시 의존하기 때문입니다. DIP…","html":"<h2 id=\"dip-의존성-역전-원칙-dependency-inversion-principle\" style=\"position:relative;\"><a href=\"#dip-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%97%AD%EC%A0%84-%EC%9B%90%EC%B9%99-dependency-inversion-principle\" aria-label=\"dip 의존성 역전 원칙 dependency inversion principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DIP: 의존성 역전 원칙 (Dependency Inversion Principle)</h2>\n<ul>\n<li>의존성 역전 원칙에서 말하는 유연성이 극대화된 시스템이란 소스 코드 의존성이 추상에 의존하여 구체에는 의존하지 않는 시스템입니다.</li>\n<li>이 아이디어를 규칙으로 보기는 확실히 비현실적입니다. 소프트웨어 시스템이라면 구체적인 많은 장치에 반드시 의존하기 때문입니다. DIP를 논할 때 운영체제나 플랫폼 같이 안전성이 보장된 환경에 대해서는 무시하는 편입니다.</li>\n<li>의존하지 않도록 피하고자 하는 것은 바로 변동성이 큰 구체적인 요소입니다. 그리고 이 구체적인 요소는 개발하는 중이라 자주 변경될 수 밖에 없는 모듈들입니다.</li>\n<li>인터페이스는 구현체보다 변동성이 낮습니다. 그래서 실제로 뛰어난 소프트웨어 설계자와 아키텍트라면 인터페이스의 변동성을 낮추기 위해 애씁니다. 인터페이스를 변경하지 않고도 구현체에 기능을 추가할 수 있는 방법을 찾기 위해 노력합니다. 이는 소프트웨어 설계의 기본입니다.</li>\n<li>안정된 소프트웨어 아키텍처란 변동성이 큰 구현체에 의존하는 일은 지양하고, 안정된 추상 인터페이스를 선호하는 아키텍처라는 뜻입니다.</li>\n</ul>\n<h2 id=\"구체적인-코딩-실천법\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%94%A9-%EC%8B%A4%EC%B2%9C%EB%B2%95\" aria-label=\"구체적인 코딩 실천법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구체적인 코딩 실천법</h2>\n<ul>\n<li>\n<p>변동성이 큰 구체 클래스를 참조하지 않습니다.</p>\n<ul>\n<li>추상 인터페이스를 사용합니다.</li>\n</ul>\n</li>\n<li>\n<p>객체 생성 방식을 강하게 제약하며, 일반적으로 추상 팩토리를 사용하도록 강제합니다.</p>\n<ul>\n<li>구체적이며 변동성이 크다면 절대로 그 이름을 언급하지 않습니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/11/clean-architecture/11-dip\">11장 DIP 의존성 역전 원칙</a></li>\n</ul>","frontmatter":{"title":"11장 DIP 의존성 역전 원칙","date":"May 04, 2020"}}},"pageContext":{"slug":"/clean architecture/11장-dip-의존성-역전-원칙/","previous":{"fields":{"slug":"/clean architecture/7장-srp-단일-책임-원칙/"},"frontmatter":{"title":"7장 SRP 단일 책임 원칙","category":"clean architecture","draft":false}},"next":{"fields":{"slug":"/clean architecture/클린-아키텍처-일부-요약/"},"frontmatter":{"title":"클린 아키텍처 일부 요약","category":"clean architecture","draft":false}}}}}