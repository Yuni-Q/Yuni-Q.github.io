{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean architecture/클린-아키텍처-일부-요약/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni-q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"5049588e-275a-5901-8db7-686c94772864","excerpt":"…","html":"<h2 id=\"아키텍처란\" style=\"position:relative;\"><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%9E%80\" aria-label=\"아키텍처란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아키텍처란</h2>\n<ul>\n<li>아키텍처는 저수준의 세부사항과는 분리된 고수준의 무언가를 가리킬 때 사용합니다. 설계는 저수준의 구조 또는 결정사항들을 의미할 때가 많습니다. 하지만 실제로 이들을 구분 짖는 경계는 뚜렷하지 않습니다. 고수준에서 저수준으로 향하는 의사결정의 연속성만이 있을 뿐입니다. 저수준의 세부사항과 고수준의 구조는 모두 소프트웨어 전체 설계의 구성요소입니다.</li>\n<li>소프트웨어 아키텍처의 목표는 필요한 시스템을 만들고 유지 보수하는 데 투입되는 인력을 최소화하는 것입니다.</li>\n<li>설계 품질을 재는 척도는 비용이 낮고 시스템의 수명이 다할 때까지 낮게 유지할 수 있다면 좋을 설계입니다.</li>\n</ul>\n<h2 id=\"행위와-구조\" style=\"position:relative;\"><a href=\"#%ED%96%89%EC%9C%84%EC%99%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"행위와 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행위와 구조</h2>\n<ul>\n<li>행위는 기능 명세서나 요구사항을 구현하고, 버그를 수정하는 일입니다.</li>\n<li>구조는 기능에 대한 생각을 바꾸면 이러한 변경 사 항을 간단하고 쉽게 적용할 수 있게 하는 것입니다.</li>\n<li>행위와 구조 둘 중 하나만 집중하게 되면 짧은 생명주기의 소프트웨어를 생산하게 됩니다.</li>\n</ul>\n<h2 id=\"프로그래밍-패러다임\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84\" aria-label=\"프로그래밍 패러다임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍 패러다임</h2>\n<ul>\n<li>패러다임은 무엇을 해야 할지를 말하기보다는 무엇을 해서는 안 되는 지를 말해줍니다.</li>\n<li>\n<p>구조적 프로그래밍: 제어 흐름이 직접적인 전환에 대해 규칙을 부과합니다.</p>\n<ul>\n<li>1968년 에츠히르 비버 데이크스트라</li>\n<li>무분별한 goto는 해롭습니다.</li>\n<li>if/then/else, do/while/until로 대체</li>\n</ul>\n</li>\n<li>\n<p>객체지향 프로그래밍: 제어 흐름의 간접적인 전환에 대한 규칙을 부과합니다.</p>\n<ul>\n<li>1966년 요한달, 크리스덴 니가드. ALGOL 언어</li>\n<li>함수 호출 스택 프레임을 힙으로 옮기면, 함수호출이 반환된 이후에도 함수에서 선언된 지역변수가 오랫동안 유지될 수 있음을 발견했습니다. 이러한 함수가 클래스의 생성자가 되었고, 지역 변수는 인스턴스 변수, 그리고 중첩함수는 메서드가 되었습니다.</li>\n</ul>\n</li>\n<li>\n<p>함수형 프로그래밍: 할당문에 대해 규칙을 부과한다.</p>\n<ul>\n<li>1958년 존 매카시. LISP 언어</li>\n<li>LIST 언어의 근간이 되는 개념이 바로 람다 계산법입니다.</li>\n<li>람다 계산법의 기초가 되는 개념을 불변성으로 심볼의 값이 변경되지 않는다는 개념입니다.</li>\n<li>이는 함수형 언어에서는 할당문이 전혀 없다는 뜻이기도 합니다.(제공하지만 굉장히 까다롭습니다.)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"solid-원칙\" style=\"position:relative;\"><a href=\"#solid-%EC%9B%90%EC%B9%99\" aria-label=\"solid 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SOLID 원칙</h2>\n<ul>\n<li>많은 사람과 소프트웨어 설계 원칙에 관해 토론하는 과정에서 이들 원칙을 모으기 시작했습니다. 원칙들을 교체/변경/삭제/병합한 결과 최종본이 나왔습니다.</li>\n<li>\n<p>SRP: 단일 책임 원칙 (Single Responsibility Principle)</p>\n<ul>\n<li>소프트웨어 시스템이 가질 수 있는 최적의 구조는 시스템을 만드는 조직의 사회적 구조에 커다란 영향을 받습니다. 따라서 각 소프트웨어 모듈은 변경의 이유가 단 하나여야만 합니다.</li>\n</ul>\n</li>\n<li>\n<p>OCP: 개방-패쇄 원칙 (Open-Closed Principle)</p>\n<ul>\n<li>기존 코드를 수정하기보다는 반드시 새로운 코드를 추가하는 방식으로 시스템의 행위를 변경할 수 있도록 설계해야만 소프트웨어 시스템을 쉽게 변경할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>LSP: 리스코프 치환 원칙 (Liskov Substitution Principle)</p>\n<ul>\n<li>Liskov가 정의한 하위 타입에 관한 유명한 원칙입니다.</li>\n<li>상호 대체 가능한 구성요소를 이용해 소프트웨어 시스템을 만들수 있으려면, 이들 구성요소는 반드시 서로 치환 가능해야 한다는 계약을 반드시 지켜야 합니다.</li>\n</ul>\n</li>\n<li>\n<p>ISP: 인터페이스 분리 원칙 (Interface Segregation Principle)</p>\n<ul>\n<li>사용하지 않는 것에 의존하지 않아야 합니다.</li>\n</ul>\n</li>\n<li>\n<p>DIP: 의존성 역전 원칙 (Dependency Inversion Principle)</p>\n<ul>\n<li>고수준 정책을 구현하는 코드는 저수준 세부사항을 구현하는 코드에 절대로 의존해서는 안 됩니다. 대신 세부사항이 정책에 의존해야 합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"컴포넌트-응집도-원칙\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%9D%91%EC%A7%91%EB%8F%84-%EC%9B%90%EC%B9%99\" aria-label=\"컴포넌트 응집도 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 응집도 원칙</h2>\n<ul>\n<li>\n<p>REP: 재사용/릴리즈 등가 원칙 (Reuse/Release Equivalence Principle)</p>\n<ul>\n<li>재사용단위는 릴리즈 단위와 같습니다.</li>\n</ul>\n</li>\n<li>\n<p>CCP: 공통 패쇄 원칙 (Common Closure Principle)</p>\n<ul>\n<li>동일한 이유로 동일한 시점에 변경되는 클래스를 같은 컴포넌트로 묶습니라. 서로 다른 시점에 다른 이유로 변경되는 클래스는 다른 컴포넌트로 분리합니다.</li>\n</ul>\n</li>\n<li>\n<p>CRP: 공통 재사용 원칙 (Common Reuse Principle)</p>\n<ul>\n<li>컴포넌트 사용자들을 필요하지 않은 것에 의존하게 강요하지 않습니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"컴포넌트-결합-원칙\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B2%B0%ED%95%A9-%EC%9B%90%EC%B9%99\" aria-label=\"컴포넌트 결합 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 결합 원칙</h2>\n<ul>\n<li>\n<p>ADP: 의존성 비순환 원칙 (Acycle Dependencies Principle)</p>\n<ul>\n<li>컴포넌트 의존성 그래프에 순환이 있어서는 안 됩니다.</li>\n</ul>\n</li>\n<li>\n<p>SDP: 안정된 의존성 원칙 (Stable Dependencies Principle)</p>\n<ul>\n<li>안정성의 방향으로 의존합니다.</li>\n</ul>\n</li>\n<li>\n<p>SAP: 안정된 추상화 원칙 (Stable Abstractions Principle)</p>\n<ul>\n<li>컴포넌트는 안정된 정도만큼만 추상화되어야 합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/11/clean-architecture/1#undefined-1\">클린 아키텍처 일부 요약</a></li>\n</ul>","frontmatter":{"title":"클린 아키텍처 일부 요약","date":"May 04, 2020"}}},"pageContext":{"slug":"/clean architecture/클린-아키텍처-일부-요약/","previous":{"fields":{"slug":"/clean architecture/11장-dip-의존성-역전-원칙/"},"frontmatter":{"title":"11장 DIP 의존성 역전 원칙","category":"clean architecture","draft":false}},"next":{"fields":{"slug":"/clean architecture/6장-함수형-프로그래밍/"},"frontmatter":{"title":"6장 함수형 프로그래밍","category":"clean architecture","draft":false}}}}}