{"componentChunkName":"component---src-templates-blog-post-js","path":"/GoF 디자인 패턴/gof-디자인-패턴-정리/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"6935aaad-8a06-5f1f-af6a-c525b5b97efc","excerpt":"생성패턴 싱글턴 : 오직 한 개의 인스턴스 보장, 전역적인 접근 제공합니다. Angular Service 팩토리 메서드 : 객체 생성 인터페이스 정의, 서브클래스에서 클래스 생성을 결정합니다. 추상 팩토리 : 객체 생성과 표현을 분리합니다. 프로토타입 : 원형 복사해서 새로운 객체 생성합니다. 빌더 : 복잡한 객체 생성의 동일한 절차 제공합니다. 구조패턴 프록시 : 다른 객체에 대한 접근 제어합니다. ES6 Proxy…","html":"<h2 id=\"생성패턴\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%ED%8C%A8%ED%84%B4\" aria-label=\"생성패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성패턴</h2>\n<ul>\n<li>\n<p>싱글턴 : 오직 한 개의 인스턴스 보장, 전역적인 접근 제공합니다.</p>\n<ul>\n<li>Angular Service</li>\n</ul>\n</li>\n<li>팩토리 메서드 : 객체 생성 인터페이스 정의, 서브클래스에서 클래스 생성을 결정합니다.</li>\n<li>추상 팩토리 : 객체 생성과 표현을 분리합니다.</li>\n<li>프로토타입 : 원형 복사해서 새로운 객체 생성합니다.</li>\n<li>빌더 : 복잡한 객체 생성의 동일한 절차 제공합니다.</li>\n</ul>\n<h2 id=\"구조패턴\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%ED%8C%A8%ED%84%B4\" aria-label=\"구조패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조패턴</h2>\n<ul>\n<li>\n<p>프록시 : 다른 객체에 대한 접근 제어합니다.</p>\n<ul>\n<li>ES6 Proxy</li>\n</ul>\n</li>\n<li>퍼사드 : 인터페이스를 집합에 대한 획일화된 하나의 인터페이스 제공합니다.</li>\n<li>\n<p>데코레이터 : 객체 동적 새로운 책임 추가합니다.</p>\n<ul>\n<li>TypeScript Decorator</li>\n</ul>\n</li>\n<li>컴포지트 : 하나의 추상 클래스로 부분과 전체의 계층을 표현합니다.</li>\n<li>브릿지 : 구현에서 추상을 분리하여, 이들이 독립적으로 다양성을 가질 수 있도록 합니다.</li>\n<li>어뎁터 : 서로 일치하지 않는 인터페이스를 사용자가 기대하는 인터페이스 형태로 적응합니다.</li>\n<li>플라이웨이트 : 많은 수의 객체를 효율적으로 제공하기 위해 공유개념을 이용합니다.</li>\n</ul>\n<h2 id=\"행동패턴\" style=\"position:relative;\"><a href=\"#%ED%96%89%EB%8F%99%ED%8C%A8%ED%84%B4\" aria-label=\"행동패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행동패턴</h2>\n<ul>\n<li>\n<p>이터레이터 : 내부 표현부를 노출하지 않고 어떤 객체 집합에 속한 원소들을 순차적으로 접근할 수 있는 방법을 제공하는 패턴입니다.</p>\n<ul>\n<li>ES6 Iterator</li>\n</ul>\n</li>\n<li>\n<p>옵져버 : 객체 사이에 일 대 다의 의존 관계를 정의해 두어, 어떤 객체의 상태가 변할 때 그 객체의 의존성을 가진 다른 객체들이 그 변화를 통지받고 자동으로 갱신될 수 있게 만드는 패턴입니다.</p>\n<ul>\n<li>MutationObserver</li>\n<li>IntersectionObserver</li>\n</ul>\n</li>\n<li>상태 : 객체의 내부 상태에 따라 스스로 행동을 변경할 수 있게 끔 허가하는 패턴입니다.</li>\n<li>전략 : 동일 계열의 알고리즘군을 정의하고, 각각의 알고리즘을 캡슐화하여, 이 들을 상호교환이 가능하도록 만드는 패턴입니다.</li>\n<li>책임연쇄 : 하나의 요청에 대한 처리가 반드시 한 객체에거만 되지 않고, 여러 객체에서 그 처리 기회줍니다.</li>\n<li>커멘드 : 요청 자체 캡슐화, 요청 대기/로깅하여, 되돌릴 수 있는 연산을 지원합니다.</li>\n<li>탬플릿 메소드 : 알고리즘의 뼈대만을 정의하고 각 단계에서 수행할 구체적 처리는 서브클래스쪽으로 미루는 패턴입니다.</li>\n<li>방문자 : 객체 구조를 이루는 원소에 대해 수행할 연산을 표현하는 패턴으로, 연산을 적용할 원소의 클래스를 변경하지 않고도 새로운 연산을 정의할 수 있게 합니다.</li>\n<li>미디에이터 : 한 집합에 속해있는 객체들의 상호작용을 캡슐화하는 중앙객체를 정의하는 패턴입니다.</li>\n<li>메멘토 : 캡슐화를 위배하지 않는 채 어떤 객체의 내부상태를 잡아내고 신체화시켜, 이후에 해당 객체가 그 상태로 다시 되돌아올 수 있도록 하는 패턴입니다/</li>\n<li>인터프리터 : 주어진 언어에 대해, 그 언어의 문법을 위한 표현 수단을 정의하고, 이와 어울러 그 표현수단을 사용하여 해당 언어로 작성된 문장을 해석하는 해석기를 정의하는 패턴이다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/12-gof/gof\">GoF 디자인 패턴 정리</a></li>\n</ul>","frontmatter":{"title":"GoF 디자인 패턴 정리","date":"July 06, 2020"}}},"pageContext":{"slug":"/GoF 디자인 패턴/gof-디자인-패턴-정리/","previous":{"fields":{"slug":"/javascript/console-꾸미기/"},"frontmatter":{"title":"console 꾸미기","category":"javascript","draft":false}},"next":{"fields":{"slug":"/GoF 디자인 패턴/행동패턴/"},"frontmatter":{"title":"행동패턴","category":"gof 디자인 패턴","draft":false}}}}}