{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/javascript/doublylinkedlist/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"e193c11e-e216-5578-8b32-656ebf7bc8f2","excerpt":"자바스크립트로 doublyLinkedList 구현하기 참조 데이터 스트럭쳐란 무엇인가? codingeverybody/datastructurejava","html":"<ul>\n<li>자바스크립트로 doublyLinkedList 구현하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DoublyLinkedList</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 첫번째 노드를 가리키는 필드</span>\n\thead<span class=\"token punctuation\">;</span>\n\ttail<span class=\"token punctuation\">;</span>\n\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 노드의 내용을 쉽게 출력해서 확인해볼 수 있는 기능</span>\n\t<span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 노드를 생성합니다.</span>\n\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 새로운 노드의 다음 노드로 해드를 지정합니다.</span>\n\t\ttemp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 기존에 노드가 있었다면 현재 헤드의 이전 노드로 새로운 노드를 지정합니다.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 헤드로 새로운 노드를 지정합니다.</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 노드를 생성합니다.</span>\n\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 리스트의 노드가 없다면 첫번째 노드를 추가하는 메소드를 사용합니다.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 마지막 노드의 다음 노드로 생성한 노드를 지정합니다.</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\ttemp<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 마지막 노드를 갱신합니다.</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 엘리먼트의 개수를 1 증가 시킵니다.</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k<span class=\"token punctuation\">,</span> input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 만약 k가 0이라면 첫번째 노드에 추가하는 것이기 때문에 addFirst를 사용합니다.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 현재 리스트 상에서 첫번째 노드를 temp1으로 담습니다.</span>\n\t\t\t<span class=\"token keyword\">let</span> temp1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// k-1 번 반복문을 실행해서 k-1 노드를 찾습니다.</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\ttemp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// k 번째 노드를 temp2로 지정합니다.</span>\n\t\t\t<span class=\"token keyword\">const</span> temp2 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 새로운 노드를 생성합니다.</span>\n\t\t\t<span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 새로운 노드의 다음 노드로 temp2를 지정합니다.</span>\n\t\t\tnewNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// temp2의 이전 노드로 새로운 노드를 지정합니다.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> temp2<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// temp1의 다음 노드로 새로운 노드를 지정합니다.</span>\n\t\t\ttemp1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//새로운 노드의 이전 노드로 temp1을 지정합니다.</span>\n\t\t\tnewNode<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 새로운 노드의 다음 노드가 없다면 새로운 노드가 마지막 노드이기 때문에 tail로 지정합니다.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 노드가 없다면 []를 리턴합니다.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'[]'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 탐색을 시작합니다.</span>\n\t\t<span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'['</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 다음 노드가 없을 때까지 반복문을 실행합니다.</span>\n\t\t<span class=\"token comment\">// 마지막 노드는 다음 노드가 없기 때문에 아래의 구문은 마지막 노드는 제외됩니다.</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tstr <span class=\"token operator\">+=</span> temp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">','</span><span class=\"token punctuation\">;</span>\n\t\t\ttemp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 마지막 노드를 출력결과에 포함시킵니다.</span>\n\t\tstr <span class=\"token operator\">+=</span> temp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> str <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 첫번째 노드를 temp로 지정하고 head의 값을 두번째 노드로 변경합니다.</span>\n\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 데이터를 삭제하기 전에 리턴할 값을 임시 변수에 담습니다.</span>\n\t\t<span class=\"token keyword\">const</span> returnData <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> returnData<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 첫번째 노드를 temp로 지정합니다.</span>\n\t\t<span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// k-1번째 노드를 temp로 지정합니다.</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ttemp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// temp.next의 값으로 temp.next.next를 지정해야 합니다.</span>\n\t\t<span class=\"token comment\">// temp.next.next를 위해서는 temp.next가 존재해야 합니다.</span>\n\t\t<span class=\"token comment\">// 따라서 temp.next를 삭제 대상으로 기록해둡니다.</span>\n\t\t<span class=\"token keyword\">const</span> todoDeleted <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// temp.next.next의 값을 알았기 때문에 이제 temp.next가 temp.next.next를 가리키도록 합니다.</span>\n\t\ttemp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// temp.prev</span>\n\t\t<span class=\"token comment\">// 삭제된 데이터를 리턴하기 위해서 returnData에 데이터를 저장합니다.</span>\n\t\t<span class=\"token keyword\">const</span> returnData <span class=\"token operator\">=</span> todoDeleted<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>todoDeleted <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// cur.next를 삭제 합니다.</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> returnData<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// index-1번째 인덱스를 찾은 후에 그 next를 temp 값으로 지정합니다.</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ttemp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 탐색 대상이 되는 노드를 temp로 지정합니다.</span>\n\t\t<span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 탐색 대상이 몇번째 엘리먼트에 있는지를 의미하는 변수로 index를 사용합니다.</span>\n\t\t<span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 탐색 값과 탐색 대상의 값을 비교합니다.</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ttemp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t\tindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// temp의 값이 null이라는 것은 더 이상 탐색 대상이 없다는 것을 의미합니다.이 때 -1을 리턴합니다.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 탐색 대상을 찾았다면 대상의 인덱스 값을 리턴합니다.</span>\n\t\t<span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 반복자를 생성해서 리턴해줍니다.</span>\n\t<span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> lastReturned <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> nextIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function-variable function\">hasNext</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> nextIndex <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlastReturned <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t\t\t\tnext <span class=\"token operator\">=</span> next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\t\t\t\tnextIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tdone<span class=\"token operator\">:</span> nextIndex <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n\t\t\t\t\tvalue<span class=\"token operator\">:</span> lastReturned<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token function-variable function\">hasPrevious</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> nextIndex <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token function-variable function\">previous</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlastReturned <span class=\"token operator\">=</span> next <span class=\"token operator\">=</span> next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">:</span> next<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span>\n\t\t\t\tnextIndex<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tdone<span class=\"token operator\">:</span> nextIndex <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tvalue<span class=\"token operator\">:</span> lastReturned<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DoublyLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add(값)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nadd(인덱스, 값)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nremove(인덱스)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nget(인덱스)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nsize()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nindexOf()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nfor loop'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\niterator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasPrevious</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">previous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=OH7prOt3vQA\">데이터 스트럭쳐란 무엇인가?</a></li>\n<li><a href=\"https://github.com/codingeverybody/data_structure_java/blob/master/java/src/list/doublylinkedlist/implementation/DoublyLinkedList.java\">codingeverybody/data<em>structure</em>java</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/javascript/doublylinkedlist/#%EC%B0%B8%EC%A1%B0\">참조</a></li>\n</ul>","frontmatter":{"title":"doublyLinkedList","date":"January 24, 2020"}}},"pageContext":{"slug":"/javascript/doublylinkedlist/","previous":{"fields":{"slug":"/javascript/linkedlist/"},"frontmatter":{"title":"linkedList","category":"javascript","tags":null,"draft":false}},"next":{"fields":{"slug":"/frontend/web-frontend/"},"frontmatter":{"title":"WEB FRONTEND","category":"frontend","tags":null,"draft":false}},"tag":null}},"staticQueryHashes":["3128451518","96099027"]}