{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/순환-의존성/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni-q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"895275c4-1593-5140-8dd5-c8c5a26e2432","excerpt":"Circular dependency…","html":"<ul>\n<li>Circular dependency</li>\n<li>소프트웨어 엔지니어링 하는 순환 종속성은 직접 또는 간접적으로 제대로 작동 서로 의존 두개 또는 그 이상의 모듈들 간의 관계입니다. 이러한 모듈은 상호 재귀 라고도 합니다.</li>\n<li>무조건 터지느건 아니고 컨스트럭터 이전에 생성을 하기 위해 참조하던 것이 생성하고 있는 중인 것을 참조해서 터지는 경우가 발생했습니다.</li>\n<li>이를 끊어내는 레이어를 만들어야 합니다. 가장 영향력이 적을 것으로 판단되는 곳을 찾아내야 하는데 쉽지 않습니다.</li>\n<li>이런 순환 참조 문제를 확인하기 위해 <code class=\"language-text\">circular-dependency-plugin</code>의 도움을 받을 수도 있습니다.</li>\n</ul>","frontmatter":{"title":"순환 의존성","date":"February 21, 2020"}}},"pageContext":{"slug":"/javascript/순환-의존성/","previous":{"fields":{"slug":"/frontend/아이폰-홈인디케이터/"},"frontmatter":{"title":"아이폰 홈인디케이터","category":"frontend","draft":false}},"next":{"fields":{"slug":"/frontend/html-edit/"},"frontmatter":{"title":"html edit","category":"frontend","draft":false}}}}}