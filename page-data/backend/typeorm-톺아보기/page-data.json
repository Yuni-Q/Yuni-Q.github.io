{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/backend/typeorm-톺아보기/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"d3dd196c-3b02-5091-acb4-921dcb242d3f","excerpt":"Node와 RDB의 ORM 서비스는 sequelize, typeorm, prisma 등 많은 라이브러리들이 있습니다. 가장 먼저 사용한 ORM 서비스는 sequelize 였지만 typeorm이 typescript 지원이나 시장의 흐름에 따라 조금 더 많이 사용된다고 생각되어 공부하게 되었습니다. prisma도 고려해 보았으나 아직은 시기상조인 것 같았습니다. typeorm에 대해 알아보기 전에 ORM이 무엇인지 알아보겠습니다. ORM(Object-relational mapping…","html":"<ul>\n<li>Node와 RDB의 ORM 서비스는 sequelize, typeorm, prisma 등 많은 라이브러리들이 있습니다.</li>\n<li>\n<p>가장 먼저 사용한 ORM 서비스는 sequelize 였지만 typeorm이 typescript 지원이나 시장의 흐름에 따라 조금 더 많이 사용된다고 생각되어 공부하게 되었습니다.</p>\n<ul>\n<li>prisma도 고려해 보았으나 아직은 시기상조인 것 같았습니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"typeorm에-대해-알아보기-전에-orm이-무엇인지-알아보겠습니다\" style=\"position:relative;\"><a href=\"#typeorm%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-%EC%A0%84%EC%97%90-orm%EC%9D%B4-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"typeorm에 대해 알아보기 전에 orm이 무엇인지 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeorm에 대해 알아보기 전에 ORM이 무엇인지 알아보겠습니다.</h2>\n<ul>\n<li>\n<p>ORM(Object-relational mapping)은 객체지향 프로그래밍(Object-Oriented-Programming)과 관계형 데이터베이스(Relational-Database)사이의 호환되지 않는 <code class=\"language-text\">데이터를 변환하는 시스템</code>입니다.</p>\n<ul>\n<li>객체와 테이블 시스템(RDBMS)을 변형 및 연결해주는 작업입니다.</li>\n</ul>\n</li>\n<li>ORM을 이용한 개발은 객체와 데이터베이스의 변형에 유연하게 대처할 수 있습니다.</li>\n<li>\n<p>ORM을 객체 지향 프로그래밍 관점에서 생각해보면, 관계형 데이터베이스에 제약을 최대한 받지 않으면서, 객체를 클래스로 표현하는 것과 같이 관계형 데이터베이스를 객체처럼 쉽게 표현합니다.</p>\n<ul>\n<li>객체지향 프로그래밍은 Class를 사용하고 관계형 데이터베이스는 Table을 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"바로-본론으로-들어가서-typeorm을-프로젝트에서-어떻게-도입할지-알아보겠습니다\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%A1%9C-%EB%B3%B8%EB%A1%A0%EC%9C%BC%EB%A1%9C-%EB%93%A4%EC%96%B4%EA%B0%80%EC%84%9C-typeorm%EC%9D%84-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%84%EC%9E%85%ED%95%A0%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"바로 본론으로 들어가서 typeorm을 프로젝트에서 어떻게 도입할지 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바로 본론으로 들어가서 typeorm을 프로젝트에서 어떻게 도입할지 알아보겠습니다.</h2>\n<ul>\n<li>의존성 설치 및 init</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">npm install typeorm reflect-metadata @types/node mysql\ntypeorm init --name [프로젝트이름] --database [데이터베이스]</code></pre></div>\n<ul>\n<li>\n<p>global place 의 app.ts에 import 추가합니다.</p>\n<ul>\n<li>reflect-metadata 패키지를 사용하면 유형에 대한 런타임 반영을 수행 할 수 있습니다. TypeORM은 대부분 데코레이터 (@Entity 또는 @Column)와 함께 작동하므로이 패키지는 이러한 데코레이터를 구문 분석하고 SQL 쿼리를 작성하는 데 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"노드-모듈typeorm-model-generator-이용해-모델-자동-생성하는-방법도-있습니다\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%93%9C-%EB%AA%A8%EB%93%88typeorm-model-generator-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%AA%A8%EB%8D%B8-%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EB%8F%84-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"노드 모듈typeorm model generator 이용해 모델 자동 생성하는 방법도 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>노드 모듈(typeorm-model-generator) 이용해 모델 자동 생성하는 방법도 있습니다.</h3>\n<ul>\n<li>각 옵션을 수동으로 입력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">typeorm-model-generator</code></pre></div>\n<ul>\n<li>커맨드 한 번에 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">typeorm-model-generator -h localhost -u $userName -x $password -e mysql -o ./entities --ssl</code></pre></div>\n<h2 id=\"typeorm-작성-패턴에-대해-알아보겠습니다\" style=\"position:relative;\"><a href=\"#typeorm-%EC%9E%91%EC%84%B1-%ED%8C%A8%ED%84%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"typeorm 작성 패턴에 대해 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeorm 작성 패턴에 대해 알아보겠습니다.</h2>\n<ul>\n<li>Active Record 패턴과 Data Mapper 패턴이 있습니다.</li>\n</ul>\n<h2 id=\"active-record-패턴에-대해-먼저-알아보겠습니다\" style=\"position:relative;\"><a href=\"#active-record-%ED%8C%A8%ED%84%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EB%A8%BC%EC%A0%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"active record 패턴에 대해 먼저 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Active Record 패턴에 대해 먼저 알아보겠습니다.</h2>\n<ul>\n<li>Active Record 패턴은 <code class=\"language-text\">모델 그 자체에 쿼리 메소드를 정의</code>하고, <code class=\"language-text\">모델의 메소드를 사용</code>하여 객체를 저장, 제거, 불러오는 방식입니다.</li>\n<li>BaseEntity라는 클래스를 사용하여 새로운 클래스에 상속하게 한 후 사용할 수 있습니다. 이를 통해 BaseEntity가 갖고 있는 메소드와 static으로 만들어 내는 커스텀 메소드를 이용할 수 있습니다.</li>\n<li>규모가 작은 애플리케이션에서 적합하고 간단히 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BaseEntity<span class=\"token punctuation\">,</span> Entity<span class=\"token punctuation\">,</span> PrimaryGeneratedColumn<span class=\"token punctuation\">,</span> Column <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.firstName = :firstName'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> firstName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andWhere</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.lastName = :lastName'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> lastName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// example how to save AR entity</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Timber'</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token string\">'Saw'</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// example how to remove AR entity</span>\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// example how to load AR entities</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> skip<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> take<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newUsers <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> timber <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Timber'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Saw'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> timber <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Timber'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Saw'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"data-mapper-패턴에-대해서도-알아보겠습니다\" style=\"position:relative;\"><a href=\"#data-mapper-%ED%8C%A8%ED%84%B4%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C%EB%8F%84-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"data mapper 패턴에 대해서도 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Mapper 패턴에 대해서도 알아보겠습니다.</h2>\n<ul>\n<li>Data Mapper 패턴은 <code class=\"language-text\">분리된 클래스에 쿼리 메소드를 정의</code>하는 방식이며, <code class=\"language-text\">Repository를 이용</code>하여 객체를 저장, 제거, 불러옵니다.</li>\n<li>Active Record 패턴과의 차이점은 모델에 접근하는 방식이 아닌 <code class=\"language-text\">Repository에서 데이터에 접근</code>한다는 것입니다.</li>\n<li>규모가 큰 애플리케이션에 적합하고 유지보수하는데 효과적이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Entity<span class=\"token punctuation\">,</span> PrimaryGeneratedColumn<span class=\"token punctuation\">,</span> Column <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EntityRepository<span class=\"token punctuation\">,</span> Repository <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../entity/User'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">EntityRepository</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Repository<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.firstName = :firstName'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> firstName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andWhere</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.lastName = :lastName'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> lastName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> userRepository <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// example how to save DM entity</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Timber'</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token string\">'Saw'</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// example how to remove DM entity</span>\n<span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// example how to load DM entities</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> skip<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> take<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newUsers <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> timber <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Timber'</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Saw'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"entity들을-만들었다면-데이터베이스에-대한-연결-생성하는-법을-알아-보겠습니다\" style=\"position:relative;\"><a href=\"#entity%EB%93%A4%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EB%8B%A4%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%9C-%EC%97%B0%EA%B2%B0-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B2%95%EC%9D%84-%EC%95%8C%EC%95%84-%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"entity들을 만들었다면 데이터베이스에 대한 연결 생성하는 법을 알아 보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>entity들을 만들었다면 데이터베이스에 대한 연결 생성하는 법을 알아 보겠습니다.</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createConnection <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Photo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./entity/Photo'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'mysql'</span><span class=\"token punctuation\">,</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  port<span class=\"token operator\">:</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span>\n  database<span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n  entities<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    Photo<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// __dirname + '/entity/*.js'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  synchronize<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  logging<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// here you can start to work with your entities</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"entity를-만드는-방법에-대해-조금-더-상세히-알아보겠습니다\" style=\"position:relative;\"><a href=\"#entity%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%B4-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EC%83%81%EC%84%B8%ED%9E%88-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"entity를 만드는 방법에 대해 조금 더 상세히 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity를 만드는 방법에 대해 조금 더 상세히 알아보겠습니다.</h2>\n<h3 id=\"entity-데코레이터\" style=\"position:relative;\"><a href=\"#entity-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"entity 데코레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity 데코레이터</h3>\n<ul>\n<li>데이터베이스 테이블을 정의하기 전에 실행해야하는 데코레이터입니다.</li>\n<li>테이블명을 따로 지정하지 않아도 클래스명으로 매핑하지만, 옵션으로 테이블명을 지정할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>name: <code class=\"language-text\">테이블 이름</code>입니다. 지정하지 않으면 테이블 이름은 엔티티 <code class=\"language-text\">클래스명</code>으로 생성됩니다.</li>\n<li>database: 선택된 DB서버의 데이터베이스 이름입니다.</li>\n<li>\n<p>schema: 스키마 이름입니다.</p>\n<ul>\n<li>MySQL에서는 schema와 database가 따로 분리되어있지 않습니다. OracleDB에서는 schema를 따로 분리해서 database에 할당된 사용자로 사용합니다.</li>\n</ul>\n</li>\n<li>engine: 테이블 생성 중에 설정할 수 있는 DB엔진 이름입니다.</li>\n<li>synchronize: false로 설정할 시 스키마 싱크를 건너뜁니다.</li>\n<li>orderBy: QueryBuilder과 find를 실행할 때 엔티티의 기본순서를 지정합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span>\n  engine<span class=\"token operator\">:</span> <span class=\"token string\">'MyISAM'</span><span class=\"token punctuation\">,</span>\n  database<span class=\"token operator\">:</span> <span class=\"token string\">'example_dev'</span><span class=\"token punctuation\">,</span>\n  schema<span class=\"token operator\">:</span> <span class=\"token string\">'schema_with_best_tables'</span><span class=\"token punctuation\">,</span>\n  synchronize<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  orderBy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'ASC'</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'DESC'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"중복되는-entity를-상속를-사용하여-해결할-수-있습니다\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EB%B3%B5%EB%90%98%EB%8A%94-entity%EB%A5%BC-%EC%83%81%EC%86%8D%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%95%B4%EA%B2%B0%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"중복되는 entity를 상속를 사용하여 해결할 수 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중복되는 Entity를 상속를 사용하여 해결할 수 있습니다.</h3>\n<ul>\n<li>Concrete table inheritance와 Single table inheritance가 있습니다.</li>\n</ul>\n<h4 id=\"concrete-table-inheritance\" style=\"position:relative;\"><a href=\"#concrete-table-inheritance\" aria-label=\"concrete table inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concrete table inheritance</h4>\n<ul>\n<li>중복된 칼럼을 베이스가 되는 <code class=\"language-text\">추상 클래스</code>를 선언한 다음 확장할 수 있습니다.</li>\n<li>\n<p>참고로 active record 패턴을 사용할 예정이라면, <code class=\"language-text\">BaseEntity</code>라는 이름은 피하는게 좋습니다.</p>\n<ul>\n<li>typeorm에서 제공하는 클래스인 BaseEntity는 기본 쿼리 메서드 hasId, save, remove 등의 메서드를 담은 클래스입니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 추상 클래스</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Photo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  size<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Question</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  answersCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  viewCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"single-table-inheritance\" style=\"position:relative;\"><a href=\"#single-table-inheritance\" aria-label=\"single table inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single table inheritance</h4>\n<ul>\n<li>@TableInheritance(), @ChildEntity()를 사용하는 방법입니다.</li>\n<li>이 방법은 데이터베이스에 Content 테이블이 생성됩니다. <code class=\"language-text\">Content 위에 @Entity()를 선언</code>해줘야 아래와 같은 패턴을 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TableInheritance</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> column<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'varchar'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'type'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ChildEntity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Photo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  size<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ChildEntity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Question</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  answersCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ChildEntity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  viewCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"embedded-entities\" style=\"position:relative;\"><a href=\"#embedded-entities\" aria-label=\"embedded entities permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Embedded entities</h3>\n<ul>\n<li>이름이 비슷하고 타입이 같은 칼럼들을 묶는 패턴입니다.</li>\n<li>User.name은 User.nameFirst, User.nameLast로 분기합니다. Name은 데코레이터 @Entity()가 붙어있지 않기때문에 위의 패턴처럼 <code class=\"language-text\">실제 테이블이 생겨나지는 않습니다</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Name<span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> Name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"viewentity\" style=\"position:relative;\"><a href=\"#viewentity\" aria-label=\"viewentity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ViewEntity</h3>\n<h4 id=\"sql-view란-\" style=\"position:relative;\"><a href=\"#sql-view%EB%9E%80-\" aria-label=\"sql view란  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL view란 ?</h4>\n<ul>\n<li>view는 하나의 <code class=\"language-text\">가상 테이블</code>입니다.</li>\n<li>실제 데이터가 저장되는 것은 아니지만, view를 통해 데이터를 가상 테이블로 관리가 가능합니다.</li>\n<li>1개의 view로 여러 테이블의 데이터를 조회할 수 있습니다.</li>\n<li>복잡한 쿼리를 통해 얻을 수 있는 결과를 간단한 쿼리로 얻을 수 있게 도와줍니다.</li>\n<li>특정 기준에 따른 사용자 별로 다른 데이터를 액세스할 수 있도록 도와줄 수도 있습니다.</li>\n<li>조회 대상을 줄이고 싶을 때 사용할 수 있습니다.</li>\n</ul>\n<h4 id=\"viewentity-데코레이터-인자\" style=\"position:relative;\"><a href=\"#viewentity-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%9D%B8%EC%9E%90\" aria-label=\"viewentity 데코레이터 인자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ViewEntity 데코레이터 인자</h4>\n<ul>\n<li>\n<p>데코레이터에 들어가는 인자가 아래와 같이 @Entity()와는 약간 다릅니다.</p>\n<ul>\n<li>name: 테이블 이름입니다. 지정하지 않으면 테이블 이름은 엔티티 클래스명으로 생성됩니다.</li>\n<li>database: 선택된 DB서버의 데이터베이스 이름입니다.</li>\n<li>schema: 스키머 이름입니다.</li>\n<li>expression: view를 정의합니다. 꼭 있어야하는 파라미터로 SQL쿼리문이나 queryBuilder 체이닝 메서드가 들어갈 수 있습니다.</li>\n</ul>\n</li>\n<li>expression은 SQL 쿼리문이나 QueryBuilder에 체이닝할 수 있는 메서드가 들어갈 수 있습니다. 특이점으로는 필드명 위에 들어가는 데코레이터를 id까지 전부 @ViewColumn()을 사용해야 한다는 점이 있습니다. 만약 사용을 고려한다면, JOIN을 쳐서 테이블끼리 연결을 시키냐, 아니면 view를 통해 나중에 자주 사용할 가상 테이블을 미리 만들어두냐의 차이로 생각할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ViewEntity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  expression<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        SELECT \"post\".\"id\" AS \"id\", \"post\".\"name\" AS \"name\", \"category\".\"name\" AS \"categoryName\"\n        FROM \"post\" \"post\"\n        LEFT JOIN \"category\" \"category\" ON \"post\".\"categoryId\" = \"category\".\"id\"\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostCategory</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ViewColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ViewColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ViewColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  categoryName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>구조가 복잡하고, 여러군데서 호출하는 데이터의 경우 미리 ViewEntity로 view 테이블을 만들어두면 유용합니다.</li>\n</ul>\n<h3 id=\"column\" style=\"position:relative;\"><a href=\"#column\" aria-label=\"column permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Column</h3>\n<ul>\n<li>entity의 속성을 테이블 칼럼으로 표시합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> tpye<span class=\"token operator\">:</span> <span class=\"token string\">'varchar'</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nullable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>@Column()에 들어갈 수 있는 옵션들 중 중요하다고 판단한 것들은 아래와 같습니다.</p>\n<ul>\n<li>type(ColumnType) : <code class=\"language-text\">javascript의 원시타입</code>들을 세분화해서 사용할 수 있습니다. 타입을 정의하는 방법은 다음과 같습니다.</li>\n<li>length(string | number) : javascript의 원시타입들을 세분화해서 사용하기 위해 type 옵션과 같이 사용할 수 있습니다.</li>\n<li>onUpdate(string) : cascading을 하기 위한 옵션으로 ON UPDATE 트리거입니다.</li>\n<li>nullable(boolean) : 칼럼을 NULL이나 NOT NULL로 만드는 옵션입니다. 기본값은 false입니다.</li>\n<li>default(string) : 칼럼에 DEFAULT 값을 설정합니다.</li>\n<li>unique(boolean) : 유니크 칼럼이라고 표시할 수 있습니다. 유니크 constraint를 만듭니다. 기본값은 false 입니다.</li>\n<li>enum(string[] | AnyEnum) : 칼럼의 값으로 enum을 사용할 수 있습니다. enum은 db단에서 처리할 수도, orm단에서 처리할 수도 있습니다.</li>\n<li>enumName(string) : 다른 테이블에서 같은 enum을 사용하는 경우 필요합니다.</li>\n<li>transformer({ from(value: DatabaseType): EntityType, to(value: EntityType): DatabaseType }) : 아래와 같은 코드를 만들어내서 json을 문자열로 만들고 파싱하는 역할을 합니다. 또는 boolean을 integer로 바꿔주는 일도 할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ValueTransformer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeTransformer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ValueTransformer</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">to</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">from</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"idcolumn\" style=\"position:relative;\"><a href=\"#idcolumn\" aria-label=\"idcolumn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IdColumn</h3>\n<ul>\n<li>PrimaryColumn과 PrimaryGeneratedColum이 있습니다.</li>\n</ul>\n<h4 id=\"primarycolumn\" style=\"position:relative;\"><a href=\"#primarycolumn\" aria-label=\"primarycolumn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PrimaryColumn</h4>\n<ul>\n<li>@Column()의 옵션인 primary를 대체할 수 있습니다. <code class=\"language-text\">PK</code>를 만드는 역할을 합니다.</li>\n</ul>\n<h4 id=\"primarygeneratedcolumn\" style=\"position:relative;\"><a href=\"#primarygeneratedcolumn\" aria-label=\"primarygeneratedcolumn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PrimaryGeneratedColumn</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">자동생성</code>되는 ID값을 표현하는 방식을 아래와 같이 2가지 옵션을 사용할 수 있도록 도와줍니다.</p>\n<ul>\n<li>increment: AUTO_INCREMENT를 사용해서 1씩 증가하는 ID를 부여합니다. 기본 옵션입니다.</li>\n<li>uuid: 유니크한 uuid를 사용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// using increment</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// using uuid</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'uuid'</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"generated\" style=\"position:relative;\"><a href=\"#generated\" aria-label=\"generated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generated</h5>\n<ul>\n<li>PK로 쓰는 ID 외에 추가로 uuid를 기록하기 위해서 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Generated</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'uuid'</span><span class=\"token punctuation\">)</span>\n  uuid<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"datecolumn\" style=\"position:relative;\"><a href=\"#datecolumn\" aria-label=\"datecolumn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DateColumn</h3>\n<ul>\n<li>CreateDateColumn과 UpdateDateColumn, DeleteDateColumn이 있습니다.</li>\n</ul>\n<h4 id=\"createdatecolumn\" style=\"position:relative;\"><a href=\"#createdatecolumn\" aria-label=\"createdatecolumn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CreateDateColumn</h4>\n<ul>\n<li>해당 열이 추가된 시각을 자동으로 기록합니다.</li>\n<li>옵션을 적지 않을시 datetime 타입으로 기록됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">CreateDateColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  createdAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"updatedatecolumn\" style=\"position:relative;\"><a href=\"#updatedatecolumn\" aria-label=\"updatedatecolumn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UpdateDateColumn</h4>\n<ul>\n<li>해당 열이 수정된 시각을 자동으로 기록합니다.</li>\n<li>옵션을 적지 않을시 datetime 타입으로 기록됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">UpdateDateColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  updatedAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"deletedatecolumn\" style=\"position:relative;\"><a href=\"#deletedatecolumn\" aria-label=\"deletedatecolumn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DeleteDateColumn</h4>\n<ul>\n<li>해당 열이 삭제된 시각을 자동으로 기록합니다.</li>\n<li>옵션을 적지 않을시 datetime 타입으로 기록됩니다.</li>\n<li>deletedAt에 시각이 기록되지 않은 열들만 쿼리하기 위해 TypeORM의 soft delete 기능을 활용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">DeleteDateColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  deletedAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"soft-delete이란-\" style=\"position:relative;\"><a href=\"#soft-delete%EC%9D%B4%EB%9E%80-\" aria-label=\"soft delete이란  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>soft delete이란 ?</h5>\n<ul>\n<li>데이터 열을 실제로 삭제하지 않고, 삭제여부를 나타내는 칼럼인 deletedAt을 사용하는 방식입니다.</li>\n<li>일반적인 삭제 대신 삭제된 열을 갱신하는 UPDATE문을 사용하는 방식입니다.</li>\n<li>시각이 기록되지 않은 열들만 필터해서 쿼리하도록 도와주는 역할을 합니다.</li>\n<li>다른 테이블과 JOIN시 항상 삭제된 열을 검사해서 성능이 떨어집니다.</li>\n<li>복구하거나 예전 기록을 확인하고자 할 때 간편합니다.</li>\n</ul>\n<h3 id=\"relation-이제-하나의-테이블이-아닌-테이블간의-관계에-대해-알아보겠습니다\" style=\"position:relative;\"><a href=\"#relation-%EC%9D%B4%EC%A0%9C-%ED%95%98%EB%82%98%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B4-%EC%95%84%EB%8B%8C-%ED%85%8C%EC%9D%B4%EB%B8%94%EA%B0%84%EC%9D%98-%EA%B4%80%EA%B3%84%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"relation 이제 하나의 테이블이 아닌 테이블간의 관계에 대해 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relation. 이제 하나의 테이블이 아닌 테이블간의 관계에 대해 알아보겠습니다.</h3>\n<ul>\n<li>테이블간의 관계는 1:1, 1:N, M:N 관계가 있습니다.</li>\n</ul>\n<h4 id=\"onetoone\" style=\"position:relative;\"><a href=\"#onetoone\" aria-label=\"onetoone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OneToOne</h4>\n<ul>\n<li>@JoinColumn()을 사용한 필드는 FK(외래키)로 타겟 테이블에 등록됩니다. <code class=\"language-text\">@JoinColumn()은 반드시 한쪽 테이블에서만 사용해야 합니다</code>.</li>\n<li>\n<p>관계는 단방향과 양방향 모두 작성이 가능합니다.</p>\n<ul>\n<li>uni-directional은 @OneToOne()을 한쪽에만 써주는 것</li>\n<li>bi-directional은 양쪽에 모두 써주는 것</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Profile</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  gender<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  photo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">OneToOne</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> User<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">)</span>\n  user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">OneToOne</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Profile<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> profile<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">JoinColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  profile<span class=\"token operator\">:</span> Profile<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// using find* method</span>\n<span class=\"token keyword\">const</span> userRepo <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userRepo<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> relations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// using query builder</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> connection\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoinAndSelect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"manytooneonetomany\" style=\"position:relative;\"><a href=\"#manytooneonetomany\" aria-label=\"manytooneonetomany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ManyToOne/OneToMany</h4>\n<ul>\n<li>@OneToMany()/@ManyToOne()에서는 <code class=\"language-text\">@JoinColumn()을 생략</code>할 수 있습니다.</li>\n<li>\n<p><code class=\"language-text\">@OneToMany()는 @ManyToOne()이 없으면 안됩니다</code>.</p>\n<ul>\n<li>하지만 반대로 @ManyToOne()은 @OneToMany()이 없어도 정의할 수 있습니다.</li>\n</ul>\n</li>\n<li>@ManyToOne()을 설정한 테이블에는 <code class=\"language-text\">relation id가 외래키</code>를 가지고 있게 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">OneToMany</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Photo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>photo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> photo<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n  photos<span class=\"token operator\">:</span> Photo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Photo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToOne</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> User<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">)</span>\n  user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// using find* method</span>\n<span class=\"token keyword\">const</span> userRepository <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> relations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'photos'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or from inverse side</span>\n<span class=\"token keyword\">const</span> photoRepository <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>Photo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> photos <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> photoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> relations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// using query builder</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> connection\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoinAndSelect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.photos'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'photo'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or from inverse side</span>\n<span class=\"token keyword\">const</span> photos <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> connection\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>Photo<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'photo'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoinAndSelect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'photo.user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"manytomany\" style=\"position:relative;\"><a href=\"#manytomany\" aria-label=\"manytomany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ManyToMany</h4>\n<ul>\n<li>@ManyToMany() 관계에서는 <code class=\"language-text\">@JoinTable()이 반드시 필요합니다</code>. 한쪽 테이블에만 @JoinTable()을 넣어주면 됩니다.</li>\n<li>단, @ManyToMany()에서 옵션 cascade가 true인 경우 soft delete를 할 수 있습니다. 필요에 따라 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Category</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Question</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToMany</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Category<span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">JoinTable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  categories<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// using find* method</span>\n<span class=\"token keyword\">const</span> questionRepository <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>Question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> questions <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> questionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> relations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'categories'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// using query builder</span>\n<span class=\"token keyword\">const</span> questions <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> connection\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>Question<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'question'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoinAndSelect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'question.categories'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"tree-entity\" style=\"position:relative;\"><a href=\"#tree-entity\" aria-label=\"tree entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tree entity</h3>\n<ul>\n<li>TypeORM은 트리 구조를 저장하기 위해 인접 목록 및 클로저 테이블 패턴을 지원합니다.</li>\n</ul>\n<h4 id=\"먼저-셀프조인에-예시에-대해-알아보겠습니다\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-%EC%85%80%ED%94%84%EC%A1%B0%EC%9D%B8%EC%97%90-%EC%98%88%EC%8B%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"먼저 셀프조인에 예시에 대해 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저 셀프조인에 예시에 대해 알아보겠습니다.</h4>\n<ul>\n<li>1개의 테이블에서 부모-자식 관계를 나타낼 수 있는 패턴</li>\n<li>상품 카테고리(소,중,대분류)</li>\n<li>사원(사원,관리자,상위관리자)</li>\n<li>지역(읍/면/동,구/군,시/도)</li>\n</ul>\n<h4 id=\"typeorm은-셀프조인을-아래와-같은-4가지-패턴으로-지원합니다\" style=\"position:relative;\"><a href=\"#typeorm%EC%9D%80-%EC%85%80%ED%94%84%EC%A1%B0%EC%9D%B8%EC%9D%84-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%80-4%EA%B0%80%EC%A7%80-%ED%8C%A8%ED%84%B4%EC%9C%BC%EB%A1%9C-%EC%A7%80%EC%9B%90%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"typeorm은 셀프조인을 아래와 같은 4가지 패턴으로 지원합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeORM은 셀프조인을 아래와 같은 4가지 패턴으로 지원합니다.</h4>\n<h4 id=\"adjacency-list\" style=\"position:relative;\"><a href=\"#adjacency-list\" aria-label=\"adjacency list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adjacency list</h4>\n<ul>\n<li>자기참조를 @ManyToOne(), @OneToMany() 데코레이터로 표현할 수 있습니다.</li>\n<li>이 방식은 간단한 것이 가장 큰 장점이지만, JOIN하는데 제약이 있어 큰 트리를 로드하는데 문제가 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Category</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToOne</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Category<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> category<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n  parent<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">OneToMany</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Category<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> category<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span>\n  children<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"nested-set\" style=\"position:relative;\"><a href=\"#nested-set\" aria-label=\"nested set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested set</h4>\n<ul>\n<li>@Tree(), @TreeChildren(), @TreeParent()를 사용한 또 다른 패턴입니다.</li>\n<li>읽기 작업에는 효과적이지만 쓰기 작업에는 효과적이지 않습니다.</li>\n<li>여러 개의 루트를 가질 수 없다는 점도 문제입니다.</li>\n<li>@Tree()의 인자로 <code class=\"language-text\">nested-set</code>이 들어갑니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Tree</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'nested-set'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Category</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TreeChildren</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  children<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TreeParent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  parent<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"materialized-path\" style=\"position:relative;\"><a href=\"#materialized-path\" aria-label=\"materialized path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Materialized path</h4>\n<ul>\n<li>구체화된 경로 혹은 경로 열거라고 부릅니다.</li>\n<li>간단하고 효율적입니다.</li>\n<li>nested set과 사용방법은 같습니다.</li>\n<li>@Tree()의 인자로 <code class=\"language-text\">materialized-path</code>이 들어갑니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Entity<span class=\"token punctuation\">,</span>\n  Tree<span class=\"token punctuation\">,</span>\n  Column<span class=\"token punctuation\">,</span>\n  PrimaryGeneratedColumn<span class=\"token punctuation\">,</span>\n  TreeChildren<span class=\"token punctuation\">,</span>\n  TreeParent<span class=\"token punctuation\">,</span>\n  TreeLevelColumn<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Tree</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'materialized-path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Category</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TreeChildren</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  children<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TreeParent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  parent<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"closure-table\" style=\"position:relative;\"><a href=\"#closure-table\" aria-label=\"closure table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closure table</h3>\n<ul>\n<li>부모와 자식 사이의 관계를 분리된 테이블에 특별한 방법으로 저장합니다.</li>\n<li>읽기와 쓰기 모두 효율적으로 할 수 있습니다.</li>\n<li>nested set과 사용방법은 같습니다.</li>\n<li>@Tree()의 인자로 closure-table이 들어갑니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Entity<span class=\"token punctuation\">,</span>\n  Tree<span class=\"token punctuation\">,</span>\n  Column<span class=\"token punctuation\">,</span>\n  PrimaryGeneratedColumn<span class=\"token punctuation\">,</span>\n  TreeChildren<span class=\"token punctuation\">,</span>\n  TreeParent<span class=\"token punctuation\">,</span>\n  TreeLevelColumn<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Tree</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'closure-table'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Category</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TreeChildren</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  children<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TreeParent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  parent<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>선택적 매개 변수 옵션을 @Tree ( “closure-table”, options)로 설정하여 클로저 테이블 이름 또는 클로저 테이블 열 이름을 지정할 수 있습니다.</li>\n<li>ancestorColumnName 및 descandantColumnName은 기본 열의 메타 데이터를 수신하고 열의 이름을 반환하는 콜백 함수입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Tree</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"closure-table\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    closureTableName<span class=\"token operator\">:</span> <span class=\"token string\">\"category_closure\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">ancestorColumnName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"ancestor_\"</span> <span class=\"token operator\">+</span> column<span class=\"token punctuation\">.</span>propertyName<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">descendantColumnName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"descendant_\"</span> <span class=\"token operator\">+</span> column<span class=\"token punctuation\">.</span>propertyName<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"joincolumnjointable에-대해-조금-더-알아보겠습니다\" style=\"position:relative;\"><a href=\"#joincolumnjointable%EC%97%90-%EB%8C%80%ED%95%B4-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"joincolumnjointable에 대해 조금 더 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JoinColumn/JoinTable에 대해 조금 더 알아보겠습니다.</h3>\n<ul>\n<li>\n<p>아래는 아래 2개의 데코레이터에 공통으로 사용할 수 있는 옵션입니다.</p>\n<ul>\n<li>eager 옵션이 있어서 N+1 문제를 제어할 수 있음</li>\n<li>cascade, onDelete 옵션이 있어 관계가 연결된 객체를 추가/수정/삭제되도록 할 수 있습니다. 버그를 유발할 수 있으니 주의해서 사용해야 합니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"n1-문제란\" style=\"position:relative;\"><a href=\"#n1-%EB%AC%B8%EC%A0%9C%EB%9E%80\" aria-label=\"n1 문제란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>N+1 문제란?</h4>\n<ul>\n<li>하위 엔티티들을 첫 쿼리 실행시 한번에 가져오지 않고, Lazy Loading으로 필요한 곳에서 사용되어 쿼리가 실행될때 발생하는 문제가 N+1 쿼리 문제입니다.</li>\n</ul>\n<h4 id=\"joincolumn\" style=\"position:relative;\"><a href=\"#joincolumn\" aria-label=\"joincolumn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JoinColumn</h4>\n<ul>\n<li>@JoinColumn()을 사용하면 테이블에 자동으로 칼럼명과 참조 칼럼명을 합친 이름의 칼럼을 만들어냅니다.</li>\n<li>외래키를 가진 칼럼명과 참조칼럼명을 설정할 수 있는 옵션을 가지고 있습니다.</li>\n<li>설정하지 않으면 테이블명을 가지고 자동으로 매핑합니다.</li>\n<li>주의할 점으로는 @ManyToOne()에서는 꼭 적지 않아도 칼럼을 자동으로 만들어주지만, <code class=\"language-text\">@OneToOne()에서는 반드시 적어줘야 합니다</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToOne</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Category<span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">JoinColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'category_id'</span><span class=\"token punctuation\">,</span>\n    referencedColumnName<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  category<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Category</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"jointable\" style=\"position:relative;\"><a href=\"#jointable\" aria-label=\"jointable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JoinTable</h3>\n<ul>\n<li><code class=\"language-text\">M:N 관계</code>에서 사용하며 연결 테이블을 설정할 수 있습니다.</li>\n<li>@JoinTable()의 옵션을 사용해 연결 테이블의 칼럼명과 참조 칼럼명을 설정할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Question</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToMany</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Category<span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">JoinTable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'question_categories'</span><span class=\"token punctuation\">,</span>\n    joinColumn<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'question'</span><span class=\"token punctuation\">,</span>\n      referencedColumnName<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    inverseJoinColumn<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span>\n      referencedColumnName<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  categories<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Category</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"relationid\" style=\"position:relative;\"><a href=\"#relationid\" aria-label=\"relationid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RelationId</h3>\n<ul>\n<li>1:N/M:N 관계에서 entity에 명시적으로 관계가 있는 테이블의 칼럼 id를 적고싶은 경우, @RelationId()를 사용하면 됩니다.</li>\n<li>@RelationId()가 꼭 필요하지는 않지만 entity를 보면서 칼럼을 한 눈에 볼 수 있다는 장점이 있습니다.</li>\n<li>@RelationId()로 테이블을 조회하면 새로운 칼럼명도 결과에 같이 들고올 수 있습니다.</li>\n<li>\n<p>하지만 relationId 칼럼에 삽입하여 사용할 수 없습니다.</p>\n<ul>\n<li>inset or update 시 payload에 relationId가 아닌 relation으로 사용해야 합니다.</li>\n<li>관련 이슈 : <a href=\"https://github.com/typeorm/typeorm/issues/3867\">https://github.com/typeorm/typeorm/issues/3867</a></li>\n<li>@RelationId를 사용하는 대신 @Column으로 relationId를 장식 할 수 있습니다. JoinColumn의 이름이 숫자열 이름과 같을 때 TypeORM이 둘 다 일치하고 userId를 설정하거나 사용자를 설정하면 TypeORM이 처리합니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// using many to one</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToOne</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Category<span class=\"token punctuation\">)</span>\n  category<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">RelationId</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post<span class=\"token operator\">:</span> Post<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> post<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">)</span>\n  categoryId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// using many to many</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToMany</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Category<span class=\"token punctuation\">)</span>\n  categories<span class=\"token operator\">:</span> Category<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">RelationId</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post<span class=\"token operator\">:</span> Post<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> post<span class=\"token punctuation\">.</span>categories<span class=\"token punctuation\">)</span>\n  categoryIds<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"subscriber\" style=\"position:relative;\"><a href=\"#subscriber\" aria-label=\"subscriber permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscriber</h3>\n<ul>\n<li>데이터베이스에 특화된 리스너로 CRUD 이벤트 발생을 리슨합니다.</li>\n<li>\n<p>다음과 같은 데코레이터들을 가지고 있습니다.</p>\n<ul>\n<li>@AfterLoad, @AfterInsert, @BeforeInsert, @AfterUpdate, @BeforeUpdate, @AfterRemove, @BeforeRemove</li>\n</ul>\n</li>\n<li>logging 옵션이 있긴 하지만 쿼리만을 보여주기 때문에 한 줄씩 분석하기 위해 로그를 남기는 경우에는 지양하는 것이 좋습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Connection<span class=\"token punctuation\">,</span>\n  EntitySubscriberInterface<span class=\"token punctuation\">,</span>\n  EventSubscriber<span class=\"token punctuation\">,</span>\n  InsertEvent<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typeorm/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./User'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">EventSubscriber</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserSubscriber</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EntitySubscriberInterface<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> Connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    connection<span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">beforeInsert</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> InsertEvent<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User 테이블에 입력 전 : '</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">afterInsert</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> InsertEvent<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User 테이블에 입력 후 : '</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"index\" style=\"position:relative;\"><a href=\"#index\" aria-label=\"index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index</h3>\n<ul>\n<li>테이블 <code class=\"language-text\">쿼리 속도</code>를 올려주는 자료구조입니다.</li>\n<li>테이블 내 1개 혹은 그 이상의 칼럼을 이용해 생성할 수 있습니다.</li>\n<li>인덱스는 보통 키-필드만 갖고있고, 테이블의 다른 세부항목을 갖지 않기때문에 보통 테이블을 저장하는 공간보다 더 <code class=\"language-text\">적은 공간</code>을 차지합니다.</li>\n<li>\n<p>특정 칼럼 값을 가지고 있는 열이나 값을 <code class=\"language-text\">빠르게 찾기</code> 위해 사용합니다.</p>\n<ul>\n<li>인덱싱하지 않은 경우는 첫번째 열부터 전체 테이블을 걸쳐 연관된 열을 검색하기때문에 테이블이 클수록 쿼리비용이 커집니다.</li>\n<li>인덱싱을 한 경우는 모든 데이터를 조회하지 않고 데이터 파일의 중간에서 검색위치를 빠르게 잡을 수 있습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">WHERE</code>절과 일치하는 열을 빨리 찾기 위해서 사용합니다.</li>\n<li><code class=\"language-text\">JOIN</code>을 실행할 때 다른 테이블에서 열을 추출하기 위해서 사용합니다.</li>\n<li>데이터 양이 많고 변경보다 <code class=\"language-text\">검색이 빈번한 경우</code> 인덱싱을 하면 좋습니다.</li>\n</ul>\n<blockquote>\n<p>쉽게 말해 책에서 transaction이란 주제가 어딨는지 목차 없이 찾으려면 눈물날지도 모릅니다. 책의 주요내용을 가나다순으로 정리한 목록이 있으면 찾기 쉬울텐데 인덱스가 바로 그 역할을 합니다.\n특정 칼럼에 인덱스를 걸 수 있습니다. 옵션으로 고유키를 부여할 수도 있습니다. 단일 칼럼에 인덱스를 걸고 싶으면 칼럼마다 추가할 수도 있지만, 테이블 전체에 인덱스를 걸고싶은 경우 @Entity()아래 @Index()를 추가할 수도 있습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// using with single column</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Index</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Index</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// using with entity</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Index</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'firstName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lastName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"unique\" style=\"position:relative;\"><a href=\"#unique\" aria-label=\"unique permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unique</h3>\n<ul>\n<li>특정 칼럼에 고유키 제약조건을 생성할 수 있습니다.</li>\n<li>@Unique()는 테이블 자체에만 적용하는 것이 가능합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Unique</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'firstName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lastName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"check\" style=\"position:relative;\"><a href=\"#check\" aria-label=\"check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Check</h3>\n<ul>\n<li>테이블에서 데이터 추가 쿼리가 날아오면 값을 체크하는 역할을 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Check</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'\"age\" > 18'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"transaction\" style=\"position:relative;\"><a href=\"#transaction\" aria-label=\"transaction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transaction</h3>\n<ul>\n<li>\n<p>데이터베이스 내에서 하나의 <code class=\"language-text\">그룹으로 처리해야하는 명령문</code>을 모아서 처리하는 작업의 단위를 말합니다.</p>\n<ul>\n<li>여러 단계의 처리를 <code class=\"language-text\">하나의 처리처럼</code> 다루는 기능입니다.</li>\n<li>여러 개의 명령어의 집합이 정상적으로 처리되면 정상종료됩니다.</li>\n<li>하나의 명령어라도 <code class=\"language-text\">잘못되면 전체 취소</code>됩니다.</li>\n</ul>\n</li>\n<li>트랜잭션을 쓰는 이유는 <code class=\"language-text\">데이터의 일관성</code>을 유지하면서 <code class=\"language-text\">안정적으로 데이터를 복구</code>하기 위함입니다.</li>\n<li>격리성 수준 설정을 통해 트랜잭션이 열려있는 동안 외부에서 해당 데이터에 접근하지 못하도록 락을 걸 수 있습니다.</li>\n</ul>\n<h4 id=\"격리성-수준\" style=\"position:relative;\"><a href=\"#%EA%B2%A9%EB%A6%AC%EC%84%B1-%EC%88%98%EC%A4%80\" aria-label=\"격리성 수준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>격리성 수준</h4>\n<ul>\n<li>READ UNCOMMITTED</li>\n<li>READ COMMITTED</li>\n<li>REPEATABLE READ</li>\n<li>SERIALIZABLE</li>\n</ul>\n<h4 id=\"global-connection을-열어서-트랜젝션을-사용하는-경우는-아래와-같이-사용합니다\" style=\"position:relative;\"><a href=\"#global-connection%EC%9D%84-%EC%97%B4%EC%96%B4%EC%84%9C-%ED%8A%B8%EB%9E%9C%EC%A0%9D%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%8A%94-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"global connection을 열어서 트랜젝션을 사용하는 경우는 아래와 같이 사용합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>global connection을 열어서 트랜젝션을 사용하는 경우는 아래와 같이 사용합니다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">await</span> <span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'SERIALIZABLE'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>transactionalEntityManager<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"하지만-global-connection은-사이드이펙트가-많은-방법이기때문에-데코레이터나-queryrunner를-사용한-방법을-추천합니다\" style=\"position:relative;\"><a href=\"#%ED%95%98%EC%A7%80%EB%A7%8C-global-connection%EC%9D%80-%EC%82%AC%EC%9D%B4%EB%93%9C%EC%9D%B4%ED%8E%99%ED%8A%B8%EA%B0%80-%EB%A7%8E%EC%9D%80-%EB%B0%A9%EB%B2%95%EC%9D%B4%EA%B8%B0%EB%95%8C%EB%AC%B8%EC%97%90-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EB%82%98-queryrunner%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9D%84-%EC%B6%94%EC%B2%9C%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"하지만 global connection은 사이드이펙트가 많은 방법이기때문에 데코레이터나 queryrunner를 사용한 방법을 추천합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하지만 global connection은 사이드이펙트가 많은 방법이기때문에 데코레이터나 queryRunner를 사용한 방법을 추천합니다.</h4>\n<ul>\n<li>아래는 데코레이터 @Transaction(), @TransactionManager(), @TransactionRepository()를 사용한 패턴입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// using transaction manager</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Transaction</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isolation<span class=\"token operator\">:</span> <span class=\"token string\">'SERIALIZABLE'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TransactionManager</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> manager<span class=\"token operator\">:</span> EntityManager<span class=\"token punctuation\">,</span> user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> manager<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// using transaction repository</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Transaction</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isolation<span class=\"token operator\">:</span> <span class=\"token string\">'SERIALIZABLE'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TransactionRepository</span></span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span> userRepository<span class=\"token operator\">:</span> Repository<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"아래는-queryrunner를-사용한-방법입니다-다만-이-방법에서는-격리성-수준-설정이-불가능합니다\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%9E%98%EB%8A%94-queryrunner%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9E%85%EB%8B%88%EB%8B%A4-%EB%8B%A4%EB%A7%8C-%EC%9D%B4-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C%EB%8A%94-%EA%B2%A9%EB%A6%AC%EC%84%B1-%EC%88%98%EC%A4%80-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%B6%88%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"아래는 queryrunner를 사용한 방법입니다 다만 이 방법에서는 격리성 수준 설정이 불가능합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아래는 queryRunner를 사용한 방법입니다. 다만 이 방법에서는 격리성 수준 설정이 불가능합니다.</h4>\n<ul>\n<li>startTransaction은 트랜잭션을 시작하는 메서드</li>\n<li>commitTransaction는 모든 변경사항을 커밋하는 메서드</li>\n<li>rollbackTransaction는 모든 변경사항을 되돌리는 메서드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">await</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">startTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> queryRunner<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> queryRunner<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>photos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">commitTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">rollbackTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"eager-and-lazy-relations\" style=\"position:relative;\"><a href=\"#eager-and-lazy-relations\" aria-label=\"eager and lazy relations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eager and Lazy Relations</h3>\n<h4 id=\"eager\" style=\"position:relative;\"><a href=\"#eager\" aria-label=\"eager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>eager</h4>\n<ul>\n<li>\n<p>relationship을 설정하지 않아도 eager를 설정하면 자동으로 relationship을 불러옵니다.</p>\n<ul>\n<li>find* (즉, find, findAll, findOne…)에서 자동으로 relationship을 불러옵니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToMany</span></span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=></span> Category<span class=\"token punctuation\">,</span> category <span class=\"token operator\">=></span> category<span class=\"token punctuation\">.</span>questions<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  eager<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"lazy\" style=\"position:relative;\"><a href=\"#lazy\" aria-label=\"lazy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lazy</h4>\n<ul>\n<li>\n<p>Promise로 반환하면, 자동으로 lazy relationship이 됩니다.</p>\n<ul>\n<li>lazy를 불러올 때는 Promise.resolve를 하던가, await로 불러오면 됩니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ManyToMany</span></span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=></span> Question<span class=\"token punctuation\">,</span> question <span class=\"token operator\">=></span> question<span class=\"token punctuation\">.</span>categories<span class=\"token punctuation\">)</span>\nquestions<span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Question<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> question <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>Question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> categories <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> question<span class=\"token punctuation\">.</span>categories<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>참고 : 다른 언어 (자바, PHP 등)에서 왔고 모든 곳에서 게으른 관계를 사용하는 데 익숙하다면 조심하세요. 이러한 언어는 비동기식이 아니며 지연로드는 다른 방식으로 이루어집니다. 그렇기 때문에 거기에서 promise를 사용하지 않습니다. 자바 스크립트와 Node.JS에서 지연로드 된 관계를 원하면 promise를 사용해야합니다. 이것은 비표준 기술이며 TypeORM에서 실험적인 것으로 간주됩니다.</li>\n</ul>\n<hr>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://velog.io/@josworks27/typeORM-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">TypeORM 시작하기</a></li>\n<li><a href=\"https://yangeok.github.io/orm/2020/12/14/typeorm-decorators.html\">TypeORM 데코레이터 씹어먹기</a></li>\n<li><a href=\"https://gkqlgkql.tistory.com/85\">개발자 마르코</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#typeorm%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-%EC%A0%84%EC%97%90-orm%EC%9D%B4-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">typeorm에 대해 알아보기 전에 ORM이 무엇인지 알아보겠습니다.</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#%EB%B0%94%EB%A1%9C-%EB%B3%B8%EB%A1%A0%EC%9C%BC%EB%A1%9C-%EB%93%A4%EC%96%B4%EA%B0%80%EC%84%9C-typeorm%EC%9D%84-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%84%EC%9E%85%ED%95%A0%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">바로 본론으로 들어가서 typeorm을 프로젝트에서 어떻게 도입할지 알아보겠습니다.</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#%EB%85%B8%EB%93%9C-%EB%AA%A8%EB%93%88typeorm-model-generator-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%AA%A8%EB%8D%B8-%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EB%8F%84-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">노드 모듈(typeorm-model-generator) 이용해 모델 자동 생성하는 방법도 있습니다.</a></li>\n</ul>\n</li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#typeorm-%EC%9E%91%EC%84%B1-%ED%8C%A8%ED%84%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">typeorm 작성 패턴에 대해 알아보겠습니다.</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#active-record-%ED%8C%A8%ED%84%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EB%A8%BC%EC%A0%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">Active Record 패턴에 대해 먼저 알아보겠습니다.</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#data-mapper-%ED%8C%A8%ED%84%B4%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C%EB%8F%84-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">Data Mapper 패턴에 대해서도 알아보겠습니다.</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#entity%EB%93%A4%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EB%8B%A4%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%9C-%EC%97%B0%EA%B2%B0-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B2%95%EC%9D%84-%EC%95%8C%EC%95%84-%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">entity들을 만들었다면 데이터베이스에 대한 연결 생성하는 법을 알아 보겠습니다.</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#entity%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%B4-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EC%83%81%EC%84%B8%ED%9E%88-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">Entity를 만드는 방법에 대해 조금 더 상세히 알아보겠습니다.</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#entity-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\">Entity 데코레이터</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#%EC%A4%91%EB%B3%B5%EB%90%98%EB%8A%94-entity%EB%A5%BC-%EC%83%81%EC%86%8D%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%95%B4%EA%B2%B0%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">중복되는 Entity를 상속를 사용하여 해결할 수 있습니다.</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#concrete-table-inheritance\">Concrete table inheritance</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#single-table-inheritance\">Single table inheritance</a></li>\n</ul>\n</li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#embedded-entities\">Embedded entities</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#viewentity\">ViewEntity</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#sql-view%EB%9E%80-\">SQL view란 ?</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#viewentity-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%9D%B8%EC%9E%90\">ViewEntity 데코레이터 인자</a></li>\n</ul>\n</li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#column\">Column</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#idcolumn\">IdColumn</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#primarycolumn\">PrimaryColumn</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#primarygeneratedcolumn\">PrimaryGeneratedColumn</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#generated\">Generated</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#datecolumn\">DateColumn</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#createdatecolumn\">CreateDateColumn</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#updatedatecolumn\">UpdateDateColumn</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#deletedatecolumn\">DeleteDateColumn</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#soft-delete%EC%9D%B4%EB%9E%80-\">soft delete이란 ?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#relation-%EC%9D%B4%EC%A0%9C-%ED%95%98%EB%82%98%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B4-%EC%95%84%EB%8B%8C-%ED%85%8C%EC%9D%B4%EB%B8%94%EA%B0%84%EC%9D%98-%EA%B4%80%EA%B3%84%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">Relation. 이제 하나의 테이블이 아닌 테이블간의 관계에 대해 알아보겠습니다.</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#onetoone\">OneToOne</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#manytooneonetomany\">ManyToOne/OneToMany</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#manytomany\">ManyToMany</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#tree-entity\">Tree entity</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#%EB%A8%BC%EC%A0%80-%EC%85%80%ED%94%84%EC%A1%B0%EC%9D%B8%EC%97%90-%EC%98%88%EC%8B%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">먼저 셀프조인에 예시에 대해 알아보겠습니다.</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#typeorm%EC%9D%80-%EC%85%80%ED%94%84%EC%A1%B0%EC%9D%B8%EC%9D%84-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%80-4%EA%B0%80%EC%A7%80-%ED%8C%A8%ED%84%B4%EC%9C%BC%EB%A1%9C-%EC%A7%80%EC%9B%90%ED%95%A9%EB%8B%88%EB%8B%A4\">TypeORM은 셀프조인을 아래와 같은 4가지 패턴으로 지원합니다.</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#adjacency-list\">Adjacency list</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#nested-set\">Nested set</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#materialized-path\">Materialized path</a></li>\n</ul>\n</li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#closure-table\">Closure table</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#joincolumnjointable%EC%97%90-%EB%8C%80%ED%95%B4-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">JoinColumn/JoinTable에 대해 조금 더 알아보겠습니다.</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#n1-%EB%AC%B8%EC%A0%9C%EB%9E%80\">N+1 문제란?</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#joincolumn\">JoinColumn</a></li>\n</ul>\n</li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#jointable\">JoinTable</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#relationid\">RelationId</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#subscriber\">Subscriber</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#index\">Index</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#unique\">Unique</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#check\">Check</a></li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#transaction\">Transaction</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#%EA%B2%A9%EB%A6%AC%EC%84%B1-%EC%88%98%EC%A4%80\">격리성 수준</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#global-connection%EC%9D%84-%EC%97%B4%EC%96%B4%EC%84%9C-%ED%8A%B8%EB%9E%9C%EC%A0%9D%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%8A%94-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\">global connection을 열어서 트랜젝션을 사용하는 경우는 아래와 같이 사용합니다.</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#%ED%95%98%EC%A7%80%EB%A7%8C-global-connection%EC%9D%80-%EC%82%AC%EC%9D%B4%EB%93%9C%EC%9D%B4%ED%8E%99%ED%8A%B8%EA%B0%80-%EB%A7%8E%EC%9D%80-%EB%B0%A9%EB%B2%95%EC%9D%B4%EA%B8%B0%EB%95%8C%EB%AC%B8%EC%97%90-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EB%82%98-queryrunner%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9D%84-%EC%B6%94%EC%B2%9C%ED%95%A9%EB%8B%88%EB%8B%A4\">하지만 global connection은 사이드이펙트가 많은 방법이기때문에 데코레이터나 queryRunner를 사용한 방법을 추천합니다.</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#%EC%95%84%EB%9E%98%EB%8A%94-queryrunner%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9E%85%EB%8B%88%EB%8B%A4-%EB%8B%A4%EB%A7%8C-%EC%9D%B4-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C%EB%8A%94-%EA%B2%A9%EB%A6%AC%EC%84%B1-%EC%88%98%EC%A4%80-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%B6%88%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4\">아래는 queryRunner를 사용한 방법입니다. 다만 이 방법에서는 격리성 수준 설정이 불가능합니다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#eager-and-lazy-relations\">Eager and Lazy Relations</a></p>\n<ul>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#eager\">eager</a></li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#lazy\">lazy</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/backend/typeorm-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","frontmatter":{"title":"typeorm 톺아보기","date":"March 09, 2021"}}},"pageContext":{"slug":"/backend/typeorm-톺아보기/","previous":{"fields":{"slug":"/design pattern/builder-pattern/"},"frontmatter":{"title":"builder pattern","category":"design pattern","tags":["design pattern"],"draft":false}},"next":{"fields":{"slug":"/design pattern/visitor-pattern/"},"frontmatter":{"title":"visitor pattern","category":"design pattern","tags":[],"draft":false}},"tag":["node","sql","db","rdb","typeorm","orm"]}},"staticQueryHashes":["3128451518","96099027"]}