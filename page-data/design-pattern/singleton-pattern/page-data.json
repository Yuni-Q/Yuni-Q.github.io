{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/design-pattern/singleton-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"7f39900e-1c34-591a-a3e5-9cb0a20a0dac","excerpt":"생성 패턴 디자인 패턴 분류인 생성, 구조, 행위 중 객체 생성에 관련 된 으로 간주됩니다. 생성 패턴은 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공합니다. 단 의 인스턴스를 생성해 사용하는 디자인 패턴( 객체를 생성하는 방법) 애플리케이션이 시작될 때 어떤 클래스가  메모리를 할당하고(static…","html":"<h2 id=\"생성-패턴\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1-%ED%8C%A8%ED%84%B4\" aria-label=\"생성 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성 패턴</h2>\n<ul>\n<li>디자인 패턴 분류인 생성, 구조, 행위 중 객체 생성에 관련 된 <code class=\"language-text\">생성 패턴</code>으로 간주됩니다.</li>\n<li>생성 패턴은 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공합니다.</li>\n</ul>\n<h2 id=\"단-code-classlanguage-text하나code의-인스턴스를-생성해-사용하는-디자인-패턴code-classlanguage-text유일한code-객체를-생성하는-방법\" style=\"position:relative;\"><a href=\"#%EB%8B%A8-code-classlanguage-text%ED%95%98%EB%82%98code%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4code-classlanguage-text%EC%9C%A0%EC%9D%BC%ED%95%9Ccode-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"단 code classlanguage text하나code의 인스턴스를 생성해 사용하는 디자인 패턴code classlanguage text유일한code 객체를 생성하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단 <code class=\"language-text\">하나</code>의 인스턴스를 생성해 사용하는 디자인 패턴(<code class=\"language-text\">유일한</code> 객체를 생성하는 방법)</h2>\n<ul>\n<li>애플리케이션이 시작될 때 어떤 클래스가 <code class=\"language-text\">최초 한번만</code> 메모리를 할당하고(static) 그 메모리에 인스턴스를 만들어 사용하는 디자인패턴입니다.\n<ul>\n<li>전역 변수를 사용하지 않고 <code class=\"language-text\">객체를 하나만 생성</code> 하도록 하며, 생성된 객체를 <code class=\"language-text\">어디에서든지 참조</code>할 수 있습니다.</li>\n<li>생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 <code class=\"language-text\">하나</code>고 최초 생성 이후에 호출된 생성자는 <code class=\"language-text\">최초에 생성한 객체를 반환</code>합니다.</li>\n</ul>\n</li>\n<li>유일한 인스턴스가 서브클래싱으로 확장되어야 하며, 사용자는 코드의 수정없이 확장된 서브클래스의 인스턴스를 사용할 수 있어야 할 때 사용합니다.</li>\n<li>클래스에서 자신의 단 하나뿐인 인스턴스를 관리하도록 만들면 만듭니다. 그리고 다른 어떤 클래스에서도 자신의 인스턴스를 추가로 만들지 못하도록 해야 합니다. 인스턴스가 필요하면 반드시 클래스 자신을 거치도록 해야 합니다.</li>\n</ul>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>고정된 메모리 영역을 얻으면서 한번의 new로 인스턴스를 사용하기 때문에 <code class=\"language-text\">메모리 낭비를 방지</code> 할 수 있습니다.\n<ul>\n<li>두 번째 이용시부터는 객체 로딩 시간이 현저하게 줄어 성능이 좋아지는 장점이 있습니다.</li>\n</ul>\n</li>\n<li>싱글톤으로 만들어진 클래스의 인스턴스는 전역 인스턴스이기 때문에 다른 클래스의 인스턴스들이 <code class=\"language-text\">데이터를 공유</code>하기 쉽습니다.</li>\n<li>인스턴스가 절대적으로 한개만 존재하는 것을 보증하기에 개발 시 실수를 줄일 수 있습니다.</li>\n<li>싱글톤 객체를 사용하지 않는 경우 인스턴스를 생성하지 않을 수 있습니다.</li>\n<li>싱글톤을 상속시킬 수 있습니다.</li>\n</ul>\n<h3 id=\"전역-변수의-단점\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"전역 변수의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 변수의 단점</h3>\n<ul>\n<li>전역 변수에 객체를 대입하면 애플리케이션이 시작될 때 객체가 생성될 것입니다. 그런데 그 객체가 자원을 많이 차지하고 애플리케이션이 끝날 때까지 그 객체를 한 번도 쓰지 않는다면 괜히 자원만 잡아먹는, 아무 데도 쓸 데 없는 객체가 되고 맙니다. 싱글턴 패턴을 쓰면 필요할 때만 객체를 만들 수가 있습니다.\n<ul>\n<li>사실 플랫폼에 따라 달라질 수 있습니다. 어떤 JVM에서는 나중에 필요할 때 생성하기도 합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li>싱글톤의 역할이 커질수록 결합도가 높아져 객체 지향 설계 원칙에 어긋날 수 있다.\n<ul>\n<li>싱글톤 객체가 변경되면 이를 참조하고 있는 모든 값들이 변경됩니다.</li>\n<li>수정이 어려워지고 테스트하기 어려워집니다. 싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유시킬 경우 다른 클래스의 인스턴스들 간에 결합도가 높아져 <code class=\"language-text\">개방-폐쇄 원칙</code> 을 위배하게 됩니다.</li>\n</ul>\n</li>\n<li>멀티쓰레드환경에서 동기화 처리를 하지 않으면 인스턴스가 두개가 생성되는 문제가 발생할 수 있습니다.\n<ul>\n<li>경합 조건 문제가 발생 할 수 있습니다. <code class=\"language-text\">경합 조건</code>이란 메모리와 같은 동일한 자원을 2개 이상의 스레드가 이용하려고 경합하는 현상입니다.</li>\n<li>다중 스레드 애플리케이션에서 발생하는 문제를 해결하는 방법은 정적 변수에 인스턴스를 만들어 바로 초기화하는 방법 (Eager Initialization)과 인스턴스를 만드는 메서드에 동기화하는 방법 (Thread-Safe Initialization)이 있습니다.</li>\n</ul>\n</li>\n<li>전역변수보다 사용하기가 불편합니다.</li>\n<li>객체의 파괴 시점을 컨트롤하기 어려울 수 있습니다.</li>\n</ul>\n<h2 id=\"활용처\" style=\"position:relative;\"><a href=\"#%ED%99%9C%EC%9A%A9%EC%B2%98\" aria-label=\"활용처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>활용처</h2>\n<ul>\n<li>인스턴스가 오직 1개만 생성되야 하는 경우 사용합니다.</li>\n<li>DBCP(DataBase Connection Pool)처럼 공통된 객체를 여러개 생성해서 사용해야하는 상황에서 많이 사용합니다.\n<ul>\n<li>쓰레드풀, 캐시, 대화상자, 사용자 설정, 레지스트리 설정, 로그 기록 객체 등</li>\n</ul>\n</li>\n<li>안드로이드 앱 같은 경우 각 액티비티나 클래스별로 주요 클래스들을 일일이 전달하기가 번거롭기 때문에 싱글톤 클래스를 만들어 어디서나 접근하도록 설계하는 것이 편합니다.</li>\n<li>인스턴스가 절대적으로 한개만 존재하는 것을 보증하고 싶을 경우 사용합니다.</li>\n<li>레지스트리 같은 설정 파일의 경우 객체가 여러개 생성되면 설정 값이 변경될 위험이 생길 수 있기 때문에 사용하면 좋습니다.</li>\n</ul>\n<h2 id=\"주의할-점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의할 점</h2>\n<ul>\n<li>책임의 불균형이 심화되고 있는 상태에서 객체의 생성 책임을 지우는 것은 설계를 하부의 특정한 메커니즘에 종속적으로 만들 확률이 높습니다. 불필요한 SINGLETON 패턴을 객체 생성에 관해 너무 이른 시기에 고민하고 결정할 때 도입되는 경향이 있습니다. 핵심은<code class=\"language-text\">객체를 생성하는 방법에 대한 결정은 모든 책임이 자리를 잡은 후 가장 마지막 시점에 내리는 것이 적절하다는 것</code>입니다.</li>\n</ul>\n<h2 id=\"정적-메서드로만-이루어진-정적-클래스를-사용하면-싱글턴과-동일한-효과를-얻을-수-있습니다\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C%EB%A7%8C-%EC%9D%B4%EB%A3%A8%EC%96%B4%EC%A7%84-%EC%A0%95%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%8B%B1%EA%B8%80%ED%84%B4%EA%B3%BC-%EB%8F%99%EC%9D%BC%ED%95%9C-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%96%BB%EC%9D%84-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"정적 메서드로만 이루어진 정적 클래스를 사용하면 싱글턴과 동일한 효과를 얻을 수 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 메서드로만 이루어진 정적 클래스를 사용하면 싱글턴과 동일한 효과를 얻을 수 있습니다.</h2>\n<ul>\n<li>정적 클래스를 이용하면 객체를 전혀 생성하지 않고 메서드를 사용합니다.</li>\n<li>정적 메서드를 사용하므로 일반적으로 실행할 때 바인딩되는(컴파일 타임에 바인딩되는) 인스턴스 메서드를 사용하는 것보다 성능 면에서 우수합니다.</li>\n</ul>\n<h3 id=\"정적-클래스를-사용할-수-없는-경우\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"정적 클래스를 사용할 수 없는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 클래스를 사용할 수 없는 경우</h3>\n<ul>\n<li>인터페이스를 구현해야 하는 경우, 정적 메서드는 인터페이스에서 사용할 수 없습니다.</li>\n<li>인터페이스를 사용하는 주된 이유는 대체 구현이 필요한 경우입니다.\n<ul>\n<li>Mock 객체를 사용해 단위 테스트를 수행하는 경우입니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h2>\n<ul>\n<li>싱글턴 패턴의 공통적인 특징은 <code class=\"language-text\">private constructor</code>를 가진다는 것과, <code class=\"language-text\">static method</code>를 사용한다는 점입니다.\n<ul>\n<li>private 생성자</li>\n<li>static 변수로 객체 생성</li>\n<li>객체의 getter 구현</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Printer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 외부에 제공할 자기 자신의 인스턴스</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> printer<span class=\"token operator\">:</span> Printer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Printer constructor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 자기 자신의 인스턴스를 외부에 제공</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Printer <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Printer 인스턴스 생성</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> printer <span class=\"token operator\">=</span> Printer<span class=\"token punctuation\">.</span><span class=\"token function\">getPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    printer<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' print using '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">USER_NUM</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">USER_NUM</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// User 인스턴스 생성</span>\n  user<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  user<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"eager-initialization이른-초기화-thread-safe\" style=\"position:relative;\"><a href=\"#eager-initialization%EC%9D%B4%EB%A5%B8-%EC%B4%88%EA%B8%B0%ED%99%94-thread-safe\" aria-label=\"eager initialization이른 초기화 thread safe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eager Initialization(이른 초기화, Thread-safe)</h3>\n<ul>\n<li>이른 초기화 방식은 클래스 로더에 의해 클래스가 최초로 로딩 될 때 객체가 생성되기때문에 Thread-safe 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Printer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// static 변수에 외부에 제공할 자기 자신의 인스턴스를 만들어 초기화</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> printer<span class=\"token operator\">:</span> Printer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'constructor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 자기 자신의 인스턴스를 외부에 제공</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Printer <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"언어별-구현\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%96%B4%EB%B3%84-%EA%B5%AC%ED%98%84\" aria-label=\"언어별 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언어별 구현</h2>\n<ul>\n<li>파이썬의 모듈은 그 자체로 싱글턴입니다.</li>\n<li>자바는 생성자를 private으로 선언하여 상속이 불가능함을 지정하기도 합니다.</li>\n</ul>\n<h2 id=\"다른-패턴과의-관계\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%ED%8C%A8%ED%84%B4%EA%B3%BC%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"다른 패턴과의 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 패턴과의 관계</h2>\n<ul>\n<li>Factory pattern : Factory class를 Singleton으로 구현해도 되고, 서브클래스를 리턴하는 static 메소드로 구현해도 됩니다.</li>\n<li>Flyweight pattern : FlyweightFactory를 Singleton으로 구현하는 경우가 있습니다.</li>\n<li>추상 팩토리 패턴, 빌더 패턴, 프로토타입 패턴은 각 구현에 있어서 싱글턴 패턴을 활용할 수 있습니다.</li>\n<li>멀티턴 패턴이라는 static 변수가 배열로서 구성된 싱클턴의 확장 패턴도 존재합니다. flyweight pattern과의 차이점은 생성자가 private라는 차이점이 있습니다.</li>\n</ul>\n<h2 id=\"베이지-다이나믹-피닉스-템플릿-싱글톤-등이-있다고-합니다\" style=\"position:relative;\"><a href=\"#%EB%B2%A0%EC%9D%B4%EC%A7%80-%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9-%ED%94%BC%EB%8B%89%EC%8A%A4-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%93%B1%EC%9D%B4-%EC%9E%88%EB%8B%A4%EA%B3%A0-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"베이지 다이나믹 피닉스 템플릿 싱글톤 등이 있다고 합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>베이지, 다이나믹, 피닉스, 템플릿 싱글톤 등이 있다고 합니다.</h2>\n<ul>\n<li><a href=\"https://vallista.tistory.com/entry/1-Singleton-Pattern-in-C\">https://vallista.tistory.com/entry/1-Singleton-Pattern-in-C</a></li>\n</ul>\n<h3 id=\"피닉스-싱글턴phoenix-singleton이란-무엇인가\" style=\"position:relative;\"><a href=\"#%ED%94%BC%EB%8B%89%EC%8A%A4-%EC%8B%B1%EA%B8%80%ED%84%B4phoenix-singleton%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"피닉스 싱글턴phoenix singleton이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>피닉스 싱글턴(phoenix singleton)이란 무엇인가?</h3>\n<ul>\n<li>피닉스 싱글톤은 싱글톤 참조시 해당 객체의 소멸여부를 판단하고 소멸되었다면 다시 되살리게 됩니다.</li>\n<li>마이어스 싱글턴(singleton)의 한계를 극복하는 싱글턴입니다.</li>\n<li>C++에서 사용됩니다.</li>\n</ul>\n<h4 id=\"어떻게-피닉스-싱글턴phoenix-singleton을-구현하는가\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%94%BC%EB%8B%89%EC%8A%A4-%EC%8B%B1%EA%B8%80%ED%84%B4phoenix-singleton%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"어떻게 피닉스 싱글턴phoenix singleton을 구현하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 피닉스 싱글턴(phoenix singleton)을 구현하는가?</h4>\n<ul>\n<li>마이어스 싱글턴을 기반하기 때문에, static 지역 변수를 기반으로 구현된 싱글턴입니다. 이 static 지역 변수의 특징은 여러개 있지만, 그 중 메모리 해제 시점 관점에서 본다면, 다음과 같다.\n<ul>\n<li>메모리의 생성은 프로그램이 해당 지역변수를 구동 코드를 읽을 때 합니다.\n프로그램 종료시점에 메모리 파괴가 일어 난다 해도, 그 공간은 빈 공간으로 남아 있습니다. (즉, 다른것으로 채워지지 않는다) 이러한 특징 때문에, 프로그램 종료 시점에 그 메모리 공간에 다시 쓰기 위해 위치지정(또는 재배치)를 사용하며, 파괴 시점을 제어합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"수명제어-싱글톤\" style=\"position:relative;\"><a href=\"#%EC%88%98%EB%AA%85%EC%A0%9C%EC%96%B4-%EC%8B%B1%EA%B8%80%ED%86%A4\" aria-label=\"수명제어 싱글톤 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수명제어 싱글톤</h3>\n<hr>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://gmlwjd9405.github.io/2018/07/06/singleton-pattern.html\">[Design Pattern] 싱글턴 패턴이란</a></li>\n<li><a href=\"https://jeong-pro.tistory.com/86\">기본기를 쌓는 정아마추어 코딩블로그</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80%ED%84%B4_%ED%8C%A8%ED%84%B4\">싱글턴 패턴</a></li>\n<li><a href=\"https://coding-factory.tistory.com/709\">[Design Pattern] 싱글톤 패턴(Singleton Pattern)에 대하여</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%83%9D%EC%84%B1-%ED%8C%A8%ED%84%B4\">생성 패턴</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A8-code-classlanguage-text%ED%95%98%EB%82%98code%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4code-classlanguage-text%EC%9C%A0%EC%9D%BC%ED%95%9Ccode-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">단 <code class=\"language-text\">하나</code>의 인스턴스를 생성해 사용하는 디자인 패턴(<code class=\"language-text\">유일한</code> 객체를 생성하는 방법)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></p>\n<ul>\n<li><a href=\"#%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EB%8B%A8%EC%A0%90\">전역 변수의 단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%99%9C%EC%9A%A9%EC%B2%98\">활용처</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\">주의할 점</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C%EB%A7%8C-%EC%9D%B4%EB%A3%A8%EC%96%B4%EC%A7%84-%EC%A0%95%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%8B%B1%EA%B8%80%ED%84%B4%EA%B3%BC-%EB%8F%99%EC%9D%BC%ED%95%9C-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%96%BB%EC%9D%84-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">정적 메서드로만 이루어진 정적 클래스를 사용하면 싱글턴과 동일한 효과를 얻을 수 있습니다.</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0\">정적 클래스를 사용할 수 없는 경우</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%98%88%EC%A0%9C\">예제</a></p>\n<ul>\n<li><a href=\"#eager-initialization%EC%9D%B4%EB%A5%B8-%EC%B4%88%EA%B8%B0%ED%99%94-thread-safe\">Eager Initialization(이른 초기화, Thread-safe)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%96%B8%EC%96%B4%EB%B3%84-%EA%B5%AC%ED%98%84\">언어별 구현</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EB%A5%B8-%ED%8C%A8%ED%84%B4%EA%B3%BC%EC%9D%98-%EA%B4%80%EA%B3%84\">다른 패턴과의 관계</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B2%A0%EC%9D%B4%EC%A7%80-%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9-%ED%94%BC%EB%8B%89%EC%8A%A4-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%93%B1%EC%9D%B4-%EC%9E%88%EB%8B%A4%EA%B3%A0-%ED%95%A9%EB%8B%88%EB%8B%A4\">베이지, 다이나믹, 피닉스, 템플릿 싱글톤 등이 있다고 합니다.</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%94%BC%EB%8B%89%EC%8A%A4-%EC%8B%B1%EA%B8%80%ED%84%B4phoenix-singleton%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">피닉스 싱글턴(phoenix singleton)이란 무엇인가?</a></p>\n<ul>\n<li><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%94%BC%EB%8B%89%EC%8A%A4-%EC%8B%B1%EA%B8%80%ED%84%B4phoenix-singleton%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94%EA%B0%80\">어떻게 피닉스 싱글턴(phoenix singleton)을 구현하는가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%88%98%EB%AA%85%EC%A0%9C%EC%96%B4-%EC%8B%B1%EA%B8%80%ED%86%A4\">수명제어 싱글톤</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>","frontmatter":{"title":"singleton pattern","date":"April 14, 2021"}}},"pageContext":{"slug":"/design-pattern/singleton-pattern/","previous":{"fields":{"slug":"/design-pattern/state-pattern/"},"frontmatter":{"title":"state pattern","category":"design pattern","tags":["design pattern"],"draft":false}},"next":{"fields":{"slug":"/design-pattern/dependency-injection-pattern/"},"frontmatter":{"title":"dependency injection pattern","category":"design pattern","tags":["design pattern"],"draft":false}},"tag":["design pattern"]}},"staticQueryHashes":["3128451518","96099027"],"slicesMap":{}}