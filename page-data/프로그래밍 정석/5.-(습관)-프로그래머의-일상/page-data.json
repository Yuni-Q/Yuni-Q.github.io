{"componentChunkName":"component---src-templates-blog-post-js","path":"/프로그래밍 정석/5.-(습관)-프로그래머의-일상/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"192112d3-22e2-5c36-b22a-41ebc2d7f6c0","excerpt":"5.1 프로그래머의…","html":"<h2 id=\"51-프로그래머의-3대-미덕\" style=\"position:relative;\"><a href=\"#51-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-3%EB%8C%80-%EB%AF%B8%EB%8D%95\" aria-label=\"51 프로그래머의 3대 미덕 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 프로그래머의 3대 미덕</h2>\n<ul>\n<li><code class=\"language-text\">태만(자동화)</code> 전체의 노력을 줄이기 위해 수고를 아끼지 않는 기질입니다. 나중에 모두가 편해지도록 지금 유용한 코드를 작성합니다. 귀찮은 업무, 몇 번이나 되풀이되는 업무는 소프트웨어를 만들어 자동화합니다.</li>\n<li><code class=\"language-text\">성급(서식화)</code> 컴퓨터가 충분히 효율적으로 동작하고 있지 않거나 의도대로 동작하지 않는다면 즉시 코드를 다시 작성합니다. 작업의 품질과 작업에 드는 시간도 개선됩니다.</li>\n<li><code class=\"language-text\">오만(모듈화)</code> 높은 자존심을 갖고 남에게 내놓아도 부끄럽지 않는 코드를 작성합니다. 책임감있게 전문가라는 의식을 갖고 작업에 착수합니다.</li>\n<li>프로그래머의 중노동에는 의미가 없습니다. 업무를 하면 할수록 문제 영역에 관한 이해가 깊어지고 같은 목적을 달성하는 데 필요한 노력과 시간은 점차 줄어듭니다. 자신의 업무에서 어떤 불필요한 것이 있는지를 늘 관찰하고 결과를 나중의 업무에 반영시켜 나가면 착실히 효율화를 도모할 수 있습니다.</li>\n</ul>\n<h2 id=\"52-보이-스카우트-규칙\" style=\"position:relative;\"><a href=\"#52-%EB%B3%B4%EC%9D%B4-%EC%8A%A4%EC%B9%B4%EC%9A%B0%ED%8A%B8-%EA%B7%9C%EC%B9%99\" aria-label=\"52 보이 스카우트 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 보이 스카우트 규칙</h2>\n<ul>\n<li>보이 스카우트에는 간단한 규칙이 있습니다. 자기가 머물렀던 자리를 떠날 때는 자기가 왔을 때보다 깨끗이 치워야 한다는 규칙입니다. 처음 코드를 작성한 사람이 누구인지와는 상관없이, 조금씩이라도 코드를 개선하려는 노력을 계속해야 합니다.</li>\n<li>프로그래밍은 <code class=\"language-text\">급할수록 돌아가야 합니다</code></li>\n<li>\n<p>직접적인 가치를 얻을 수 없다는 이유로 단위 테스트 작성을 생략합니다.</p>\n<ul>\n<li>변경을 가했을 때 제대로 수정되었는지를 확인할 수 없기 때문에 테스트가 없으면 사소한 변경이라도 수작업을 통한 테스트가 필요해지므로 소프트웨어가 깨지기 쉽고 유지보수에 비용이 듭니다.</li>\n</ul>\n</li>\n<li>\n<p>비용 경감을 위해 목적에 적합하지 않는데도 기존 시스템을 억지로 사용한다.</p>\n<ul>\n<li>이렇게 무리를 하는 이상 힘들어지고 언젠가는 파탄이 납니다.</li>\n<li>결국 제대로 요구사항에 맞춰서 아키텍처를 다시 만들 수밖에 없습니다.</li>\n<li>비용은 처음부터 올바른 선택을 했을 때와 비교하면 멀리 돌아온 만큼 대폭 증가합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"53-성능-튜닝에-관한-금언\" style=\"position:relative;\"><a href=\"#53-%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D%EC%97%90-%EA%B4%80%ED%95%9C-%EA%B8%88%EC%96%B8\" aria-label=\"53 성능 튜닝에 관한 금언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3 성능 튜닝에 관한 금언</h2>\n<ul>\n<li>성능 튜닝은 프로그래밍의 초기에 고려해야 할 작업이 아닙니다. 프로그래밍에서는 빠른 코딩보다 우선 바르고 읽기 쉬운 것을 주안점을 둔 좋은 코드를 작성하는 데 노력해야 합니다.</li>\n<li>\n<p>빠른 코드는 수지가 맞지 않습니\u001f다.</p>\n<ul>\n<li>가독성의 저하, 품질의 저하, 복잡성의 증가, 보수의 저해, 환경 간의 경합, 작업량의 증대</li>\n</ul>\n</li>\n<li>\n<p>성능 튜닝의 순서</p>\n<ol>\n<li>최적화의 필요성을 증명합니다.</li>\n<li>성능을 계측하고 병목을 특정합니다.</li>\n<li>병목 코드를 최적화합니다.</li>\n<li>성능을 계측하고 최적화 효과를 확인합니다.</li>\n<li>최적화환 코드의 동작에 문제가 없음을 검증합니다.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"54-비자아적-프로그래밍\" style=\"position:relative;\"><a href=\"#54-%EB%B9%84%EC%9E%90%EC%95%84%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"54 비자아적 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4 비자아적 프로그래밍</h2>\n<ul>\n<li>프로그래밍할 때는 자만과 자존심을 버리고 동료에게 협력을 구하도록 합니다. 자기 능력을 뽐내는 것이 아니라 코드가 더 좋아지는 것에 초점을 맞추어야 합니다.</li>\n</ul>\n<h2 id=\"55-한-걸음씩-조금씩\" style=\"position:relative;\"><a href=\"#55-%ED%95%9C-%EA%B1%B8%EC%9D%8C%EC%94%A9-%EC%A1%B0%EA%B8%88%EC%94%A9\" aria-label=\"55 한 걸음씩 조금씩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.5 한 걸음씩 조금씩</h2>\n<ul>\n<li>프로그래밍은 한 번에 작은 하나만을 수행합니다. 작지만 확실한 한 걸음을 반복해서 나아가야 결과적으로 품질도 시간 효율도 높아집니다. 왜냐하면 한 번에 여러 가지를 작업하면 작업에 혼선을 빚어 모두 실패할 가능성이 커지기 때문입니다. 한 걸음씩 나아가면 마지막 한 걸음을 되돌리기가 편합니다.</li>\n</ul>\n<h2 id=\"56-tmtowtditheres-more-than-on-way-to-do-it\" style=\"position:relative;\"><a href=\"#56-tmtowtditheres-more-than-on-way-to-do-it\" aria-label=\"56 tmtowtditheres more than on way to do it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.6 TMTOWTDI(There’s more than on way to do it)</h2>\n<ul>\n<li>방법은 하나가 아닙니다.</li>\n<li>다른 사람이 사용할 툴을 설계할 때는 달성하고자 하는 것의 수단을 여러 개 준비합니다. 이렇게 하면 툴 자체는 복잡해지더라도 툴을 사용하는 쪽은 다양한 상황에서도 단순한 코드를 작성할 수 있습니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/11/undefined-7\">프로그래밍의 정석 도서 정리</a></li>\n</ul>","frontmatter":{"title":"5. (습관) 프로그래머의 일상","date":"June 29, 2020"}}},"pageContext":{"slug":"/프로그래밍 정석/5.-(습관)-프로그래머의-일상/","previous":{"fields":{"slug":"/프로그래밍 정석/4.-(관점)-프로그래머가-보는-시각/"},"frontmatter":{"title":"4. (관점) 프로그래머가 보는 시각","category":"프로그래밍 정석","draft":false}},"next":{"fields":{"slug":"/함수형 자바스크립트 | 마이클 포거스/2.-일급-함수와-응용형-프로그래밍/"},"frontmatter":{"title":"2. 일급 함수와 응용형 프로그래밍","category":"함수형 자바스크립트 | 마이클 포거스","draft":false}}}}}