{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/객체지향의 사실과 오해/05.-책임과-메시지/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"7058d384-246b-5433-ba58-e363e6aa967d","excerpt":"…","html":"<ul>\n<li>의도는 <code class=\"language-text\">메시징</code>입니다. 훌륭하고 성장 가능한 시스템을 만들기 위한 핵심은 모듈 내부의 속성과 행동이 어떤가보다는 모듈이 어떻게 커뮤니케이션하는가에 달려 있습니다.</li>\n</ul>\n<h2 id=\"설계의-품질을-좌우하는-책임\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EA%B3%84%EC%9D%98-%ED%92%88%EC%A7%88%EC%9D%84-%EC%A2%8C%EC%9A%B0%ED%95%98%EB%8A%94-%EC%B1%85%EC%9E%84\" aria-label=\"설계의 품질을 좌우하는 책임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설계의 품질을 좌우하는 책임</h2>\n<ul>\n<li>객체지향 공통체를 구성하는 기본 단위는 자율적인 객체입니다. 객체들은 애플리케이션의 기능을 구현하기 위해 협력하고, 협력 과정에서 각자 맡은 바 책임을 다하기 위해 자율적으로 판단하고 행동합니다.</li>\n<li>여기서 키워드는 자율성입니다. 자율성의 사전적 의미는 <code class=\"language-text\">자기 스스로의 원칙에 따라 어떤 일을 하거나 자신을 통제해서 절제하는 성질이나 특성</code>입니다. 자율성의 반대말은 타율성으로, 자신의 의지와 관계없이 정해진 규율이나 원칙에 따라서만 움직이는 성질을 의미합니다. 따라서 자율적인 객체란 스스로 정한 원칙에 따라 판단하고 스스로의 의지를 기반으로 행동하는 객체입니다. 타인이 정한 규칙이나 명령에 따라 판단하고 행동하는 객체는 자율적인 객체라고 부르기 어렵습니다.</li>\n<li>객체가 어떤 행동을 하는 유일한 이유는 다른 객체로부터 요청을 수신했기 때문입니다. 요청을 처리하기 위해 객체가 수행하는 행동을 <code class=\"language-text\">책임</code>이라고 합니다. 따라서 자율적인 객체란 스스로의 의지와 판단에 따라 각자 맡은 책임을 수행하는 객체를 의미합니다.</li>\n<li>객체지향 설계의 아름다움은 적절한 책임을 적절한 객체에게 할당하는 과정 속에서 드러납니다. 객체지향 애플리케이션을 설계하는 가정 널리 알려진 방법을 책임-주도 설계라고 부르는 이유는 적절한 책임의 선택이 전체 설계의 방향을 결정하기 때문입니다.</li>\n<li>적절한 책임이 자율적인 객체를 낳고, 자율적인 객체들이 모여 유연하고 단순한 협력을 낳습니다. 따라서 협력에 참여하는 객체가 얼마나 자율적인지가 전체 애플리케이션의 품질을 결정합니다.</li>\n</ul>\n<h2 id=\"어떻게가-아니라-무엇을\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-%EB%AC%B4%EC%97%87%EC%9D%84\" aria-label=\"어떻게가 아니라 무엇을 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게가 아니라 무엇을</h2>\n<ul>\n<li>자율적인 책임의 특징은 객체가 어떻게(how)해야 하는가가 아니라 무엇(what)을 해야 하는가를 설명합니다. <code class=\"language-text\">증언한다</code>라는 책임은 모자 장수가 협력을 위해 무엇을 해야 하는지는 결정하지만 어떻게 해야 하는 지에 대해서는 전혀 언급하지 않습니다. 증언할 방법은 모자 장수가 자율적으로 선택할 수 있습니다.</li>\n</ul>\n<h2 id=\"메시지\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80\" aria-label=\"메시지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메시지</h2>\n<ul>\n<li>메시지 전송은 수신자, 메시지 이름, 인자의 조합으로 구성됩니다.</li>\n<li>\n<p>메시지는 객체들이 서로 협력하기 위해 사용할 수 있는 유일한 의사소통 수산입니다.</p>\n<ul>\n<li>객체가 메시지를 수신할 수 있다는 것은 객체가 메시지에 해당하는 책임을 수행할 수 있다는 것을 의미합니다.</li>\n<li>객체가 유일하게 이해할 수 있는 의사소통 수다은 메시지뿐이며 객체는 메시지를 처리하기 위한 방법을 자율적으로 선택할 수 있습니다.</li>\n<li>외부의 객체는 메시지에 관해서만 볼 수 있고 객체 내부는 볼 수 없기 때문에 자연스럽게 객체의 외부와 내부가 분리됩니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"다형성\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성</h2>\n<ul>\n<li>서로 다른 유형의 객체가 동일한 메시지에 대해 서로 다르게 반응하는 것을 의미합니다.</li>\n<li>다형성을 하나의 메시지와 하나 이상의 메서드 사이의 관계로 볼 수 있습니다.</li>\n<li>기본적으로 다형성을 동일한 역할을 수행할 수 있는 객체들 사이의 대체 가능성을 의미합니다.</li>\n<li>\n<p>다형성은 수신자의 종류를 캡슐화합니다.</p>\n<ul>\n<li>다형성은 송신자와 수신자 간의 객체 타입에 대한 결합도를 메시지에 대한 결합도로 낮춤으로써 달성됩니다.</li>\n</ul>\n</li>\n<li>객체지향 패러다임이 강력한 이유는 다형성을 이용해 협력을 유연하게 만들 수 있기 때문입니다.</li>\n</ul>\n<h3 id=\"유연하고-확장-가능하고-재사용성이-높은-협력의-의미\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1%EC%9D%B4-%EB%86%92%EC%9D%80-%ED%98%91%EB%A0%A5%EC%9D%98-%EC%9D%98%EB%AF%B8\" aria-label=\"유연하고 확장 가능하고 재사용성이 높은 협력의 의미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유연하고 확장 가능하고 재사용성이 높은 협력의 의미</h3>\n<ul>\n<li>첫째, 협력이 유연해집니다.</li>\n<li>둘째, 협력이 수행되는 방식을 확장할 수 있습니다.</li>\n<li>셋째, 협력이 수행되는 방식을 재사용할 수 있습니다.</li>\n</ul>\n<h3 id=\"송신자와-수신자를-약하게-연결하는-메시지\" style=\"position:relative;\"><a href=\"#%EC%86%A1%EC%8B%A0%EC%9E%90%EC%99%80-%EC%88%98%EC%8B%A0%EC%9E%90%EB%A5%BC-%EC%95%BD%ED%95%98%EA%B2%8C-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EB%A9%94%EC%8B%9C%EC%A7%80\" aria-label=\"송신자와 수신자를 약하게 연결하는 메시지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>송신자와 수신자를 약하게 연결하는 메시지</h3>\n<ul>\n<li>메시지는 송신자와 수신자 사이의 결합도를 낮춤으로써 설계를 유연하고, 확장 가능하고, 재사용 가능하게 만듭니다.</li>\n</ul>\n<h3 id=\"객체지향의-핵심-메시지\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%ED%95%B5%EC%8B%AC-%EB%A9%94%EC%8B%9C%EC%A7%80\" aria-label=\"객체지향의 핵심 메시지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향의 핵심, 메시지</h3>\n<ul>\n<li>객체지향 세계에서 객체들이 서로 협력하기 위해 사용할 수 있는 유일한 방법은 메시지를 전송하는 것입니다.</li>\n<li>클래스 기반의 객체지향 언어를 사용하는 대부분의 사람들은 객체지향 애플리케이션을 클래스의 집합으로 생각합니다. 프로그래머 입장에서 클래스는 실제로 볼 수 있고 수정 할 수 있는 구체적인 존재입니다. 많은 객체지향 책에서는 클래스를 선언하고 속성과 메서드를 정의하는 방법에 초점을 맞춥니다. 대부분의 입문자들은 클래스 간의 상속 관계가 객체지향 설계를 가치 있게 만드는 핵심적인 메커니즘이라고 배웁니다. 객체지향 설계에 관한 많은 논의가 클래스에 어떤 책임을 할당하고 클래스 간의 의존성을 어떻게 관리할 것인가를 집중됩니다.</li>\n<li>클래스가 코드를 구현하기 위해 사용할 수 있는 중요한 추상화 도구인 것은 사실이지만 <code class=\"language-text\">객체지향의 강력함은 클래스가 아니라 객체들이 주고받는 메시지로부터 나옵니다</code>. 객체지향 애플리케이션은 클래스를 이용해 만들어지지만 메시지를 통해 정의됩니다. 실제로 애플리케이션을 살아있게 만드는 것은 클래스가 아니라 객체입니다. 그리고 이런 객체들의 윤곽을 결정하는 것이 바로 객체들이 주고받는 메시지입니다.</li>\n<li>클래스는 단지 동적인 객체들의 특성과 행위를 정적인 텍스트로 표현하기 위해 사용할 수 있는 추상화 도구일 뿐입니다. 중요한 것은 클래스가 아니라 객체입니다. 클래스를 정의하는 것이 먼저가 아니라 객체들의 속성과 행위를 식별하는 것이 먼저입니다. 클래스는 객체의 속성과 행위를 담는 틀일 뿐입니다. 심지어는 클래스를 사용하지 않고도 객체의 속성과 행위를 표현할 수도 있습니다.</li>\n<li>클래스를 중심으로 두는 설계는 유연하지 못하고 확장하기 어렵습니다. 객체지향 패러다임으로의 전환은 시스템을 정적인 클래스들의 집합이 아니라 메시지를 주고받는 동적인 객체들의 집합으로 바라보는 것에서 시작됩니다. 클래스에 담길 객체들의 공통적인 행위와 속성을 포착하기 위해서는 먼저 협력하는 객체들의 관점에서 시스템을 바라봐야 합니다.</li>\n<li>클래스를 객체지향 세계의 왕좌에서 끌어내렸다고 해서 모든 문제가 해결되는 것은 아닙니다. 진정한 객체지향 패러다임으로의 도약은 개별적인 객체가 아니라 메시지를 주고 받는 객체들 사이의 커뮤니케이션에 초점을 맞출 때 일어납니다.</li>\n</ul>\n<h2 id=\"whatwho-사이클\" style=\"position:relative;\"><a href=\"#whatwho-%EC%82%AC%EC%9D%B4%ED%81%B4\" aria-label=\"whatwho 사이클 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What/Who 사이클</h2>\n<ul>\n<li>\n<p>객체 사이의 협력 관계를 설계하기 위해서는 먼저 ‘어떤 행위(what)‘를 수행할 것인지를 결정한 후에 ‘누가(who)’ 그 행위를 수행할 것인지를 결정해야 합니다.</p>\n<ul>\n<li>여기서 ‘어떤 행위’가 메세지입니다.</li>\n</ul>\n</li>\n<li>What/Who 사이클이라는 용어는 역할을 수행할 객체의 인터페이스를 발견하기 위해 메시지를 이용하는 책임-주도 설계의 핵심 아이디어를 명확하게 표현합니다.</li>\n<li>어떤 객체가 필요한지를 생각하지 말고 어떤 메시지가 필요한지를 먼저 고민합니다.</li>\n</ul>\n<h2 id=\"묻지-말고-시켜라tell-dont-ask--데메테르-법칙law-of-demeter\" style=\"position:relative;\"><a href=\"#%EB%AC%BB%EC%A7%80-%EB%A7%90%EA%B3%A0-%EC%8B%9C%EC%BC%9C%EB%9D%BCtell-dont-ask--%EB%8D%B0%EB%A9%94%ED%85%8C%EB%A5%B4-%EB%B2%95%EC%B9%99law-of-demeter\" aria-label=\"묻지 말고 시켜라tell dont ask  데메테르 법칙law of demeter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>묻지 말고 시켜라(Tell, Don’t Ask) / 데메테르 법칙(Law of Demeter)</h2>\n<ul>\n<li>메시지를 먼저 결정하고 객체가 메시지를 따르게 하는 설계 방식은 객체가 외부에 제공하는 인터페이스가 독특한 스타일을 따르게 합니다.</li>\n<li>‘묻지 말고 시켜라 스타일은 객체지향 애플리케이션이 자율적인 객체들의 공동체라는 사실을 강조합니다.</li>\n<li>객체 자체가 아니라 메시지에 초점을 맞추는 것은 ‘묻지 말고 시켜라’ 스타일의 설계를 증진시킴으로써 객체의 자율성을 보장합니다.</li>\n<li>‘묻지 말고 시켜라’ 스타일은 객체를 자율적으로 만들고 캡슐화를 보장하며 결합도를 낮게 유지시켜 주기 때문에 설계를 유연하게 만듭니다.</li>\n<li>샌디 메츠는 ‘묻지 말고 시켜라’ 스타일이란 ‘메시지가 <code class=\"language-text\">어떻게</code> 해야 하는 지를 지시하지말고 <code class=\"language-text\">무엇</code>을 해야 하는지를 요청’하는 것이라고 설명합니다.</li>\n<li>객체가 자신이 수신할 메시지를 결정하게 하지 말고 메시지가 협력에 필요한 객체를 발견하게 해야 합니다.</li>\n</ul>\n<h2 id=\"메시지를-믿어라\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%AF%BF%EC%96%B4%EB%9D%BC\" aria-label=\"메시지를 믿어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메시지를 믿어라</h2>\n<ul>\n<li>객제지향 시스템은 협력하는 객체들의 연결망입니다. 전체 시스템은 메시지를 전송하는 객체와 전송된 메시지를 이해할 수 있는 객체를 연결하고 상호 관련 짓는 과정을 통해 구축됩니다.</li>\n<li>메시지를 중심으로 설꼐된 구조는 유연하고 확장 가능하며 재사용 가능합니다.</li>\n</ul>\n<h2 id=\"인터페이스\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스</h2>\n<ul>\n<li>일반적으로 인터페이스란 어떤 두 사물이 마주치는 경계 지점에서 서로 상호작용할 수 있게 이어주는 방법이나 장치를 의미합니다.</li>\n<li>\n<p>인터페이스의 특징</p>\n<ul>\n<li>첫째, 인터페이스의 사용법을 익히기만 하면 내부 구조나 동작 방식을 몰라도 쉽게 대상을 조작하거나 의사를 전달할 수 있습니다.</li>\n<li>둘째, 인터페이스 자체는 변경하지 않고 단순히 내부 구성이나 작동 방식만을 변경하는 것은 인터페이스 사용자에게 어떤 영향도 미치지 않습니다.</li>\n<li>셋째, 대상이 변경되더라도 동일한 인터페이스를 제공하기만 하면 아무런 문제 없이 상호작용 할 수 있습니다.</li>\n</ul>\n</li>\n<li>메시지가 인터페이스를 결정합니다. 객체가 다른 객체와 상호작용할 수 있는 유일한 방법은 ‘메시지 전송’입니다. 따라서 객체의 인터페이스는 객체가 수신할 수 있는 메시지의 목록으로 구성되면 객체가 어떤 메시지를 수신할 수 있는지가 객체가 제공하는 인터페이스의 모양을 빚습니다.</li>\n<li>\n<p>인터페이스는 외부에서 접근 가능한 공개된 인터페이스와 내부에서만 접근할 수 있는 감춰진 인터페이스로 구분됩니다.</p>\n<ul>\n<li>내부에서만 접근 가능한 인터페이스와 구분하기 위해 외부에 공개된 인터페이스를 공용 인터페이스라고 합니다.</li>\n<li>객체지향에서 모든 상호작용은 메시지를 통해서만 이뤄져야 하며 자기 자신과의 상호작용 역시 예외가 아닙니다.</li>\n<li>실제로 객체의 공용 인터페읏를 구성하는 것은 객체가 외부로부터 수신할 수 있는 메시지의 목록입니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"인터페이스와-구현의-분리\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%EA%B5%AC%ED%98%84%EC%9D%98-%EB%B6%84%EB%A6%AC\" aria-label=\"인터페이스와 구현의 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스와 구현의 분리</h2>\n<ul>\n<li>\n<p>객체지향적인 사고 방식을 이해하기 위한 세 가지 원칙</p>\n<ul>\n<li>좀 더 추상적인 인터페이스</li>\n<li>최소 인터페이스</li>\n<li>인터페이스와 구현 간에 차이가 있다는 점을 인식</li>\n</ul>\n</li>\n<li>훌륭한 개체란 구현을 모른 채 인터페이스만 알면 쉽게 상호작용할 수 있는 객체를 의미합니다. 이것은 객체를 설계할 때 객체 외부에 노출되는 인터페이스와 객체의 내부의 숨겨지는 구현을 명확하게 분리해서 고려해야 한다는 것을 의미합니다. 이를 <code class=\"language-text\">인터페이스와 구현의 분리(separation of interface and implementation)원칙</code>이라고 합니다. 결과적으로 객체 설계의 핵심은 객체를 두 개의 분리된 요소로 분해해 설계하는 것입니다. 그것으 바로 외부에 공개되는 인터페이스와 내부에 감춰지는 구현입니다.</li>\n<li>인터페이스와 구현의 분리 원칙이 중요한 이유는 소프트웨어는 항상 변경되기 때문입니다.</li>\n<li>인터페이스와 구현의 분리 원칙은 변경을 관리하기 위한 것입니다. 좀 더 고급스럽게 말하면 송신자와 수신자가 구체적인 구현 부분이 아니라 느슨한 인터페이스에 대해서만 결합되도록 만드는 것입니다.</li>\n</ul>\n<h2 id=\"캡슐화\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"캡슐화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화</h2>\n<ul>\n<li>객체의 자율성을 위해 구현을 외부로부터 감추는 것을 캡슐화라고 합니다.</li>\n<li>캡슐화를 <code class=\"language-text\">정보 은닉(information hiding)</code>이라고 부르기도 합니다.</li>\n<li>\n<p>객체지향의 세계에서 캡슐화는 두 가지 관점에서 사용됩니다.</p>\n<ul>\n<li>상태와 행위의 캡슐화(데이터 캡슐화)</li>\n<li>사적인 비밀의 캡슐화</li>\n</ul>\n</li>\n<li>객체의 내부와 외부를 명확하게 구분하면 설계가 단순하고 유연하고 변경하기 쉬워집니다.</li>\n</ul>\n<h2 id=\"책임의-자율성이-협력의-품질을-결정합니다\" style=\"position:relative;\"><a href=\"#%EC%B1%85%EC%9E%84%EC%9D%98-%EC%9E%90%EC%9C%A8%EC%84%B1%EC%9D%B4-%ED%98%91%EB%A0%A5%EC%9D%98-%ED%92%88%EC%A7%88%EC%9D%84-%EA%B2%B0%EC%A0%95%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"책임의 자율성이 협력의 품질을 결정합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>책임의 자율성이 협력의 품질을 결정합니다.</h2>\n<ul>\n<li>첫째, 자율적인 책임은 협력을 단순하게 만듭니다.</li>\n<li>둘째, 자율적인 책임은 모자 장수의 외부와 내부를 명확하게 분리합니다.</li>\n<li>셋째, 책임이 자율적일 경우 책임을 수행하는 내부적인 방법을 변경하더라도 외부에 영향을 미치지 않습니다.</li>\n<li>넷째, 자율적인 책임은 협력의 대상을 다양하게 선택할 수 있는 유연성을 제공합니다.</li>\n<li>다섯째, 객체가 수행하는 책임들이 자율적일수록 객체의 역할을 이해하기 쉬워집니다.</li>\n<li>책임이 자율적일수록 적절하게 <code class=\"language-text\">추상화</code>되며, <code class=\"language-text\">응집도</code>가 높아지고, <code class=\"language-text\">결합도</code>가 낮아지며, <code class=\"language-text\">캡슐화</code>가 증진되고, <code class=\"language-text\">인터페잊스와 구현이 명확히 분리</code>되며, 설계의 <code class=\"language-text\">유연성</code>과 <code class=\"language-text\">재사용성</code>이 향상됩니다.</li>\n<li>객체지향의 강력함을 누리기 위한 출발점은 책임을 자율적으로 만드는 것입니다. 그리고 이것은 여러분이 선택하는 메시지에 따라 달라집니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/11/undefined-3\">객체지향의 사실과 오해</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%84%A4%EA%B3%84%EC%9D%98-%ED%92%88%EC%A7%88%EC%9D%84-%EC%A2%8C%EC%9A%B0%ED%95%98%EB%8A%94-%EC%B1%85%EC%9E%84\">설계의 품질을 좌우하는 책임</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%96%B4%EB%96%BB%EA%B2%8C%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-%EB%AC%B4%EC%97%87%EC%9D%84\">어떻게가 아니라 무엇을</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EB%A9%94%EC%8B%9C%EC%A7%80\">메시지</a></li>\n<li>\n<p><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EB%8B%A4%ED%98%95%EC%84%B1\">다형성</a></p>\n<ul>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1%EC%9D%B4-%EB%86%92%EC%9D%80-%ED%98%91%EB%A0%A5%EC%9D%98-%EC%9D%98%EB%AF%B8\">유연하고 확장 가능하고 재사용성이 높은 협력의 의미</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%86%A1%EC%8B%A0%EC%9E%90%EC%99%80-%EC%88%98%EC%8B%A0%EC%9E%90%EB%A5%BC-%EC%95%BD%ED%95%98%EA%B2%8C-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EB%A9%94%EC%8B%9C%EC%A7%80\">송신자와 수신자를 약하게 연결하는 메시지</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%ED%95%B5%EC%8B%AC-%EB%A9%94%EC%8B%9C%EC%A7%80\">객체지향의 핵심, 메시지</a></li>\n</ul>\n</li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#whatwho-%EC%82%AC%EC%9D%B4%ED%81%B4\">What/Who 사이클</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EB%AC%BB%EC%A7%80-%EB%A7%90%EA%B3%A0-%EC%8B%9C%EC%BC%9C%EB%9D%BCtell-dont-ask--%EB%8D%B0%EB%A9%94%ED%85%8C%EB%A5%B4-%EB%B2%95%EC%B9%99law-of-demeter\">묻지 말고 시켜라(Tell, Don’t Ask) / 데메테르 법칙(Law of Demeter)</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%AF%BF%EC%96%B4%EB%9D%BC\">메시지를 믿어라</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">인터페이스</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%EA%B5%AC%ED%98%84%EC%9D%98-%EB%B6%84%EB%A6%AC\">인터페이스와 구현의 분리</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%BA%A1%EC%8A%90%ED%99%94\">캡슐화</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%B1%85%EC%9E%84%EC%9D%98-%EC%9E%90%EC%9C%A8%EC%84%B1%EC%9D%B4-%ED%98%91%EB%A0%A5%EC%9D%98-%ED%92%88%EC%A7%88%EC%9D%84-%EA%B2%B0%EC%A0%95%ED%95%A9%EB%8B%88%EB%8B%A4\">책임의 자율성이 협력의 품질을 결정합니다.</a></li>\n<li><a href=\"/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%20%EC%82%AC%EC%8B%A4%EA%B3%BC%20%EC%98%A4%ED%95%B4/05.-%EC%B1%85%EC%9E%84%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","frontmatter":{"title":"05. 책임과 메시지","date":"July 03, 2020"}}},"pageContext":{"slug":"/객체지향의 사실과 오해/05.-책임과-메시지/","previous":{"fields":{"slug":"/객체지향의 사실과 오해/03.-타입과-추상화/"},"frontmatter":{"title":"03. 타입과 추상화","category":"객체지향의 사실과 오해","tags":null,"draft":false}},"next":{"fields":{"slug":"/객체지향의 사실과 오해/04.-역할,-책임,-협력/"},"frontmatter":{"title":"04. 역할, 책임, 협력","category":"객체지향의 사실과 오해","tags":null,"draft":false}},"tag":null}},"staticQueryHashes":["3128451518","96099027"]}