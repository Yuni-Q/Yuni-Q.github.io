{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/frontend/애플리케이션-보안/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"534f5080-177a-5ec7-a60f-8b532dfb4591","excerpt":"애플리케이션 보안 주입(Injection) 크로스 사이트 스크립트(Cross-site scripting) 크로스 사이트 요청 위조 토큰 보호(Cross-site request forgery protection) 오픈 리다이렉션(Open redirects) 주입(Injection) SQL 주입은 애플리케이션에 영향을 끼치는 가장 일반적인 주입의 형태입니다. 위의 경우 username…","html":"<h2 id=\"애플리케이션-보안\" style=\"position:relative;\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88\" aria-label=\"애플리케이션 보안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애플리케이션 보안</h2>\n<ul>\n<li>주입(Injection)</li>\n<li>크로스 사이트 스크립트(Cross-site scripting)</li>\n<li>크로스 사이트 요청 위조 토큰 보호(Cross-site request forgery protection)</li>\n<li>오픈 리다이렉션(Open redirects)</li>\n</ul>\n<h3 id=\"주입injection\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9E%85injection\" aria-label=\"주입injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주입(Injection)</h3>\n<ul>\n<li>SQL 주입은 애플리케이션에 영향을 끼치는 가장 일반적인 주입의 형태입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT * FROM user WHERE username = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> AND password = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>password<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위의 경우 username이 <code class=\"language-text\">OR 1=1 --</code> 일 경우 <code class=\"language-text\">--</code> 문자 시퀀스는 라인의 나머지 부분을 주석으로 만들기 때문에 <code class=\"language-text\">SELECT * FROM user WHERE username = OR 1=1</code>가 되어 사용자 전체 리스트를 반환합니다.</li>\n<li>SQL 주입을 방지하기 위한 방법은 준비된 문장(prepared statements)을 사용하는 것입니다.</li>\n<li>라이브러리에서 제공하는 메소드를 활용해서 이스케이프 문자를 사용합니다.</li>\n</ul>\n<h3 id=\"입력-유효성-검사\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EB%A0%A5-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\" aria-label=\"입력 유효성 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력 유효성 검사</h3>\n<ul>\n<li>서버에 손상된 데이터가 들어가는 것을 방지하는 가장 쉬운 방법은 입력 유효성 검사(Input validation)입니다.</li>\n<li>\n<p>입력 유효성 감사는 다음과 같은 두 가지 유형이 있습니다.</p>\n<ul>\n<li>화이트 리스팅(White listing)</li>\n<li>블랙 리스팅(Black listing)</li>\n</ul>\n</li>\n<li>블랙 리스팅은 위험한 기법입니다. 권장되는 방식은 사용자로부터 들어오는 데이터를 정규 표현식을 이용해 검증하는 화이트 리스팅 방식입니다.</li>\n<li>입력 유효성 검사는 SQL 주입에 만능 해결책은 아니지만, 크로스 사이트 스크립팅 같은 다른 보안 위협에 도움이 됩니다.</li>\n</ul>\n<h3 id=\"크로스-사이트-스크립팅cross-site-scripting-xss\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A1%9C%EC%8A%A4-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85cross-site-scripting-xss\" aria-label=\"크로스 사이트 스크립팅cross site scripting xss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크로스 사이트 스크립팅(cross-site scripting, XSS)</h3>\n<ul>\n<li>Cross Site Scripting의 약자로 CSS라고 하는 것이 맞지만 Cascading Style Sheets의 약어로 사용되어 있어 XSS라고 합니다.</li>\n<li>주로 웹 사이트에서 클라이언트 브라우저의 데이터를 훔칠 수 있는 주입 코드를 넣는 것입니다.</li>\n<li>XSS 게시판이나 웹 메일 등에 자바스크립트 같은 스크립트 코드를 삽입해 개발자가 고려하지 않은 기능이 작동하게 하는 치명적일 수 있는 공격 입니다.</li>\n<li>대부분의 웹 해킹 공격 기법과는 다르게 클라이언트 즉, 사용자를 대상으로 한 공격입니다.</li>\n<li>일부 인터넷 웹 사이트의 경우, 사용자는 임의의 입력이 있는 주석을 추가할 수 있습니다. 이 잉ㅁ의의 입력은 원격 서버에서 세션 쿠키(또는 다른 귀중한 정보)를 훔칠 수 있습니다. 또한 공격자가 원격 머신에서 사용자 세셔능ㄹ 복제할 수 있는 자바스크립트를 로드시키는 스크립트 태그도 포함시킬 수 있습니다.</li>\n<li>\n<p>XSS 공격에는 영구적인(persistent) 공격과 비영구적인(non-presistent) 공격이 있습니다.</p>\n<ul>\n<li>영구적인 유형의 XSS는 웹 사이트에서 사용자에게 표시될 때, 공겨긍로 분석되는 텍스트의 특정 문자열을 만드는 XSS 공격을 저장하는 것으로 이루어집니다. 이 코드는(포럼의 주석과 같이) 데이터베이스에 저장된 임의의 입력 텍스트를 통해 주입됩니다.</li>\n<li>비영구적인 유형의 XSS는, 잘못된 데이터 처리로 인해 애플리케이션의 비영구적인 부분으로 삽입되는 경우입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"대처방안\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%B2%98%EB%B0%A9%EC%95%88\" aria-label=\"대처방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대처방안</h4>\n<ul>\n<li><code class=\"language-text\">&lt;</code>를 <code class=\"language-text\">&amp;lt</code>로 바꿔주는 것으로 막아 줄 수 있습니다.</li>\n<li>추가적으로 <code class=\"language-text\">&amp;</code>, <code class=\"language-text\">&quot;</code>,<code class=\"language-text\">&#39;</code>, `, <code class=\"language-text\">=</code>과 같은 문자도 바꿔주는 것이 좋습니다.</li>\n<li>react에서도 hrml을 넣을 때 <code class=\"language-text\">&lt;div dangerouslySetInnerHTML={{ __html: data }} /&gt;</code>를 사용하지만 이름을 길고 어렵게 작성하고 객체로 만들어 둔 것이 사용을 권장하지 않기 때문이라고 합니다.</li>\n</ul>\n<h4 id=\"sznitize-html\" style=\"position:relative;\"><a href=\"#sznitize-html\" aria-label=\"sznitize html permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sznitize-html</h4>\n<ul>\n<li>허용하지 않는 html 입력을 맏습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">npm i sanitize-html</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> sanitizeHtml <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sanitize-html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;script>location.href = 'https://naver.com'&lt;/script\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sanitizeHtml</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span></code></pre></div>\n<h4 id=\"출력-인토딩output-encoding\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EB%A0%A5-%EC%9D%B8%ED%86%A0%EB%94%A9output-encoding\" aria-label=\"출력 인토딩output encoding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력 인토딩(output encoding)</h4>\n<ul>\n<li>\n<p>문제를 우베 개발로 축소하는 경우, 다음과 같이 출력 인코딩이 필요한 세 영역을 알아둬야 합니다.</p>\n<ul>\n<li>CSS</li>\n<li>Javascript</li>\n<li>HTML</li>\n</ul>\n</li>\n<li>일반적으로 앱을 만들 때 어떤 프레임워크를 사용하는지에 상관없이, 프레임워크는 항상 출력을 인코딩하는 함수를 갖고 있습니다.</li>\n</ul>\n<h3 id=\"크로스-사이트-요청-위조cross-site-request-forgery-csrf\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A1%9C%EC%8A%A4-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%9A%94%EC%B2%AD-%EC%9C%84%EC%A1%B0cross-site-request-forgery-csrf\" aria-label=\"크로스 사이트 요청 위조cross site request forgery csrf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크로스 사이트 요청 위조(Cross-site request forgery, CSRF)</h3>\n<ul>\n<li>\n<p>크로스 사이트 요청 위조는 크로스 사이트 요청 스크립팅의 반대입니다.</p>\n<ul>\n<li>크로스 사이트 요청 스크립트에서의 문제는 서버에서 오는 데이터에 있습니다. 이에 반해 크로스 사이트 요청 위조에서의 문제는 클라이언트로부터 오는 데이터를 신뢰하는 서버에 있습니다.</li>\n</ul>\n</li>\n<li>세션 쿠키를 훔친 후, 공격자는 사용자로부터 정보를 훔칠 수 있을 뿐 아니라 쿠키와 관련된 계정 정보를 수정할 수도 있습니다.</li>\n<li>\n<p>크로스 사이트 요청 위조 공격을 방지하는 방법은 엔드 포인트를 크로스 사이트 요청 토큰을 통해 보호하는 것입니다.</p>\n<ul>\n<li>input에 type이 hidden인 임의의 토큰을 포함시켜 유효한 요청인지 확인합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"오픈-리다이렉트\" style=\"position:relative;\"><a href=\"#%EC%98%A4%ED%94%88-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8\" aria-label=\"오픈 리다이렉트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오픈 리다이렉트</h3>\n<ul>\n<li>사용자는 악의적인 페이지로 리다엙션될 수 있습니다.</li>\n<li>이 문제에 대한 해결책은 신뢰하지 못하는 서드파티 웹사이트로 사용자를 리다이렉션 시키지 않습니다.</li>\n<li>가장 좋은 방법은 리아티렉션을 위한 대상 호스트를 화이트 리스팅하는 것입니다.</li>\n<li>기본적으로 우리의 소프트웨어가 고객을 알지 못하는 웹사이트로 리다이렉션 않도록 해야 합니다.</li>\n</ul>\n<h3 id=\"효과적인-코드-리뷰\" style=\"position:relative;\"><a href=\"#%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0\" aria-label=\"효과적인 코드 리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>효과적인 코드 리뷰</h3>\n<ul>\n<li>애플리케이션 내의 보안 결함을 감소시키는 가장 효과적인 방법 중 하나는 체계적이고 잘 알려진 코드 리뷰 프로세스를 지속적으로 수행하는 것입니다.</li>\n<li>\n<p>항상 같은 두 단계의 리뷰를 수행해야 합니다.</p>\n<ul>\n<li>큰 그림을 얻기 위해 코드를 빠르게 검토합니다. 코드가 어떻게 작동하는지, 사용되는 기술 중 익숙하지 않은 기술은 어떤 것이 있는지, 코드에 대한 지원이 어떻게 수행되는지 등을 파악합니다.</li>\n<li>검토를 위한 체크리스트 항목에 따라 코드를 리뷰합니다.</li>\n</ul>\n</li>\n<li>\n<p>일반적으로 코드 리뷰 동안 코드 보안 관심 사항에 관련된 점검 항목 리스트는 상당히 방대합니다. 이를 다음 구성 요소에 따라 범위를 좁힐 수 있습니다.</p>\n<ul>\n<li>모든 입력이 적용되는 경우 검사/인코딩 됐는가?</li>\n<li>로그를 포함한 모든 출력이 인코딩 됐는가?</li>\n<li>크로스 사이트 요청 위조 토큰으로 엔드포인트를 보호하고 있는가?</li>\n<li>모든 사용자의 자격 증명이 암호화 되거나 데이터베이스 내의 해시로 처리됐는가?</li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88\">애플리케이션 보안</a></p>\n<ul>\n<li><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%EC%A3%BC%EC%9E%85injection\">주입(Injection)</a></li>\n<li><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%EC%9E%85%EB%A0%A5-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\">입력 유효성 검사</a></li>\n<li>\n<p><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%ED%81%AC%EB%A1%9C%EC%8A%A4-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85cross-site-scripting-xss\">크로스 사이트 스크립팅(cross-site scripting, XSS)</a></p>\n<ul>\n<li><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%EB%8C%80%EC%B2%98%EB%B0%A9%EC%95%88\">대처방안</a></li>\n<li><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#sznitize-html\">sznitize-html</a></li>\n<li><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%EC%B6%9C%EB%A0%A5-%EC%9D%B8%ED%86%A0%EB%94%A9output-encoding\">출력 인토딩(output encoding)</a></li>\n</ul>\n</li>\n<li><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%ED%81%AC%EB%A1%9C%EC%8A%A4-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%9A%94%EC%B2%AD-%EC%9C%84%EC%A1%B0cross-site-request-forgery-csrf\">크로스 사이트 요청 위조(Cross-site request forgery, CSRF)</a></li>\n<li><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%EC%98%A4%ED%94%88-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8\">오픈 리다이렉트</a></li>\n<li><a href=\"/frontend/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88/#%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0\">효과적인 코드 리뷰</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"애플리케이션 보안","date":"February 21, 2020"}}},"pageContext":{"slug":"/frontend/애플리케이션-보안/","previous":{"fields":{"slug":"/frontend/html-edit/"},"frontmatter":{"title":"html edit","category":"frontend","tags":null,"draft":false}},"next":{"fields":{"slug":"/typescript/node-javascript에서-typescript로-바꾸기/"},"frontmatter":{"title":"Node javascript에서 typescript로 바꾸기","category":"typescript","tags":null,"draft":false}},"tag":null}},"staticQueryHashes":["3128451518","96099027"]}