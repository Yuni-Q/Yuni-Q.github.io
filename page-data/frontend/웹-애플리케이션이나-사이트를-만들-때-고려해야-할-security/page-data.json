{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontend/웹-애플리케이션이나-사이트를-만들-때-고려해야-할-security/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"2c355f6f-b50d-50f8-996f-664e585d8a4d","excerpt":"대표적인 Browser security은 Same Origin Policy이 있습니다. 동일 출처 정책(same-origin policy)은 어떤 출처에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식입니다. 동일 출처 정책은 잠재적으로 해로울 수 있는 문서를 분리함으로써 가능한 공격 경로를 줄이는데 도움을 줍니다. 두 URL의 프로토콜, 포트(명시한 경우), 호스트가 모두 같아야 동일한 출처라고 말합니다. 웹 위협은 크게 외부망을 통한…","html":"<ul>\n<li>\n<p>대표적인 Browser security은 Same Origin Policy이 있습니다.</p>\n<ul>\n<li>동일 출처 정책(same-origin policy)은 어떤 출처에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식입니다. 동일 출처 정책은 잠재적으로 해로울 수 있는 문서를 분리함으로써 가능한 공격 경로를 줄이는데 도움을 줍니다. 두 URL의 프로토콜, 포트(명시한 경우), 호스트가 모두 같아야 동일한 출처라고 말합니다.</li>\n</ul>\n</li>\n<li>웹 위협은 크게 외부망을 통한 1차 해킹과 내부망에서의 2차 해킹으로 분류됩니다. 1차 해킹을 통해 내부 시스템에 접근이 가능하도록 한 후, 내부 시스템을 통한 2차 해킹 (기밀 정보 유출, 악성코드 삽입 등)을 시도하는 식입니다. 해킹 사례들을 얼핏 보면 다양한 경로를 통해 해킹이 이루어지는 것 같지만, 막상 분류를 정리해보면 이 분류를 크게 벗어나지 않습니다.</li>\n<li>1차 해킹인 외부망을 통한 위협에는 크게 웹 서버 해킹과 내부 PC 해킹이 있습니다.</li>\n<li>\n<p>현장에서의 웹 보안 요소 별 중요도 및 도입 순서</p>\n<ul>\n<li>웹방화벽 구축을 통해 개발 단계에서부터 미처 발견하지 못했던 애플리케이션의 내부 취약점이 외부에 노출되지 않도록 보호합니다.(웹방화벽 : 신규 위협요소 차단)</li>\n<li>외부의 침입이나 공격을 막아내는 것과 더불어 동시에 암호화를 통한 데이터 보안이 필요합니다. 내부적으로 존재하던 위협 또는 새로운 위협을 통해 데이터가 유출되더라도 암호화를 통해 2차 피해를 방지할 수 있습니다.(데이터 보안 : 데이터 유출 차단 및 2차 피해 방지)</li>\n<li>웹방화벽 구축과 데이터 보안을 적용하면 외부 침입으로부터의 웹 보안은 어느 정도 완비가 되었다고 봐도 무방합니다. 이제는 내부에 숨어있는 침입자가 없는지 확인(웹 서버 악성 코드탐지)하고, 외부에 금이 가있거나 하는 등의 취약한 부분은 없는지 점검(웹 스캐너)을 주기적이고 지속적으로 관리 해야 합니다.(악성코드 탐지 : 내부 위협요소 점검, 웹 취약점 탐지 : 외부 위협요소 점검)</li>\n<li>그리고 마지막 과제로서 시큐어 코딩이 남게 됩니다. 이번에는 이미 완공된 집에 대한 보안 대책을 세울 수 밖에 없었지만, 다음 집(애플리케이션)을 지을 때는 가능한 한 첫 설계 단계부터 보안을 고려하여 집을 지을 수 있도록 해야 한다. 물론, 설계부터 집이 완공되는 순간까지의 모든 경우의 수에 대해 보안을 고려하였다고 하더라도 새로운 형태의 외부 침입 등에 대해 대비해야 하므로 울타리(웹방화벽)와 금고(데이터보안), 내부 점검(악성코드탐지)과 외부 점검(웹 취약점 스캐너)은 이 경우에도 반드시 필요합니다.(시큐어 코딩 : 보안 설계)</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>진단 항목</th>\n<th>설명</th>\n<th>발생 원인</th>\n<th>위험성</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SQL Injection</td>\n<td>웹 애플리케이션에서 사용되는 SQL 구문에 공격자가 임의의 구문을 주입(Injection)하여 내부 데이터베이스의 데이터를 유출, 변조할 수 있는 취약점입니다.</td>\n<td>웹 페이지에서 사용자로부터 입력받은 값을 제대로 검사하지 않고 그대로 데이터 질의어로 사용할 경우 발생합니다.</td>\n<td>데이터 유출, 변조 외에도 서버에 파일을 쓰거나 읽을 수 있고, 직접 명령 실행도 가능할 수 있기 때문에 위험도가 높은 취약점입니다.</td>\n</tr>\n<tr>\n<td>XSS (Cross-Site Scripting)</td>\n<td>공격자가 웹 페이지에 악성 스크립트를 삽입할 수 있는 취약점입니다.</td>\n<td>웹 페이지에서 사용자로부터 입력받은 값을 제대로 검사하지 않고 사용할 경우 발생합니다.</td>\n<td>해커가 사용자의 정보(쿠키, 세션 등)를 탈취하거나, 자동으로 비정상적인 기능을 수행하게 할 수 있습니다.</td>\n</tr>\n<tr>\n<td>LFI (Local File Inclusion)</td>\n<td>웹 서버 내부에 위치한 악의적인 파일을 Include 하여 해당 파일을 실행하는 취약점입니다.</td>\n<td>include(), include_once(), require() 등과 같은 함수에 사용자로부터 입력받은 정보를 그대로 전달하는 경우에 발생합니다.</td>\n<td>해당 파일을 로드한 시스템에서 임의의 명령을 실행할 수 있기 때문에 위험도가 높은 취약점입니다.</td>\n</tr>\n<tr>\n<td>RFI (Remote File Inclusion)</td>\n<td>원격지의 공격자 서버에 위치한 악의적인 파일을 Include 하여 해당 파일을 실행하는 취약점입니다.</td>\n<td>include(), include_once(), require() 등과 같은 함수에 사용자로부터 입력받은 정보를 그대로 전달하는 경우에 발생합니다.</td>\n<td>해당 파일을 로드한 시스템에서 임의의 명령을 실행할 수 있기 때문에 위험도가 높은 취약점입니다.</td>\n</tr>\n<tr>\n<td>SSRF (Server-Side Request Forgery)</td>\n<td>웹 애플리케이션에서 사용자의 요청을 받아 다른 시스템에 접근하거나 요청을 수행하여 결과를 얻어오는 경우가 있습니다. 이때, 해당 웹 애플리케이션이 외부에서는 접근되지 않는 내부의 다른 서버로 요청하도록 개입하여 내부 서버가 의도하지 않은 행위를 하도록 하는 취약점입니다.</td>\n<td>사용자로부터 입력되는 데이터(도메인 등)에 대해 검증하는 절차가 부족하여 발생합니다.</td>\n<td>보안 장비를 우회하고 방화벽 뒤쪽 내부 시스템으로 공격 트래픽이나 추가적인 행위를 이어갈 수 있기 때문에 위험도가 높습니다.</td>\n</tr>\n<tr>\n<td>File Upload</td>\n<td>악의적인 스크립트 파일을 웹 서버에 업로드하여 접근할 경우 웹 서버 사용자 권한으로 실행이 되는 취약점입니다.</td>\n<td>업로드할 파일이 안전한지 검사하지 않아 발생합니다.</td>\n<td>환경마다 권한이 다를 수 있지만, 서버를 직접 컨트롤할 수 있어 서비스에 치명적인 영향을 줄 수 있습니다.</td>\n</tr>\n<tr>\n<td>File Download</td>\n<td>서버에 존재하는 파일이 의도하지 않게 클라이언트로 다운로드 되는 취약점입니다. 해커가 원하는 파일을 임의로 다운로드하거나 파일 내용을 노출시킬 수 있습니다.</td>\n<td>애플리케이션 로직에서 파일을 클라이언트로 다운로드할 때 입력 값 검증을 하지 않을 경우 발생합니다.</td>\n<td>공격자에게 권한이 없는 데이터를 획득할 수 있도록 하며, 시스템 정보 등 중요 파일을 획득할 수 있도록 합니다.</td>\n</tr>\n<tr>\n<td>XXE (XML External Entity)</td>\n<td>웹 애플리케이션에서 XML 데이터를 사용하는 경우, XML 문서에서 동적으로 외부 URI의 리소스를 포함시킬 수 있는 External Entity 기능을 악용하여 의도하지 않은 동작을 하도록 하는 취약점입니다.</td>\n<td>XML Request를 파싱하는 페이지에서 발생하며 사용자로부터 XML 데이터 전문을 받거나, DTD 정의가 가능한 경우 공격 가능합니다.</td>\n<td>서버의 로컬 파일 열람, denial of service 등을 유발할 수 있습니다.</td>\n</tr>\n<tr>\n<td>Command Injection</td>\n<td>공격자가 서버에 직접적으로 명령을 전달하고, 실행할 수 있는 취약점입니다.</td>\n<td>웹 애플리케이션에서 사용자로부터 입력받은 값을 시스템 함수에 사용할 때, 검증이 미흡한 경우 발생합니다.</td>\n<td>환경마다 권한이 다를 수 있지만, 서버를 직접 컨트롤할 수 있어 서비스에 치명적인 영향을 줄 수 있습니다.</td>\n</tr>\n<tr>\n<td>Insufficient Authorization</td>\n<td>일반적으로 사용자에게 노출되지 않아야 하는 특정 웹 애플리케이션에 대한 접근 가능 여부를 점검하는 항목입니다. ex) tomcat-admin, phpmyadmin, jenkins 등</td>\n<td>관리 또는 기타 다른 목적으로 사용되는 웹 애플리케이션에 대한 접근통제를 하지 않는 경우에 발생됩니다.</td>\n<td>공격자는 노출된 페이지로부터 정보를 수집하거나 추가적인 공격을 수행할 수 있습니다.</td>\n</tr>\n<tr>\n<td>Specific Vulnerabilities</td>\n<td>특정 애플리케이션과 관련된 파급력이 큰 취약점들에 대해 점검하는 항목입니다. ex) ShellShock (CVE-2014-6271) 등</td>\n<td>특정 애플리케이션의 알려진 버그가 조치되지 않을 경우 발생합니다.</td>\n<td>취약점마다 다르지만 원격 명령 실행, 시스템 메모리 탈취, 암호 키 탈취 등 서비스에 치명적인 영향을 줄 수 있습니다.</td>\n</tr>\n<tr>\n<td>File Management</td>\n<td>웹 서버를 운영하는데 불필요한 파일은 모두 삭제하거나 다른 시스템에서 관리되어야 합니다.</td>\n<td>관리가 미흡할 경우, 시스템 정보가 노출되고 추가 공격에 활용될 가능성이 있습니다.</td>\n<td>웹 서버 내의 모든 디렉터리 혹은 중요한 정보가 포함된 디렉터리에 대해 인덱싱이 가능하게 설정되어 디렉터리 내 파일 리스트가 노출될 수 있는 취약점입니다.</td>\n</tr>\n<tr>\n<td>Directory Listing</td>\n<td>웹 서버 내의 모든 디렉터리 혹은 중요한 정보가 포함된 디렉터리에 대해 인덱싱이 가능하게 설정되어 디렉터리 내 파일 리스트가 노출될 수 있는 취약점입니다.</td>\n<td>웹 서버의 설정에 의해 해당 기능이 활성화된 경우 발생합니다. 일부 애플리케이션의 버그로도 발생할 수 있습니다.</td>\n<td>공격자가 웹 응용시스템의 구조를 파악할 수 있으며, 민감한 정보가 포함된 설정 파일을 열람하여 다양한 공격을 시도할 수 있게 됩니다.</td>\n</tr>\n<tr>\n<td>Source Code Disclosure</td>\n<td>웹 서버가 스크립트 파일을 정상적으로 처리하지 못해 소스 코드가 그대로 노출되는 취약점입니다.</td>\n<td>웹 서버가 올바르게 스크립트 파일을 인식하지 못하거나, 애플리케이션 자체의 버그 등에 의해 발생합니다.</td>\n<td>공격자는 소스 코드를 획득하여 서버 내부의 디렉터리 경로, DB 연결정보, 애플리케이션 내부 로직 등 중요 정보들을 획득할 수 있습니다.</td>\n</tr>\n<tr>\n<td>Information Disclosure</td>\n<td>웹 서비스에서 서버 정보, 오류 정보 등 공격에 활용될 수 있는 정보가 노출되는 취약점입니다.</td>\n<td>웹 서버에서 발생하는 여러 가지 오류 메시지에 대한 처리나 서버 설정이 미흡하여 발생합니다.</td>\n<td>공격자가 웹 서버에 대한 서버 환경, 디렉터리 경로, 라이브러리 정보 등 다양한 정보를 수집할 수 있습니다.</td>\n</tr>\n<tr>\n<td>URL Redirection</td>\n<td>사용자가 의도하지 않은 페이지로 이동시킬 수 있는 취약점입니다.</td>\n<td>이동될 URL 이 올바른지 검증하지 않아 발생합니다.</td>\n<td>공격자는 사용자를 강제로 피싱 또는 악성코드 페이지로 이동시킬 수 있습니다.</td>\n</tr>\n<tr>\n<td>Insecure SSL/TLS</td>\n<td>안전하지 않은 SSL/TLS 버전 사용으로 인해 발생 가능한 취약점을 점검하는 항목입니다.</td>\n<td>취약한 SSL/TLS 버전 및 취약한 Cipher suites를 사용할 경우 관련 취약점이 발생합니다.</td>\n<td>보편적으로 공격자는 암호화된 데이터를 해독할 수 있는 MITM(Man-In-The-Middle) 공격이 가능하며, 서버에서 사용 중인 OpenSSL 버전에 따라 서버키 등 메모리에 포함된 중요한 정보가 유출될 수 있습니다.</td>\n</tr>\n<tr>\n<td>Mixed Content</td>\n<td>보호되어야 하는 중요한 콘텐츠가 HTTP를 사용해 전송되는 취약점입니다.</td>\n<td>HTTP와 HTTPS 프로토콜을 혼용하여 사용할 경우 발생합니다.</td>\n<td>HTTP 프로토콜을 사용하는 비암호화된 콘텐츠는 공격자가 수집 및 변조할 수 있습니다.</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"웹 애플리케이션이나 사이트를 만들 때 고려해야 할 Security","date":"July 18, 2020"}}},"pageContext":{"slug":"/frontend/웹-애플리케이션이나-사이트를-만들-때-고려해야-할-security/","previous":{"fields":{"slug":"/frontend/웹-애플리케이션이나-사이트를-만들-때-고려해야-할-performance/"},"frontmatter":{"title":"웹 애플리케이션이나 사이트를 만들 때 고려해야 할 Performance","category":"frontend","draft":false}},"next":null}}}