{"componentChunkName":"component---src-templates-tags-tsx","path":"/tags/design pattern/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"totalCount":4,"edges":[{"node":{"excerpt":"바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다 팩토리 패턴은 생성과 관련된 디자인 패턴입니다. 생성 패턴을 이용하면 되고, 하며, 이것이 되는지, 할 것인지 결정하는데 을 확보할 수 있게 됩니다. 생성 패턴은 인스턴스를 만드는 절차를 하는 패턴입니다. 생성 패턴은 시스템이 어떤 Concrete Class를 사용하는지에 대한 정보를 합니다. 생성 패턴은 시스템이 상속(inheritance…","fields":{"slug":"/design pattern/factory-pattern/"},"frontmatter":{"date":"30 <span> January </span>","title":"factory pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"객체의 행위를 클래스로 만들어 캡슐화 하는 패턴 커맨드 패턴은 행위에 대한 패턴입니다. 클래스와 객체들이 상호작용하는 방법 및 역할을 분담하는 방법과 관련된 패턴입니다. 한 객체가 혼자 수행할 수 없는 작업을 여러 개의 객체로 어떻게 하는지, 또 그렇게 하면서도 객체 사이의 하는 것에 중점을 둡니다. 템플릿 메소드, 인터프리터, 역할 변경, 비지터, , 스트래티지, 미디에이터, 이터레이터, 메멘토, 옵저버, 스테이트 등이 있습니다. 커맨드 패턴을 부르는 다양한 명칭 커맨드 패턴 명령 패턴 작동(Action…","fields":{"slug":"/design pattern/command-pattern/"},"frontmatter":{"date":"26 <span> January </span>","title":"command pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"중재자 패턴은 행동 패턴으로 분류 됩니다. 중재자 디자인 패턴은 유연하고 재사용 가능한 객체 지향 소프트웨어를 설계하기 위해 반복되는 디자인 문제를 해결하는 방법 2…","fields":{"slug":"/design pattern/mediator-pattern/"},"frontmatter":{"date":"25 <span> January </span>","title":"mediator-pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"복잡한 과장을 간단하게 표현하는 퍼사드 패턴 디자인 패턴 와 같은 확장성(Extensibility) 문제는 많은 디자인 패턴들이 해결하고자 하는 문제 중 하나입니다. 디자인 패턴에는 생성, 구조, 행위,…","fields":{"slug":"/design pattern/facade-pattern/"},"frontmatter":{"date":"23 <span> January </span>","title":"facade-pattern","category":"design pattern","tags":["design pattern"],"draft":false}}}]}},"pageContext":{"tag":"design pattern"}},"staticQueryHashes":["3128451518"]}