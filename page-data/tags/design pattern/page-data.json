{"componentChunkName":"component---src-templates-tags-tsx","path":"/tags/design pattern/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"totalCount":12,"edges":[{"node":{"excerpt":"Object Dependencies(객체 의존성) 현재 객체가 다른 객체와 상호작용(참조)하고 있다면 현재 객체는 다른 객체에 의존성을 가집니다. 하나의 모듈이 바뀌면 의존한 다른 모듈까지 변경 되어야 합니다. 또한 두 객체 사이의 의존성이 존재하면 Unit Test 작성이 어려워집니다. 은 서비스로 사용할 수 있는 객체입니다. Dependency Injection…","fields":{"slug":"/design pattern/dependency-injection-pattern/"},"frontmatter":{"date":"15 <span> April </span>","title":"dependency injection pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"생성 패턴 디자인 패턴 분류인 생성, 구조, 행위 중 객체 생성에 관련 된 으로 간주됩니다. 생성 패턴은 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공합니다. 단 의 인스턴스를 생성해 사용하는 디자인 패턴( 객체를 생성하는 방법) 애플리케이션이 시작될 때 어떤 클래스가  메모리를 할당하고(static…","fields":{"slug":"/design pattern/singleton-pattern/"},"frontmatter":{"date":"14 <span> April </span>","title":"singleton pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"디자인 패턴이란? 반복적으로 나타난 문제에 대해 그것을 해결한 경험 및 노하우를 축적하여  이름을 붙여 양식 입니다. 디자인 패턴은 크게 3가지 분류가 있습니다. 생성 패턴 : 객체 생성과 관련된 패턴 구조 패턴 : 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴 행위 패턴 : 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴 행위 소프트웨어 디자인 패턴 상태 패턴(state pattern…","fields":{"slug":"/design pattern/state-pattern/"},"frontmatter":{"date":"21 <span> March </span>","title":"state pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"전략 패턴(strategy pattern) 또는 정책 패턴(policy pattern…","fields":{"slug":"/design pattern/strategy-pattern/"},"frontmatter":{"date":"21 <span> March </span>","title":"strategy pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"빌더는 객체 패턴입니다. 객체 패턴(Object patterns)에서는 객체 사이의 관계를 다루며, 객체 상이의 관계는 보통 구성을 통해서 정의 됩니다. 객체 패턴에서는 일반적으로 실행 중에 관계가 생성되기 때문에 더 동적이고 유연 합니다. 빌더 패턴은 생성 패턴(Creational Pattern) 중 하나이다. 빌더 패턴은 싱글톤 패턴, 팩토리 패턴, 추상 팩토리 패턴과 마찬가지로 생성 패턴에 속합니다. 생성 패턴은 하는 패턴입니다. 생성 패턴에 속하는 패턴들은 을 해줍니다. 생성 패턴은 시스템이 상속(inheritance…","fields":{"slug":"/design pattern/builder-pattern/"},"frontmatter":{"date":"07 <span> March </span>","title":"builder pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"적응자 패턴 adapter란? adapter는 다른 전기나 기계 장치를 서로 연결해서 작동할 수 있도록 만들어 주는 결합 도구를 뜻합니다. 디자인 패턴 분류 디자인 패턴에는 생성, 구조, 행위, 3가지 분류가 있습니다. 어댑터 패턴은 에 대한 패턴입니다. 구조 패턴 구조 패턴이란 작은 클래스들을 과 을 이용하여 더 큰 클래스를 생성하는 방법을 제공하는 패턴입니다. 서로 독립적으로 개발한 클래스 라이브러리를 마치 처럼 사용할 수 있습니다. 또, 여러 인터페이스를 합성(Composite…","fields":{"slug":"/design pattern/adapter-pattern/"},"frontmatter":{"date":"28 <span> February </span>","title":"adapter pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"캡슐화를 위배하지 않은 채 내부 상태의 스냅샷을 찍는 패턴  어떤 객체의 내부 상태를 잡아내고 신체화시켜, 이후에 해당 객체가 그 상태로 다시 되돌아올 수 있도록 하는 패턴입니다. 메멘토 패턴은 객체의 상태 정보를 저장하고 사용자의 필요에 의하여 원하는 시점의 데이터를 복원(Rollback) 할 수 있는 패턴을 의미합니다. 객체를 이전의 상태로 복구시켜야 하는 경우에는 메멘토 패턴을 쓰면 됩니다. 예를 들어 사용자가 ‘직업 취소’를 요청하는 경우를 생각하면 됩니다. 커맨드 패턴의 undo…","fields":{"slug":"/design pattern/memento/"},"frontmatter":{"date":"21 <span> February </span>","title":"memento","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"상태 변화를 감시자에게 통지합니다. 옵저버 객체들은 주체 주제 객체에 등록되어 있으며 주체의 데이터가 바뀌면 갱신 내용을 전달 받습니다. 옵저버 패턴은 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-to-many) 의존성을 정의합니다. 다른 다른 명칭들은 무엇이 있을까요? 관찰자 패턴 종속자 패턴(dependent pattern) 게시-구독 패턴(publish-subscribe pattern) Pub/Sub…","fields":{"slug":"/design pattern/observer-pattern/"},"frontmatter":{"date":"08 <span> February </span>","title":"observer pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다 팩토리 패턴은 생성과 관련된 디자인 패턴입니다. 생성 패턴을 이용하면 되고, 하며, 이것이 되는지, 할 것인지 결정하는데 을 확보할 수 있게 됩니다. 생성 패턴은 인스턴스를 만드는 절차를 하는 패턴입니다. 생성 패턴은 시스템이 어떤 Concrete Class를 사용하는지에 대한 정보를 합니다. 생성 패턴은 시스템이 상속(inheritance…","fields":{"slug":"/design pattern/factory-pattern/"},"frontmatter":{"date":"30 <span> January </span>","title":"factory pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"객체의 행위를 클래스로 만들어 캡슐화 하는 패턴 커맨드 패턴은 행위에 대한 패턴입니다. 클래스와 객체들이 상호작용하는 방법 및 역할을 분담하는 방법과 관련된 패턴입니다. 한 객체가 혼자 수행할 수 없는 작업을 여러 개의 객체로 어떻게 하는지, 또 그렇게 하면서도 객체 사이의 하는 것에 중점을 둡니다. 템플릿 메소드, 인터프리터, 역할 변경, 비지터, , 스트래티지, 미디에이터, 이터레이터, 메멘토, 옵저버, 스테이트 등이 있습니다. 커맨드 패턴을 부르는 다양한 명칭 커맨드 패턴 명령 패턴 작동(Action…","fields":{"slug":"/design pattern/command-pattern/"},"frontmatter":{"date":"26 <span> January </span>","title":"command pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"중재자 패턴 중재자 패턴은 으로 분류 됩니다. 디자인 패턴 분류인 생성, 구조, 행위 중 프로그램의 실행 행위를 변경할 수 있기 때문에 으로 간주됩니다. 중재자 디자인 패턴은 유연하고 재사용 가능한 객체 지향 소프트웨어를 설계하기 위해 반복되는 디자인 문제를 해결하는 방법 23가지 입니다. GoF…","fields":{"slug":"/design pattern/mediator-pattern/"},"frontmatter":{"date":"25 <span> January </span>","title":"mediator-pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"복잡한 과장을 간단하게 표현하는 퍼사드 패턴 디자인 패턴 와 같은 확장성(Extensibility) 문제는 많은 디자인 패턴들이 해결하고자 하는 문제 중 하나입니다. 디자인 패턴에는 생성, 구조, 행위,…","fields":{"slug":"/design pattern/facade-pattern/"},"frontmatter":{"date":"23 <span> January </span>","title":"facade-pattern","category":"design pattern","tags":["design pattern"],"draft":false}}}]}},"pageContext":{"tag":"design pattern"}},"staticQueryHashes":["3128451518"]}