{"componentChunkName":"component---src-templates-blog-post-js","path":"/develop/프로그래밍-패러다임/","result":{"data":{"site":{"siteMetadata":{"title":"yuniq 블로그","author":"yuniq","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuniq","utterances":"yuniq"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"9b7874e3-6631-567f-a848-2c4cde43ad9b","excerpt":"명령형과 선언형의 차이 명령형 프로그래밍 명령형 프로그래밍이란 프로그래밍의 상태와 상태를 변경시키는 구문의 관점에서 연산을 설명하는 방식입니다. 알고리즘을 명시하고 목표는 명시하지 않습니다. 프로그램은 명령의 수행입니다. 어떻게(how to)에 초점을 맞춥니다. 튜링 머신에 이론적 배경을 둡니다. 선언형 프로그래밍 선언형 프로그래밍은 어떤 방법으로 해야하는지 나타내기보다는 무엇과 같은지를 설명하는 방식입니다. 알고리즘을 명시하지 않고 목표만 명시합니다. 프로그램은 함수의 계산입니다. 무엇(what…","html":"<h2 id=\"명령형과-선언형의-차이\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%ED%98%95%EA%B3%BC-%EC%84%A0%EC%96%B8%ED%98%95%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"명령형과 선언형의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령형과 선언형의 차이</h2>\n<h3 id=\"명령형-프로그래밍\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"명령형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령형 프로그래밍</h3>\n<ul>\n<li>명령형 프로그래밍이란 프로그래밍의 상태와 상태를 변경시키는 구문의 관점에서 연산을 설명하는 방식입니다.</li>\n<li>알고리즘을 명시하고 목표는 명시하지 않습니다.</li>\n<li>프로그램은 명령의 수행입니다.</li>\n<li>어떻게(how to)에 초점을 맞춥니다.</li>\n<li>튜링 머신에 이론적 배경을 둡니다.</li>\n</ul>\n<h3 id=\"선언형-프로그래밍\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"선언형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언형 프로그래밍</h3>\n<ul>\n<li>선언형 프로그래밍은 어떤 방법으로 해야하는지 나타내기보다는 무엇과 같은지를 설명하는 방식입니다.</li>\n<li>알고리즘을 명시하지 않고 목표만 명시합니다.</li>\n<li>프로그램은 함수의 계산입니다.</li>\n<li>무엇(what)에 초점을 맞춥니다.</li>\n<li>람다 계산식에 이룬적 배경을 둡니다.</li>\n</ul>\n<h2 id=\"절차적-프로그래밍과-객체지향-프로그래밍\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"절차적 프로그래밍과 객체지향 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차적 프로그래밍과 객체지향 프로그래밍</h2>\n<h3 id=\"절차적-프로그래밍procedural-programming\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8Dprocedural-programming\" aria-label=\"절차적 프로그래밍procedural programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차적 프로그래밍(Procedural Programming)</h3>\n<ul>\n<li>절차적으로 실행하는 프로그래밍이, 위에서 아래로 순서대로 실행하게 만드는 프로그래밍이라고 이해하기 쉬운데, 사실 모든 프로그래밍은 순서대로 실행됩니다.</li>\n<li>번역의 오류로 온 오개념인데, Procedural은 절차를 뜻하는 것이 아니라 절차형 프로그래밍에서 프로시저 호출의 개념을 바탕으로 하고 있기 때문에 여기서 Procedural이란 프로스의 Procedure을 의미합니다.</li>\n<li>프로시저는 루틴이나 하위프로그램, 메서드, 함수형 프로그래밍의 함수와도 같은 의미를 지니고 있는데, 리턴이 없는 함수 정도로 이해하면 좋습니다.</li>\n<li>모든 처리가 하나의 클래스 안에 위치하고 나머지 클래스는 단지 데이터의 역할만 수행합니다.</li>\n</ul>\n<h3 id=\"객체지향-프로그래밍object-oriented-programing\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8Dobject-oriented-programing\" aria-label=\"객체지향 프로그래밍object oriented programing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향 프로그래밍(Object Oriented Programing)</h3>\n<ul>\n<li>프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간이ㅡ 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍입니다.</li>\n<li>\n<p>객체지향 프로그래밍을 하기 위해서 <code class=\"language-text\">내적동질성</code>과 <code class=\"language-text\">대체가능성</code>을 지원해야 합니다.</p>\n<ul>\n<li>대체가능성은 부모의 타입을 자식 타입이 대신 할 수 있는 것입니다.</li>\n<li>내적 동질성은 상위의 메소드에서 다른 메소드를 부를 때 현재 객체가 오버라이드 했다면 현재 객체의 메소드를 부르게 되는 것입니다.</li>\n</ul>\n</li>\n<li>객체지향 프로그래밍을 하다보면 결합도와 자율성을 모두 만족시킬 방법이 잘 떠오르지 않는 트레이드오프 시점일 올 수 있습니다. 이 경우 자율성과 결합도 중에 하나를 선택해야 합니다.</li>\n<li>훌륭한 객체지향 설계란 협력하는 객체 사이의 의존성을 적절하게 관리하는 설계입니다. 세상에 객체가 실행되는 주변 환경에 강하게 결합될수록 변경하기 어려워집니다. 객체 간의 의존성은 애플리케이션을 수정하기 어렵게 만드는 주범입니다.</li>\n<li>데이터와 프로세스를 하나의 덩어리로 모으는 것은 훌륭한 객체지향 설계로 가는 첫걸음일 뿐입니다.</li>\n<li>진정한 객체지향 설계로 나아가는 길은 협력하는 객체들 사이의 의존성을 적절하게 조절함으로써 변경이 용이한 설계를 만드는 것입니다.</li>\n</ul>\n<h4 id=\"객체지향-프로그래밍의-장점-단점\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EC%9E%A5%EC%A0%90-%EB%8B%A8%EC%A0%90\" aria-label=\"객체지향 프로그래밍의 장점 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향 프로그래밍의 장점, 단점</h4>\n<h5 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h5>\n<ul>\n<li>캡슐화로 코드의 재사용성이 높습니다.</li>\n<li>코드의 변경이 용이합니다.</li>\n<li>직관적인 코드분석이 가능합니다.</li>\n<li>개발속도가 향상됩니다.</li>\n<li>상속을 통한 장점이 극대화 됩니다.</li>\n</ul>\n<h5 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h5>\n<ul>\n<li>처리속도가 상대적으로 느립니다.</li>\n<li>객체가 많으면 용량이 커질 수 있습니다.</li>\n<li>설계 시 상대적으로 많은 시간이 필요합니다.</li>\n</ul>\n<h4 id=\"객체지향-프로그래밍의-특징\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"객체지향 프로그래밍의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향 프로그래밍의 특징</h4>\n<ol>\n<li>추상화</li>\n<li>객체들의 공통적인 속성과 기능을 뽑아내는 작업, 즉 우리가 구현하는 객체들이 가진 공통적인 데이터와 기능을 묶어 이\b름을 붙이는 것을 말합니다.</li>\n<li>캡슐화</li>\n<li>\n<p>관련된 데이터와 함수들을 클래스라는 하나의 ‘캡슐’ 속에 그룹화시켜주는 것으로 외부에는 실제 구현 내요을 감춥니다.</p>\n<ul>\n<li>기능과 특성별로 한 곳에 모으고 분류하기 때문에 언제든지 쉽게 불러올 수 있는 재상용성</li>\n<li>외부에서는 ‘추상적인 것’으로 보이기에 정보 은닉화</li>\n</ul>\n</li>\n<li>상속</li>\n<li>상위 클래스의 데이터와 함수를 하위클래스가 물려받는 것을 말합니다. 하나의 클래스가 가지고 있는 데이터와 함수를 그대로 다른 클래스가 물려주고자 할 때 이를 이용합니다.</li>\n<li>상속 받은 것을 자식클래스에서 다시 재정의(오버라이딩)해서 사용하는 다형성과도 이어져 있습니다.</li>\n<li>다형성</li>\n<li>\n<p>하나의 클래스 내부에 같은 이름의 기능을 여러 개 정의하거나, 상위 클래스의 하위 클래스에서 다시 정할 수 있습니다.</p>\n<ul>\n<li>오버라이딩 : 부모클래스의 메서드오 같은 이름, 매개변수를 재정의 하는 것입니다.</li>\n<li>오버로딩 : 같은 이름의 함수를 여러개 정의하고, 매개변수의 타입과 개수를 다르게 하여 매개변수에 따라 다르게 호출할 수 있게 하는 것입니다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"함수형-프로그래밍\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"함수형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍</h2>\n<ul>\n<li>명령형 프로그래밍입니다.</li>\n<li>함수형 프로그래밍은 기존(일상 생활에 대응하기 위한 방법론과 패러다임)과 전혀 다른 사고방식이라는 것을 우선적으로 인지하고 받아 들여야 합니다.</li>\n<li>\n<p>모든 데이터는 불변상태(Immutable) 입니다.</p>\n<ul>\n<li>함수형 프로그래밍에서는 데이터가 변할 수 없는데, 이를 불변성 데이터라고 합니다. 데이터 변경이 필요한 경우, 원본 데이터 구조를 변경하지 않고 그 데이터를 복사본을 만들어 그 일부를 변경하고, 변경한 복사본을 사용해 작업을 진행합니다.</li>\n</ul>\n</li>\n<li>\n<p>함수는 순수 함수로 만듭니다.</p>\n<ul>\n<li>순수 함수란 동일 입력에 항상 값은 값을 반환해야하며 프로그램의 실행에 영향을 미치지 않는 함수(다른 말로 side effect가 없어야 한다는 것입니다.)를 뜻합니다.</li>\n</ul>\n</li>\n<li>\n<p>루프보다는 재귀를 사용합니다.</p>\n<ul>\n<li>for나 while 같은 루프보다는 함수안에 함수를 호출하는 재귀호출을 사용하는 방법을 사용합니다.</li>\n</ul>\n</li>\n<li>\n<p>코드를 간결하게 하고 가독성을 높여 로직에 집중시켜야 합니다.</p>\n<ul>\n<li>람다식이나 Collection과 같은 API를 통해 가독성을 높입니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"고민\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EB%AF%BC\" aria-label=\"고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고민</h2>\n<ul>\n<li>\n<p>리액트에서 함수형 컴포넌트도 추상화 된 클래스처럼 구현을 강제할 수 있는가?</p>\n<ul>\n<li>리액트를 사용하면서 리액트가 hooks를 발표하며 클래스 컴포넌트를 지양하고 함수형 컴포넌트 지향할 것을 권고합니다. 함수형 컴포넌트는 hooks에 의해 많은 발전을 해서 유용하지만 타입스크립과 클래스 컴포넌트를 함께 사용해 추상화를 통한 형식에 강제를 대신 할 방법은 아직 찾지 못했습니다. 무작정 최신 것만이 좋다고 생각하여 모든 것을 함수형 컴포넌트로 사용하고 싶었지만 회사에서 타입스크립트와 클래스 컴포넌트를 매우 유용하고 적절하게 사용하는 것을 보고 많은 생각을 하게 되었습니다. 자바스크립트(리액트)를 한다는 이유로 객체지향을 제대로 이해하지 못하고 좋은 것만 따라가려고 했기 때문에 문제가 많이 있었습니다. 우선 객체지향에 대해 조금 더 이해력을 높인 다음 함수형 프로그래밍에서 그것을 대체할 수 있는지에 대해 알아보는 것이 목표입니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://blog.metafor.kr/141\">객체 지향 프로그래밍이란 무엇인가</a></li>\n</ul>","frontmatter":{"title":"프로그래밍 패러다임","date":"March 18, 2020"}}},"pageContext":{"slug":"/develop/프로그래밍-패러다임/","previous":{"fields":{"slug":"/object/object-intro/"},"frontmatter":{"title":"object intro","category":"object","draft":false}},"next":null}}}