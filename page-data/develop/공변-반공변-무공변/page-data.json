{"componentChunkName":"component---src-templates-blog-post-js","path":"/develop/공변-반공변-무공변/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"ea673a6e-d995-53bc-bf9f-3c6dc2366316","excerpt":"공변성 : 타입 T를 확장한 타입에 대해서 허용합니다. 보통 인자는 공변성을 가집니다. 무공변성 : 타입 T만 허용합니다. 반공변성: 타입 T의 상위(부모) 타입에 대해서 허용합니다. 보통 리턴 타입은 반공변성을 가집니다. 참조 공변성과 반공변성, 무공변성","html":"<ul>\n<li>공변성 : 타입 T를 확장한 타입에 대해서 허용합니다. 보통 인자는 공변성을 가집니다.</li>\n<li>무공변성 : 타입 T만 허용합니다.</li>\n<li>반공변성: 타입 T의 상위(부모) 타입에 대해서 허용합니다. 보통 리턴 타입은 반공변성을 가집니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypedArray</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/**\n\t * 타입을 제한하는 배열인 TypedArray 생성자.\n\t * @param variance string 공변/반공변성. + 혹은 -, 공백으로 입력한다.\n\t * @param type class 제한하고자 하는 타입.\n\t */</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">variance<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/**\n\t\t * 공변/반공변 값을 넣지 않은 경우\n\t\t */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> variance<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>variance <span class=\"token operator\">=</span> variance<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">/**\n\t\t * 값이 타입에 대해 반공변성을 가졌는지 체크하는 함수.\n\t\t * @param value 추가하려는 값\n\t\t * @param type 확인할 타입\n\t\t * @returns {*}\n\t\t */</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">superTypeCheck</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> type<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">superTypeCheck</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/**\n\t\t * 값이 선언된 TypedArray 객체에서 허용하는 타입인지 검사하는 함수.\n\t\t * @param value 추가하려는 값\n\t\t * @returns {*} 추가할 수 있는지 여부\n\t\t */</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">typeCheck</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> typeOfValue <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> thisType <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>thisType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// primitive type</span>\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'number'</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'symbol'</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'string'</span><span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> typeOfValue <span class=\"token operator\">===</span> thisType<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>variance <span class=\"token operator\">===</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">this<span class=\"token punctuation\">.</span>type</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>variance <span class=\"token operator\">===</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">superTypeCheck</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> thisType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/**\n\t\t * 배열의 프로토타입을 복사한다.\n\t\t * 배열에 값을 추가하는 push, unshift 함수는 타입을 체크한다.\n\t\t */</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> field <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field <span class=\"token operator\">===</span> <span class=\"token string\">'push'</span> <span class=\"token operator\">||</span> field <span class=\"token operator\">===</span> <span class=\"token string\">'unshift'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">typeCheck</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'IllegalTypeException'</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">/**\n\t\t * 리스트를 반환하는 메소드\n\t\t * @returns {Array} 복사된 원본 리스트\n\t\t */</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 예시 클래스\n * People &lt;- Student &lt;- StudentPresident\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentPresident</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 객체 생성</span>\n<span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> studentPresident <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentPresident</span><span class=\"token punctuation\">(</span><span class=\"token string\">'quill'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 공변성 배열 테스트</span>\n<span class=\"token keyword\">const</span> varianceArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypedArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// varianceArr.push(people); // Exception!</span>\nvarianceArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvarianceArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>studentPresident<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 무공변성 배열 테스트</span>\n<span class=\"token keyword\">const</span> invarianceArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypedArray</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninvarianceArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exception!</span>\ninvarianceArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninvarianceArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>studentPresident<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exception!</span>\n\n<span class=\"token comment\">// 반공변성 배열 테스트</span>\n<span class=\"token keyword\">const</span> contravarianceArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypedArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontravarianceArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontravarianceArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// contravarianceArr.push(studentPresident); // Exception!</span></code></pre></div>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://partnerjun.tistory.com/78\">공변성과 반공변성, 무공변성</a></li>\n</ul>","frontmatter":{"title":"공변 반공변 무공변","date":"March 06, 2020"}}},"pageContext":{"slug":"/develop/공변-반공변-무공변/","previous":{"fields":{"slug":"/clean code/clean-code-5장-형식-맞추기/"},"frontmatter":{"title":"clean code 5장 형식 맞추기","category":"clean code","draft":false}},"next":{"fields":{"slug":"/clean code/clean-code-6장-객체와-자료-구조/"},"frontmatter":{"title":"clean code 6장 객체와 자료 구조","category":"clean code","draft":false}}}}}