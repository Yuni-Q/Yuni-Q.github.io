{"componentChunkName":"component---src-templates-blog-post-js","path":"/develop/동기-비동기/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"ab882f02-ef15-56ed-9347-a3a736d6adb4","excerpt":"SYNC / ASYNC return 한다면 SYNC, callback으로 응답한다면 ASYNC 입니다. Synchronous / Asynchronous는 호출되는 함수의 작업 완료 여부를 누가 신경쓰냐가 관심사 입니다. SYNC : 서브루틴이 즉시 값을 반환 합니다. 이벤트를 자신이 직접 처리 합니다.(확인의 주체가 유저 프로세스이며, 다 될때까지 기다리거나 스스로 확인 합니다.) Synchronous I/O…","html":"<h2 id=\"sync--async\" style=\"position:relative;\"><a href=\"#sync--async\" aria-label=\"sync  async permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SYNC / ASYNC</h2>\n<ul>\n<li>return 한다면 SYNC, callback으로 응답한다면 ASYNC 입니다.</li>\n<li>Synchronous / Asynchronous는 호출되는 함수의 작업 완료 여부를 누가 신경쓰냐가 관심사 입니다.</li>\n<li>\n<p>SYNC : 서브루틴이 즉시 값을 반환 합니다.</p>\n<ul>\n<li>이벤트를 자신이 직접 처리 합니다.(확인의 주체가 유저 프로세스이며, 다 될때까지 기다리거나 스스로 확인 합니다.)</li>\n<li>Synchronous I/O : 작업을 요청한 후 작업의 결과가 나올 때까지 기다린 후 처리 합니다.(프로세스는 커널에 지속적으로 I/O 준비사항을 체크 합니다.)</li>\n</ul>\n</li>\n<li>\n<p>ASYNC : 서브루틴이 콜백을 통해 값을 반환 합니다.</p>\n<ul>\n<li>이벤트 핸들러 (callback)에 의해 처리 합니다.(callback 함수가 호출되기까지 다른 작업 가능 합니다.)</li>\n<li>Asynchronous I/O : 직전 시스템 호출의 종료가 발생하면 그에 따른 처리를 진행 합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"block--non-block\" style=\"position:relative;\"><a href=\"#block--non-block\" aria-label=\"block  non block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BLOCK / NON BLOCK</h2>\n<ul>\n<li>주도권을 넘기면 BLOCK, 주도권을 넘지지 않으면 NON BLOCK 입니다.</li>\n<li>Blocking/NonBlocking은 호출되는 함수가 바로 리턴하느냐 마느냐가 관심사 입니다.</li>\n<li>\n<p>block : 완료까지 대기(리턴되기 전까지 멈춤) 합니다.</p>\n<ul>\n<li>Blocking I/O : 유저 프로세스가 시스템 호출을 하고나서 결과가 반환되기까지 다음 처리로 넘어가지 않습니다.</li>\n</ul>\n</li>\n<li>\n<p>non-block : 미완료라도 즉시 리턴 합니다.</p>\n<ul>\n<li>Non-Blocking I/O : 호출한 직후에 프로그램으로 제어가 돌아와서 시스템 호출의 종료를 기다리지 않고 다음 처리로 넘어갈 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sync-block\" style=\"position:relative;\"><a href=\"#sync-block\" aria-label=\"sync block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SYNC BLOCK</h2>\n<ul>\n<li>즉시 플로우제어권을 반환하지 않습니다.</li>\n<li>normalAPI, legacyAPI</li>\n<li>일반적인 생각하는 프로그램 동작입니다.</li>\n</ul>\n<h2 id=\"sync-non-block\" style=\"position:relative;\"><a href=\"#sync-non-block\" aria-label=\"sync non block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SYNC NON BLOCK</h2>\n<ul>\n<li>즉시 플로우 제어권을 반화합니다.</li>\n<li>oldAPI, IOCP, Future, complete</li>\n<li>event loop처럼 쓰레드가 묶여 있지 않고 그 동안 다른 작업을 하다가 callback이 오면 다시 플로우를 진행합니다.</li>\n</ul>\n<h2 id=\"async-block\" style=\"position:relative;\"><a href=\"#async-block\" aria-label=\"async block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ASYNC BLOCK</h2>\n<ul>\n<li>즉시 플로우 제어권을 반환하지 않습니다.</li>\n<li>TRAP</li>\n</ul>\n<h2 id=\"async-non-block\" style=\"position:relative;\"><a href=\"#async-non-block\" aria-label=\"async non block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ASYNC NON BLOCK</h2>\n<ul>\n<li>즉시 플로우 제어권을 반환 합니다.</li>\n<li>modernAPI</li>\n<li>ASYNC 함수를 부르고 다른 일을 하지 않고 작업을 계속 진행합니다.</li>\n</ul>\n<h2 id=\"카페에서-커피를-주문할-경우\" style=\"position:relative;\"><a href=\"#%EC%B9%B4%ED%8E%98%EC%97%90%EC%84%9C-%EC%BB%A4%ED%94%BC%EB%A5%BC-%EC%A3%BC%EB%AC%B8%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"카페에서 커피를 주문할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>카페에서 커피를 주문할 경우</h2>\n<ul>\n<li>1-1. 커피를 타달라는 요청이 왔다.</li>\n<li>2-1. 이 때 커피가 있으면 타준다(블로킹/넌블로킹 모두)</li>\n<li>2-2. 커피가 없는 경우 블로킹 : ‘잠깐만요’하고 사러 간다. / 넌블로킹 : 커피가 없다고 말하고 사러 간다.</li>\n<li>3-1. 동기 : 커피가 타졌는지 안타졌는지 내가 확인한다.</li>\n<li>3-2. 비동기 : 벨이 울리면 받으러 간다.</li>\n</ul>\n<h2 id=\"직렬serial-처리--동시cocurrent-처리\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EB%A0%ACserial-%EC%B2%98%EB%A6%AC--%EB%8F%99%EC%8B%9Ccocurrent-%EC%B2%98%EB%A6%AC\" aria-label=\"직렬serial 처리  동시cocurrent 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직렬(Serial) 처리 / 동시(cocurrent) 처리</h2>\n<ul>\n<li>직렬 처리 : 다른 한개의 쓰레드에서. (보통 메인에서) 분산처리 시킨 작업을 다른 한개의 쓰레드에서 처리 합니다.</li>\n<li>동시 처리 : 다른 여러개의 쓰레드에서. (보통 메인에서) 분산처리 시킨 작업을 다른 여러개의 쓰레드에서 처리 합니다.</li>\n<li>분선처리 하려는 것이라면 무조건 동시처리가 좋아보이는데 직렬 처리하는 이유는 작업의 순서가 필요할 수도 있기 때문입니다.</li>\n<li>직렬 처리는 순서가 중요한 작업을 처리할때 사용합니다.</li>\n<li>동시 처리는 각자 독립적이지만 중요도나 작업의 성격등 유사한 여러개의 작업을 처리할 때 사용합니다.</li>\n</ul>","frontmatter":{"title":"동기 비동기","date":"February 24, 2020"}}},"pageContext":{"slug":"/develop/동기-비동기/","previous":{"fields":{"slug":"/typescript/node-javascript에서-typescript로-바꾸기/"},"frontmatter":{"title":"Node javascript에서 typescript로 바꾸기","category":"typescript","draft":false}},"next":{"fields":{"slug":"/develop/repository와-dao/"},"frontmatter":{"title":"repository와 DAO","category":"develop","draft":false}}}}}