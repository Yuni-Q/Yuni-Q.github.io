{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/리액트에서-key를-사용하는-이유/","result":{"data":{"site":{"siteMetadata":{"title":"yuniq","author":"yuniq","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuniq","utterances":"yuniq"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"c60c77fc-8710-58b6-9e8c-57f3d633cec7","excerpt":"리액트는 배열을 렌더링 할 때 값을 통하여 업데이트 성능을 최적화 합니다. 기본적으로 DOM 노드의 자식에 대해 반복 할 때 React는 두 자식 목록을 동시에 반복하고 차이가있을 때마다 돌연변이를 생성합니다. 이 문제를 해결하기 위해 React는 key속성을 지원 합니다. 자식에 키가 있으면 React…","html":"<ul>\n<li>리액트는 배열을 렌더링 할 때 값을 통하여 업데이트 성능을 최적화 합니다.</li>\n<li>기본적으로 DOM 노드의 자식에 대해 반복 할 때 React는 두 자식 목록을 동시에 반복하고 차이가있을 때마다 돌연변이를 생성합니다.</li>\n<li>이 문제를 해결하기 위해 React는 key속성을 지원 합니다. 자식에 키가 있으면 React는이 키를 사용하여 원래 트리의 자식을 후속 트리의 자식과 일치 시킵니다.</li>\n<li>색인을 키로 사용하면 재정렬로 인해 구성 요소 상태에 문제가 발생할 수도 있습니다. 구성 요소 인스턴스는 해당 키를 기반으로 업데이트 및 재사용됩니다. 키가 색인 인 경우 항목을 이동하면 변경됩니다. 결과적으로 제어되지 않은 입력과 같은 구성 요소 상태가 예기치 않게 혼합되고 업데이트 될 수 있습니다.</li>\n<li>그렇기 때문에 key 값은 언제나 고유해야 합니다.</li>\n<li>키를 선택하는 가장 좋은 방법은 형제 중에서 목록 항목을 고유하게 식별하는 문자열을 사용하는 것입니다. 대부분의 경우 데이터의 ID를 키로 사용합니다.</li>\n<li>렌더링 된 항목에 대해 안정적인 ID가없는 경우 최후의 수단으로 항목 색인을 키로 사용할 수 있습니다.</li>\n</ul>","frontmatter":{"title":"리액트에서 key를 사용하는 이유","date":"January 18, 2020"}}},"pageContext":{"slug":"/react/리액트에서-key를-사용하는-이유/","previous":{"fields":{"slug":"/javascript/프로토타입-기반의-객체지향/"},"frontmatter":{"title":"프로토타입 기반의 객체지향","category":"javascript","draft":false}},"next":null}}}