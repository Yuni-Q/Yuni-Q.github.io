{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/typescript/타입스크립트-모델링/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"f19c3fb8-42c4-5c99-9b2d-8a6bc9224fae","excerpt":"타입스크립트의 타이핑 자바스크립트는 덕 타이핑(duck typing) 기반이고 타입스크립트가 이를 모델링하기 위해 을 사용합니다.  타입스크립트가 구조적 타이핑을 도입한 이유는 동적 타입 언어인 자바스크립트를 기반으로 하기 때문입니다. Java…","html":"<h2 id=\"타입스크립트의-타이핑\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9D%B4%ED%95%91\" aria-label=\"타입스크립트의 타이핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 타이핑</h2>\n<ul>\n<li>\n<p>자바스크립트는 덕 타이핑(duck typing) 기반이고 타입스크립트가 이를 모델링하기 위해 <code class=\"language-text\">구조적 타이핑</code>을 사용합니다. </p>\n<ul>\n<li>타입스크립트가 구조적 타이핑을 도입한 이유는 동적 타입 언어인 자바스크립트를 기반으로 하기 때문입니다.</li>\n<li>Java 기반의 객체지향에서는 <code class=\"language-text\">명목적 타이핑</code>을 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"구조적-타이핑이란\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%B4%EB%9E%80\" aria-label=\"구조적 타이핑이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조적 타이핑이란?</h2>\n<ul>\n<li>구조적 타이핑은 값 자체의 타입보다는 값이 가진 내부 구조에 기반해서 타입 호환성을 검사한다.</li>\n<li>좋든 싫든 타입은 열려있습니다.</li>\n<li>\n<p>타입스크립트의 클래스 역시 구조적 타이핑 규칙을 따릅니다. </p>\n<ul>\n<li>클래스의 인스턴스가 Java 기반의 객체지향과 다를 수 있습니다.</li>\n</ul>\n</li>\n<li>어떤 인터페이스에 할당 가능한 값이라면 타입 선언에 명시적으로 나열된 속성들을 가지고 있을 겁니다. 타입은 <code class=\"language-text\">봉인</code>되어 있지 않습니다.</li>\n<li>추가 속성이 있으면 값의 집합은 더 작아집니다.</li>\n<li>반대로 유니온 타입이 있으면 값의 집합은 더 커집니다.</li>\n</ul>\n<h3 id=\"내부-구조만-같다면-타입은-동일한-것으로-판단합니다\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0%EB%A7%8C-%EA%B0%99%EB%8B%A4%EB%A9%B4-%ED%83%80%EC%9E%85%EC%9D%80-%EB%8F%99%EC%9D%BC%ED%95%9C-%EA%B2%83%EC%9C%BC%EB%A1%9C-%ED%8C%90%EB%8B%A8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"내부 구조만 같다면 타입은 동일한 것으로 판단합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내부 구조만 같다면 타입은 동일한 것으로 판단합니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassA</span> <span class=\"token punctuation\">{</span>\n  str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> classA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassA</span><span class=\"token punctuation\">(</span><span class=\"token string\">'instance of A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> objectB<span class=\"token operator\">:</span> ClassA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> str<span class=\"token operator\">:</span> <span class=\"token string\">'object literal'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ---</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">clap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">clap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">clap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">clap</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">clap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"인터페이스의-이름이-달라도-내부-구조가-같다면-할당-가능합니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EB%8B%AC%EB%9D%BC%EB%8F%84-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0%EA%B0%80-%EA%B0%99%EB%8B%A4%EB%A9%B4-%ED%95%A0%EB%8B%B9-%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"인터페이스의 이름이 달라도 내부 구조가 같다면 할당 가능합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스의 이름이 달라도 내부 구조가 같다면 할당 가능합니다.</h3>\n<ul>\n<li><code class=\"language-text\">이는 Java 기반의 객체지향과의 큰 차이점이며 우리가 구조적 타이핑을 잘 이해하고 사용해야 하는 이유</code> 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector1D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nv1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n<h3 id=\"타입스크립트는-구조적-타이핑덕-타이핑을-사용하기-때문에-값을-세밀하게-구분하지-못하는-경우가-있습니다\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EB%8D%95-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EB%95%8C%EB%AC%B8%EC%97%90-%EA%B0%92%EC%9D%84-%EC%84%B8%EB%B0%80%ED%95%98%EA%B2%8C-%EA%B5%AC%EB%B6%84%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EA%B0%80-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"타입스크립트는 구조적 타이핑덕 타이핑을 사용하기 때문에 값을 세밀하게 구분하지 못하는 경우가 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트는 구조적 타이핑(덕 타이핑)을 사용하기 때문에, 값을 세밀하게 구분하지 못하는 경우가 있습니다</h3>\n<ul>\n<li>값을 구분하기 위해 공식 명칭이 필요하다면 상표를 붙이는 것을 고려해야 합니다.</li>\n<li>상표 기법은 타입 시스템에서 동작하지만 런타임에 상표를 검사하는 것과 동일한 효과를 얻을 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Meters</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> _brand<span class=\"token operator\">:</span> <span class=\"token string\">'meters'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Seconds</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> _brand<span class=\"token operator\">:</span> <span class=\"token string\">'seconds'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">meters</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> m <span class=\"token keyword\">as</span> Meters<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">seconds</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s <span class=\"token keyword\">as</span> Seconds<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> oneKm <span class=\"token operator\">=</span> <span class=\"token function\">meters</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Meters</span>\n<span class=\"token keyword\">const</span> oneMin <span class=\"token operator\">=</span> <span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Seconds</span></code></pre></div>\n<h3 id=\"상속을-받은-것과-나열한-것-역시-내부-구조가-같다면-동일한-것으로-판단-합니다\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D%EC%9D%84-%EB%B0%9B%EC%9D%80-%EA%B2%83%EA%B3%BC-%EB%82%98%EC%97%B4%ED%95%9C-%EA%B2%83-%EC%97%AD%EC%8B%9C-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0%EA%B0%80-%EA%B0%99%EB%8B%A4%EB%A9%B4-%EB%8F%99%EC%9D%BC%ED%95%9C-%EA%B2%83%EC%9C%BC%EB%A1%9C-%ED%8C%90%EB%8B%A8-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"상속을 받은 것과 나열한 것 역시 내부 구조가 같다면 동일한 것으로 판단 합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속을 받은 것과 나열한 것 역시 내부 구조가 같다면 동일한 것으로 판단 합니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector1D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vector2D는 Vector1D의 서브타입입니다.</span>\n<span class=\"token comment\">// Vector2D와 Vector2D2는 타입스크립트의 구조적 타이핑에서 동일합니다.</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vector1D</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D2</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// Vector3D는 Vector2D의 서브타입입니다.</span>\n<span class=\"token comment\">// Vector3D와 Vector3D2는 타입스크립트의 구조적 타이핑에서 동일합니다.</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector3D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  z<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector3D2</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"구조적-타이핑은-잉여-속성-체크에-한계가-있습니다\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%80-%EC%9E%89%EC%97%AC-%EC%86%8D%EC%84%B1-%EC%B2%B4%ED%81%AC%EC%97%90-%ED%95%9C%EA%B3%84%EA%B0%80-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"구조적 타이핑은 잉여 속성 체크에 한계가 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조적 타이핑은 잉여 속성 체크에 한계가 있습니다.</h3>\n<ul>\n<li><code class=\"language-text\">객체 리터럴 변수에 할당</code>하거나 <code class=\"language-text\">함수에 매개변수로 전달</code>할 때 <code class=\"language-text\">잉여 속성 체크</code>가 수행됩니다.</li>\n<li>잉여 속성 체크는 오류를 찾는 효과적인 방법이지만, 타입스크립트 타입 체커가 수행하는 일반적인 구조적 할당 가능성 체크와 역할이 다릅니다. 할당의 개념을 정확히 알아야 잉여 속성 체크와 일반적인 구조적 할당 가능성 체크를 구분할 수 있습니다.</li>\n<li>잉여 속성 체크는 구조적 타이핑 시스템에서 허용되는 속성 이름의 오타 같은 실수를 잡는 데 효과적인 방법입니다. 선택적 필드를 포함하는 타입에 특히 유용한 반면, 적용 범위도 매우 제한적이며 <code class=\"language-text\">오직 객체 리터럴에만 적용됩니다</code>.</li>\n<li>잉여 속성 체크에는 한계가 있습니다. <code class=\"language-text\">임시 변수를 도입하면 잉여 속성 체크를 건너뛸 수 있다</code>는 점을 기억해야 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector1D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vector1D</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> Vector1D <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">:</span> Vector2D <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nv1 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nv2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Property 'y' is missing in type 'Vector1D' but required in type 'Vector2D'.(2741)</span>\n\n<span class=\"token comment\">// ---</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// '{ a: string; b: string; c: string; }' 형식은 'A' 형식에 할당할 수 없습니다. 개체 리터럴은 알려진 속성만 지정할 수 있으며 'A' 형식에 'c'이(가) 없습니다.ts(2322)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n<h2 id=\"그렇다면-타입을-어떻게-사용해야-할까요\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%ED%83%80%EC%9E%85%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C%EC%9A%94\" aria-label=\"그렇다면 타입을 어떻게 사용해야 할까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 타입을 어떻게 사용해야 할까요?</h2>\n<ul>\n<li>\n<p>공통적인 것을 원본 모델로 만들고 이를 유틸리티 타입을 활용해서 파생된 타입을 사용합니다.</p>\n<ul>\n<li>타입스크립트는 절충하는 언어입니다.</li>\n<li>원본 타입과 유틸타입의 조합으로 타입이 많아지는 것을 방지합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"리액트에서-컴포넌트를-만드는-것처럼-타이핑을-해보겠습니다\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%EA%B2%83%EC%B2%98%EB%9F%BC-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%84-%ED%95%B4%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"리액트에서 컴포넌트를 만드는 것처럼 타이핑을 해보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트에서 컴포넌트를 만드는 것처럼 타이핑을 해보겠습니다.</h3>\n<ul>\n<li>\n<p>원본 모델(인터페이스)과 타입 레이어의 분리합니다.</p>\n<ul>\n<li>interface는 병합이 가능하다는 특징을 활용해 외부와의 소통에 활용합니다. 사용하는 곳에서 필요에 따라 유틸리티 타입 혹은 병합 성질을 활용해서 사용합니다.</li>\n<li>type은 파일 내에서 interface를 활용해서 만들어서 사용합니다.</li>\n</ul>\n</li>\n<li>원본 모델은 css-in-js나 custom hook에서 거의 같지만 조금 다르게 활용되는 경우가 많습니다. 보통 Component의 props에서는 optional인 값이 css-in-js로 넘어갈 때는 필수값이 됩니다. 이를 위해 타입을 2번 만드는 것이 아니라 원본 모델과 유틸리티 타입을 활용해 타입을 여러개 만들지 않고 유지보수성도 향상 시킬 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 원본 모델(외부와 소통 및 공개용)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TextProps</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    placeholder<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    border<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 내부 소모용</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TextPropsMustBe</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>TextProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'border'</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TextPropsPartialType</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>TextProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> TextPropsMustBe\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TextContainerProps</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>TextProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// Component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TextComponent</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> TextPropsPartialType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">string</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> passedProps <span class=\"token operator\">=</span> <span class=\"token function\">useText</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">TextContainer</span><span class=\"token punctuation\">(</span>passedProps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// css-in-js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TextContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> TextContainerProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// custom hook</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useText</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> TextPropsPartialType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TextPropsMustBe <span class=\"token operator\">&amp;</span> TextContainerProps <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>border\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 실제 사용</span>\n<span class=\"token function\">TextComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> border<span class=\"token operator\">:</span> <span class=\"token string\">'1px solid black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://vallista.kr/\">마광휘님의 설명</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9D%B4%ED%95%91\">타입스크립트의 타이핑</a></li>\n<li>\n<p><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%B4%EB%9E%80\">구조적 타이핑이란?</a></p>\n<ul>\n<li><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0%EB%A7%8C-%EA%B0%99%EB%8B%A4%EB%A9%B4-%ED%83%80%EC%9E%85%EC%9D%80-%EB%8F%99%EC%9D%BC%ED%95%9C-%EA%B2%83%EC%9C%BC%EB%A1%9C-%ED%8C%90%EB%8B%A8%ED%95%A9%EB%8B%88%EB%8B%A4\">내부 구조만 같다면 타입은 동일한 것으로 판단합니다.</a></li>\n<li><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EB%8B%AC%EB%9D%BC%EB%8F%84-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0%EA%B0%80-%EA%B0%99%EB%8B%A4%EB%A9%B4-%ED%95%A0%EB%8B%B9-%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4\">인터페이스의 이름이 달라도 내부 구조가 같다면 할당 가능합니다.</a></li>\n<li><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EB%8D%95-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EB%95%8C%EB%AC%B8%EC%97%90-%EA%B0%92%EC%9D%84-%EC%84%B8%EB%B0%80%ED%95%98%EA%B2%8C-%EA%B5%AC%EB%B6%84%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EA%B0%80-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">타입스크립트는 구조적 타이핑(덕 타이핑)을 사용하기 때문에, 값을 세밀하게 구분하지 못하는 경우가 있습니다</a></li>\n<li><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%EC%83%81%EC%86%8D%EC%9D%84-%EB%B0%9B%EC%9D%80-%EA%B2%83%EA%B3%BC-%EB%82%98%EC%97%B4%ED%95%9C-%EA%B2%83-%EC%97%AD%EC%8B%9C-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0%EA%B0%80-%EA%B0%99%EB%8B%A4%EB%A9%B4-%EB%8F%99%EC%9D%BC%ED%95%9C-%EA%B2%83%EC%9C%BC%EB%A1%9C-%ED%8C%90%EB%8B%A8-%ED%95%A9%EB%8B%88%EB%8B%A4\">상속을 받은 것과 나열한 것 역시 내부 구조가 같다면 동일한 것으로 판단 합니다.</a></li>\n<li><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%80-%EC%9E%89%EC%97%AC-%EC%86%8D%EC%84%B1-%EC%B2%B4%ED%81%AC%EC%97%90-%ED%95%9C%EA%B3%84%EA%B0%80-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">구조적 타이핑은 잉여 속성 체크에 한계가 있습니다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%ED%83%80%EC%9E%85%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C%EC%9A%94\">그렇다면 타입을 어떻게 사용해야 할까요?</a></p>\n<ul>\n<li><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%EA%B2%83%EC%B2%98%EB%9F%BC-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%84-%ED%95%B4%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">리액트에서 컴포넌트를 만드는 것처럼 타이핑을 해보겠습니다.</a></li>\n</ul>\n</li>\n<li><a href=\"/typescript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%8D%B8%EB%A7%81/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","frontmatter":{"title":"타입스크립트 모델링","date":"February 07, 2022"}}},"pageContext":{"slug":"/typescript/타입스크립트-모델링/","previous":{"fields":{"slug":"/javascript/prototype/"},"frontmatter":{"title":"prototype","category":"javascript","tags":[],"draft":false}},"next":{"fields":{"slug":"/객체지향의 사실과 오해/부록a-추상화-기법/"},"frontmatter":{"title":"부록A 추상화 기법","category":"객체지향의 사실과 오해","tags":[],"draft":false}},"tag":[]}},"staticQueryHashes":["3128451518","96099027"]}