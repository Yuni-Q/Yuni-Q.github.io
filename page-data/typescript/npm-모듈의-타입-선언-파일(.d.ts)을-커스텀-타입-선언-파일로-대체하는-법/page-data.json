{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/npm-모듈의-타입-선언-파일(.d.ts)을-커스텀-타입-선언-파일로-대체하는-법/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"148130d4-b2e9-5ad6-b5e8-46c80465b224","excerpt":"원본 .d.ts 파일이 node_modules 아래에 있을 경우 컴파일러는 src/index.ts에서 non-relative module import구문을 발견하여 moduleA모듈에 대한 타입 선언 파일을 탐색하기 시작합니다. compilerOptions.path에 moduleA에 대한 경로 설정이 존재하므로 해당 경로를 우선 탐색합니다. 경로에서 .d.ts파일을 찾았으므로 탐색을 종료하고, myDeclaration.d.ts…","html":"<h2 id=\"원본-dts-파일이-node_modules-아래에-있을-경우\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EB%B3%B8-dts-%ED%8C%8C%EC%9D%BC%EC%9D%B4-node_modules-%EC%95%84%EB%9E%98%EC%97%90-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"원본 dts 파일이 node_modules 아래에 있을 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원본 .d.ts 파일이 node_modules 아래에 있을 경우</h2>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token property\">\"moduleA\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/@types/myDeclaration.d.ts\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>컴파일러는 src/index.ts에서 non-relative module import구문을 발견하여 moduleA모듈에 대한 타입 선언 파일을 탐색하기 시작합니다.</li>\n<li>compilerOptions.path에 moduleA에 대한 경로 설정이 존재하므로 해당 경로를 우선 탐색합니다.</li>\n<li>경로에서 .d.ts파일을 찾았으므로 탐색을 종료하고, myDeclaration.d.ts파일 내의 모듈 타입 선언을 앰비언트 모듈 선언 목록에 추가합니다.</li>\n</ol>\n<h3 id=\"원본-dts-파일이-node_modulestypes-아래에-있을-경우\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EB%B3%B8-dts-%ED%8C%8C%EC%9D%BC%EC%9D%B4-node_modulestypes-%EC%95%84%EB%9E%98%EC%97%90-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"원본 dts 파일이 node_modulestypes 아래에 있을 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원본 .d.ts 파일이 node_modules/@types 아래에 있을 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token property\">\"moduleB\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/@types/myDeclaration.d.ts\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 빈 배열을 적용한다</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>compilerOptions.types에 값이 지정되었으므로, node_modules/@types디렉토리 내의 모듈에 대한 자동 포함이 동작하지 않습니다.</li>\n<li>이 다음은 moduleA를 불러올 때와 동일하게 동작합니다.</li>\n<li>만일 types에 값이 지정되지 않는다면 node_modules/@types 아래의 moduleB에 대한 타입 선언이 자동으로 포함되어 중복 선언 컴파일 에러가 발생할 것입니다.</li>\n</ol>","frontmatter":{"title":"npm 모듈의 타입 선언 파일(.d.ts)을 커스텀 타입 선언 파일로 대체하는 법","date":"March 26, 2020"}}},"pageContext":{"slug":"/typescript/npm-모듈의-타입-선언-파일(.d.ts)을-커스텀-타입-선언-파일로-대체하는-법/","previous":{"fields":{"slug":"/develop/github-education-name.com-사용하기/"},"frontmatter":{"title":"github education name.com 사용하기","category":"develop","draft":false}},"next":{"fields":{"slug":"/develop/node-https-적용/"},"frontmatter":{"title":"node https 적용","category":"develop","draft":false}}}}}