{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"site":{"siteMetadata":{"keywords":["blog"],"title":"yuni-q 블로그","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"1. 왜 가설사고가 필요한가 문제 해결 속도가 눈에 띄게 빨라진다 가설사고는 해답부터 생각하는 것이다. 가장 좋은 해답을 가장 짧은 시간에 찾아내는 방법이라고 말할 수도 있다. 일단 해답을 내놓고 그것을 분해서해서 증명한다. 일을 시작하기 전에 가설을 세우면 무엇을 해야 할지 그 대상이 분명해지고 논점도 좀 더 깊이 생각할 수 있다. 보는 것만으로 해답을…","fields":{"slug":"/가설이 무기가 된다/1장-일단,-가설이-있어야-한다/"},"frontmatter":{"date":"April 20, 2024","title":"1장 일단, 가설이 있어야 한다","category":"가설이 무기가 된다","tags":[],"draft":false}}},{"node":{"excerpt":"정보가 많으면 올바른 의사결정을 할 수 있을까? 사람이 비즈니스에서 모든 것을 조사한다는 진행방식을 활용해서는 바람직한 결과를 얻을 수 없다 이른 단계에서 가설을 세울 수 있으면 좋은 결과를 얻는다 일처리가 빠른 사람은 한정된 정보를 토대로 다른 사람보다 빠르고 정확하게 문제점을 발견할 수 있고, 해결책과 연결 할 수 있는 사고법을 갖추고 있다. 가설은 …","fields":{"slug":"/가설이 무기가 된다/0장(서장)-가설사고란-무엇인가/"},"frontmatter":{"date":"April 20, 2024","title":"0장(서장) 가설사고란 무엇인가","category":"가설이 무기가 된다","tags":[],"draft":false}}},{"node":{"excerpt":"내향인도 발표 고수로 만드는 직장인의 발표 스킬 10가지 회의, 보고, 발표할 때 바로 써먹는 회사어 전략 - 직장인의 말하기3 [실전편] 회사어도 외국어다: 0개 국어 탈출을 위한 직장인의 말하기1 [이론편] 회사어 완전 정복! 4주 커리큘럼 - 직장인의 말하기2 [연습편] 발표의 기본은 말하기와 태도 1. 회의, 보고, 발표할 때 바로 써먹는 회사어 …","fields":{"slug":"/docs/내향인도-발표-고수로-만드는-직장인의-발표-스킬-10가지/"},"frontmatter":{"date":"April 15, 2024","title":"내향인도 발표 고수로 만드는 직장인의 발표 스킬 10가지","category":"docs","tags":[],"draft":false}}},{"node":{"excerpt":"지은이 서문 이펙티브 엔지니어란 어떤 개발자일까? 효울적으로 임무를 완수하는 사람 가치와 효과를 내는 데 집중하며 어떤 성과를 낼지 선택할 줄도 아는 사람 일한 시간당 생산하는 가치의 비율로 정의된다. 이 책에서 배우는 내용 효율성에서 매우 중요하지만 개발자들이 종종 간과하는 것이 이다. 메타 기술은 시간과 에너지를 어디에 집중해야 들어간 노력에 대비 더…","fields":{"slug":"/이펙티브 엔지니어/0장-글/"},"frontmatter":{"date":"January 17, 2024","title":"0장 글","category":"이펙티브 엔지니어","tags":["이펙티브"],"draft":false}}},{"node":{"excerpt":"이 장에서는 다음과 같은 내용을 다룬다. 좋은 이름 짓기에 대한 여러 가지 관점의 비교 이름과 인지 과정 간의 관계 파악 다양한 명명법의 효과 잘못된 이름이 버그 및 오류에 미치는 영향 변수 이름을 구조화하여 이해도를 극대화하는 방법 서론 8장부터는 코드를 작성하는 과정을 살펴본다. 좋은 이름을 사용하면 LTM을 활성화하여 코드 도메인에 대해 이미 알고 …","fields":{"slug":"/프로그래머의 뇌/08장-명명을-잘하는-방법/"},"frontmatter":{"date":"December 11, 2022","title":"08장 명명을 잘하는 방법","category":"프로그래머의 뇌","tags":[],"draft":false}}},{"node":{"excerpt":"신입 개발자를 효과적으로 온보딩한다면 직접 만든 어떤 코드보다 더 큰 효과를 낼 것이다. 레버리지를 효과성의 측정 기준으로 삼아라 레버리지란 투자한 시간당 생산한 가치, 또는 효과이다. 레버리지 = 생산한 효과 / 투자한 시간 레버리지는 투입한 노력에 대한 이다. 이펙티브 엔지니어는 업무를 효율적으로 완수하고, 제한된 시간에 더 많은 가치를 생산한다. 레…","fields":{"slug":"/이펙티브 엔지니어/1장-레버리지가-높은-활동에-집중하라/"},"frontmatter":{"date":"September 04, 2022","title":"1장 레버리지가 높은 활동에 집중하라","category":"이펙티브 엔지니어","tags":["Part1 올바른 마인드셋을 갖춰라"],"draft":false}}},{"node":{"excerpt":"TL;DR 2장에서는 책임을 중심으로 설계된 객체지향 코드의 대력적인 모양을 살펴봅니다. 객체지향 프로그래밍에서 사용되는 다양한 요소와 개념을 이해하게 됩니다. 01. 영화 예매 시스템 요구사항 살펴보기 02 객체지향 프로그래밍을 향해 협력, 객체, 클래스 입니다. C++, 자바, 루비, C#과 같이 클래스 기반의 객체지향 언어에 익숙한 사람이라면 가장 …","fields":{"slug":"/오브젝트/02-객체지향-프로그래밍/02-객체지향-프로그래밍/"},"frontmatter":{"date":"April 17, 2022","title":"02 객체지향 프로그래밍","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"1급 객체의 조건 3가지 변수나 데이타에 할당 할 수 있어야 합니다. 객체의 인자로 넘길 수 있어야 합니다. 객체의 리턴값으로 리턴 할수 있어야 합니다. 자바에서의 1급 객체란? JAVA에서는 함수가 1급 객체에 해당하지 않습니다. Kotlin, JavaScript 등의 언어에서는 변수에 함수를 할당하고 사용할 수 있지만 JAVA는 불가능합니다. JAVA…","fields":{"slug":"/develop/first-class-citizen/"},"frontmatter":{"date":"April 14, 2022","title":"First-class citizen","category":"develop","tags":[],"draft":false}}},{"node":{"excerpt":"TL;DR 책임 주도 설계 방법에 관해서 소개합니다. 객체지향 패러다임의 관점에서 핵심은 클래스나 상속이 아니라 , , 입니다. 이 세 요소가 조화를 이루고 균형을 맞추도록 설계를 이끄는 것이 중요합니다. 객체지향의 본질은 협력하는 객체들의 공동체를 창조하는 것입니다. 객체지향 설계의 핵심은 협력을 구성하기 위해 적절한 객체를 찾고 적절한 책임을 할당하는…","fields":{"slug":"/오브젝트/03-역할,-책임,-협력/"},"frontmatter":{"date":"April 11, 2022","title":"03 역할, 책임, 협력","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"TL;DR 절차적 프로그래밍 방식으로 구현해보고 이렇게 구현된 코드의 품질이 나쁜 이유를 설명합니다. 품질을 평가하기 위해 사용할 수있는 척도인 캡슐화, 응집도, 결합도의 개념도 함께 소개합니다. 4장에서는 역할, 책임, 협력이 아닌 데이터에 초점을 맞출 때 어떤 문제점이 발생하는지에 관해 살펴봅니다. 객체지향 설계의 핵심은 역할, 책임, 협력입니다. 협…","fields":{"slug":"/오브젝트/04-설계-품질과-트레이드오프/"},"frontmatter":{"date":"April 11, 2022","title":"04 설계 품질과 트레이드오프","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"TL;DR GRASP라고 부르는 책임 할당 패턴을 설명합니다. 2장에서 소개한 영화 예매 시스템의 설계를 책임 할당의 관점에서 설명하고 4장에서 구현한 절차적 프로그래밍 방식과 비교합니다. 책임을 중심으로 설계를 이끌어가는 것이 캡슐화, 응집도, 결합도의 관점에서 설계를 개선한다는 사실을 이해하게 될 것입니다. 5장에서는 2장에서 소개한 코드의 설계 과정…","fields":{"slug":"/오브젝트/05-책임-할당하기/"},"frontmatter":{"date":"April 11, 2022","title":"05 책임 할당하기","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"TL;DR 추상화의 한 가지 방법인 분해의 역사를 다룹니다. 프로시저 추상화와 데이터 추상화 사이의 갈등과 분쟁의 역사를 이해하면 기능 분해에서 시작해서 객체지향에 이르기까지 소프트웨어 패러다임의 변화를 자연스럽게 이해하게 될 것입니다. 사람이 동시에 단기 기억 안에 저장할 수 있는 정보의 개수는 5개에서 많아 봐야 9개 정도를 넘지 못합니다. 새운 정보…","fields":{"slug":"/오브젝트/07-객체-분해/"},"frontmatter":{"date":"April 11, 2022","title":"07 객체 분해","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"TL;DR 훌륭한 퍼블릭 인터페이스를 작성하기 위해 따라야 하는 설계 원칙을 소개합니다. 디미터 법칙, 묻지말고 시켜라, 의도를 드러내는 인터페이스, 명령-쿼리 분리 원칙을 조합하면 직관적이고, 예측 가능하며, 유연한 퍼블릭 인터페이스를 창조할 수 있는 사실을 알게 될 것입니다. Intro 객체지향 프로그래밍에 대한 가장 흔한 오해는 애플리케이션이 클래스…","fields":{"slug":"/오브젝트/06-메시지와-인터페이스/"},"frontmatter":{"date":"April 11, 2022","title":"06 메시지와 인터페이스","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"TL;DR 의존성의 개념을 자세히 설명하고 결합도를 느슨하게 유지할 수 있는 다양한 설계 방법들을 설명합니다. 의존성의 관리가 곧 변경의 관리이고 유연한 설계를 낳는 기반이라는 사실을 이해하게 될 것입니다. 잘 설계된 객체지향 애플리케이션은 작고 응집도 높은 객체들로 구성됩니다. 작고 응집도 높은 객체란 책임의 초점이 명확하고 한 가지 일만 잘 하는 객체…","fields":{"slug":"/오브젝트/08-의존성-관리하기/"},"frontmatter":{"date":"April 11, 2022","title":"08 의존성 관리하기","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"01. 개방-폐쇄 원칙 유연한 설계란 도 애플리케이션의 동작을 확장할 수 있는 설계입니다. 컴파일타임 의존성을 고정시키고 런타임 의존성을 변경하라 유연하고 재사용 가능한 설계에서 런타임 의존성과 컴파일타임 의존성은 서로 다른 구조를 가집니다. 이로인해 컴파일타임 의존성을 수정하지 않고도 런타임 의존성을 쉽게 변경 할 수 있습니다. 컴파일타임 의존성은 에서…","fields":{"slug":"/오브젝트/09-유연한-설계/"},"frontmatter":{"date":"April 11, 2022","title":"09 유연한 설계","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"TL;DR 객체지향의 대표적인 재사용 기법인 상속에 관해 다룹니다. 조금 놀랄 수도 있겠지만 10장의 주제는 는 것입니다. 객체지향 프로그래밍의 장점 중 하나는 코드를 재사용하기가 용이하다는 것입니다. 전통적인 패러다임에서 코드를 재사용하는 방법은 코드를 복사한 후 수정하는 것입니다. 객체지향은 조금 다른 방법을 취합니다. 객체지향에서는 코드를 재사용 하…","fields":{"slug":"/오브젝트/10-상속과-코드-재사용/"},"frontmatter":{"date":"April 11, 2022","title":"10 상속과 코드 재사용","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"TL;DR 상속과 합성은 객체지향 프로그래밍에서 가장 널리 사용되는 코드 재사용 기법입니다. 상속을 이용하면 자식 클래스의 정의에 부모 클래스의 이름을 덧붙이는 것만으로 부모 클래스 코드를 재사용할 수 있게 됩니다. 상속을 통해 자식 클래스는 부모 클래스의 정의 대부분을 물려받게 되며 부모 클래스와 다른 부분만 추가하거나 재정의함으로써 기존 코드를 쉽게 …","fields":{"slug":"/오브젝트/11-합성과-유연한-설계/"},"frontmatter":{"date":"April 11, 2022","title":"11 합성과 유연한 설계","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"TL;DR 티켓 판매 시스템이라는 간단한 도메인을 예로 들어 채그이 전체적인 주제를 함축해서 전달합니다. intro 소프트웨어 개발에서 실무가 이론보다 앞서 있는 대표적인 분야로 ‘소프트웨어 설계’와 ‘소프트웨어 유지보수’를 들 수 있습니다. 대부분 사람들은 이론이 먼저 정립된 후에 실무가 그 뒤를 따라 발전한다고 생각합니다. 로버트 L. 글래스는 그 반…","fields":{"slug":"/오브젝트/01-객체,-설계/01-객체,-설계/"},"frontmatter":{"date":"April 11, 2022","title":"01 객체, 설계","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"지은이의 글 객체지향으로 향하는 첫 걸음은 클래스가 아니라 객체를 바라보는 것에서부터 시작합니다. 객체지향으로 향하는 두 번째 걸음은 객체를 독립적인 존재가 아니라 기능을 구현하기 위해 협력하는 공동체의 존재로 바라보는 것입니다. 세 번째 걸음을 내디딜 수 있는지 여부는 협력에 참여하는 객체들에게 얼마나 적절한 역할과 책임을 부여할 수 있느냐에 달려 있습…","fields":{"slug":"/오브젝트/00-intro/"},"frontmatter":{"date":"April 10, 2022","title":"00 intro","category":"오브젝트","tags":["OOP","객체지향"],"draft":false}}},{"node":{"excerpt":"추상화 기법 추상화는 도메인의 복잡성을 단순화하고 직관적인 멘탈 모델을 만드는 데 사용할 수 있는 가장 기본적인 인지 수단입니다. 사람들은 도메인에 존재하는 개념들을 구조화하고 단순화하기 위해 다양한 추상화 기법을 사용합니다. 특성을 공유하는 객체들을 동일한 타입으로 분류하는 것은 객체지향 패러다임에서 사용하는 추상화 기법의 한 예입니다. 추상화 기법 객…","fields":{"slug":"/객체지향의 사실과 오해/부록a-추상화-기법/"},"frontmatter":{"date":"March 15, 2022","title":"부록A 추상화 기법","category":"객체지향의 사실과 오해","tags":[],"draft":false}}},{"node":{"excerpt":"타입스크립트의 타이핑 자바스크립트는 덕 타이핑(duck typing) 기반이고 타입스크립트가 이를 모델링하기 위해 을 사용합니다. 타입스크립트가 구조적 타이핑을 도입한 이유는 동적 타입 언어인 자바스크립트를 기반으로 하기 때문입니다. Java 기반의 객체지향에서는 을 사용합니다. 구조적 타이핑이란? 구조적 타이핑은 값 자체의 타입보다는 값이 가진 에 기반…","fields":{"slug":"/typescript/타입스크립트-모델링/"},"frontmatter":{"date":"February 07, 2022","title":"타입스크립트 모델링","category":"typescript","tags":[],"draft":false}}},{"node":{"excerpt":"1. 프로토타입 객체 Java, C++과 같은 클래스 기반 객체지향 프로그래밍 언어와 달리 자바스크립트는 프로토타입 기반 객체지향 프로그래밍 언어입니다. 자바스크립트는 왜 프로토타입을 선택했을까 프로토타입 기반 객체지향 프로그래밍 언어는 클래스 없이(Class-less)도 객체를 생성할 수 있습니다.(ECMAScript 6에서 클래스가 추가되었습니다.) …","fields":{"slug":"/javascript/prototype/"},"frontmatter":{"date":"January 20, 2022","title":"prototype","category":"javascript","tags":[],"draft":false}}},{"node":{"excerpt":"1. 실행 컨텍스트(Execution Context) 코드를 실행하기 위해 필요한 정보들을 가진 범위를 객체 형태로 나타낸 것입니다. 코드의 실제 진행 상황을 추적하는데 도움이 됩니다. 전역 공간에서 자동으로 생성되는 전연 컨텍스트 함수 실행에 의한 컨텍스트 eval함수 자바스크립트가 로드되고 이를 엔진이 처리하면서 실행 컨텍스트를 만듭니다. 어떤 코드를…","fields":{"slug":"/javascript/자바스크립트-조금-더-알아보기/"},"frontmatter":{"date":"January 19, 2022","title":"자바스크립트 조금 더 알아보기","category":"javascript","tags":["javascript"],"draft":false}}},{"node":{"excerpt":"Layered 아키텍처를 따르는 대표적인 예 - 네트워크 시스템 OSI 7 Layer 모델은 거대한 네트워크 소프트웨어 구조를 설명하는 것입니다. OSI 7 계층 OSI 7 계층은 국제표준화기구(International Standard Organization, ISO)에서 1984년에 발표한 네트워크 표준 모델입니다. OSI 모델(Open Systems …","fields":{"slug":"/develop/osi-7-계층/"},"frontmatter":{"date":"October 22, 2021","title":"OSI 7 계층","category":"develop","tags":[],"draft":false}}},{"node":{"excerpt":"오버로드 C나 Java같은 정적 타입 언어의 경우, 매개변수의 갯수와 타입에 따라서 정적으로 여러 개의 함수를 구현할 수 있습니다. 하지만 JavaScript는 하나의 함수 내부에서 를 해서 동적으로 오버로딩을 구현할 수 있습니다. TypeScript의 경우, 오버로딩이 불가능하지는 않지만 그 방식은 정적 타입 언어인 C나 Java보다는 동적 타입언어인 …","fields":{"slug":"/javascript/타입스크립트의-오버로드/"},"frontmatter":{"date":"August 14, 2021","title":"타입스크립트의 오버로드","category":"javascript","tags":[],"draft":false}}},{"node":{"excerpt":"Call by reference란 무엇인가? Call by reference를 알기 위해 평가 전략(컴퓨터 프로그래밍)을 먼저 보겠습니다. 평가 전략(Evaluation Strategy)은 프로그래밍 언어에서 함수 호출의 아규먼트(argument)의 순서를 언제 결정하고 함수에 어떤 종류의 값을 통과시킬지 결정하는 것입니다. 람다 대수에서 축소 전략(re…","fields":{"slug":"/javascript/javascript-call-by-reference가-존재하는가/"},"frontmatter":{"date":"July 26, 2021","title":"javascript call by reference가 존재하는가","category":"javascript","tags":[],"draft":false}}},{"node":{"excerpt":"Object Dependencies(객체 의존성) 현재 객체가 다른 객체와 상호작용(참조)하고 있다면 현재 객체는 다른 객체에 의존성을 가집니다. 하나의 모듈이 바뀌면 의존한 다른 모듈까지 변경 되어야 합니다. 또한 두 객체 사이의 의존성이 존재하면 Unit Test 작성이 어려워집니다. 은 서비스로 사용할 수 있는 객체입니다. Dependency Inj…","fields":{"slug":"/design pattern/dependency-injection-pattern/"},"frontmatter":{"date":"April 15, 2021","title":"dependency injection pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"생성 패턴 디자인 패턴 분류인 생성, 구조, 행위 중 객체 생성에 관련 된 으로 간주됩니다. 생성 패턴은 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공합니다. 단 의 인스턴스를 생성해 사용하는 디자인 패턴( 객체를 생성하는 방법) 애플리케이션이 시작될 때 어떤 클래스가  메모리를 할…","fields":{"slug":"/design pattern/singleton-pattern/"},"frontmatter":{"date":"April 14, 2021","title":"singleton pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"디자인 패턴이란? 반복적으로 나타난 문제에 대해 그것을 해결한 경험 및 노하우를 축적하여  이름을 붙여 양식 입니다. 디자인 패턴은 크게 3가지 분류가 있습니다. 생성 패턴 : 객체 생성과 관련된 패턴 구조 패턴 : 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴 행위 패턴 : 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴 행위 소프트웨어 …","fields":{"slug":"/design pattern/state-pattern/"},"frontmatter":{"date":"March 21, 2021","title":"state pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"전략 패턴(strategy pattern) 또는 정책 패턴(policy pattern)에 대해 알아 보겠습니다. 행위 소프트웨어 디자인 패턴 실행 중에 알고리즘을 선택할 수 있게 하는  소프트웨어 디자인 패턴입니다. 동일 계열의 알고리즘을 정의하고 상호교환이 가능하게 합니다. 객체들이 할 수 있는 행위 각각에 대해 전략 클래스를 생성하고, 유사한 행위들을…","fields":{"slug":"/design pattern/strategy-pattern/"},"frontmatter":{"date":"March 21, 2021","title":"strategy pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"알고리즘을 객체 구조에서 분리시키는 디자인 패턴 입니다. 실제 로직을 가지고 있는 객체(Visitor)가 로직을 적용할 객체(Element)를 방문하면서 실행하는 패턴입니다. 즉, 이라고 볼 수 있습니다. 로직과 구조가 분리되면  할 수 있습니다. 개방-폐쇄 원칙을 적용하는 방법의 하나입니다. 비지터 패턴은 하여, 방문 공간이 방문자를 맞이할 때, 이후에…","fields":{"slug":"/design pattern/visitor-pattern/"},"frontmatter":{"date":"March 13, 2021","title":"visitor pattern","category":"design pattern","tags":[],"draft":false}}},{"node":{"excerpt":"Node와 RDB의 ORM 서비스는 sequelize, typeorm, prisma 등 많은 라이브러리들이 있습니다. 가장 먼저 사용한 ORM 서비스는 sequelize 였지만 typeorm이 typescript 지원이나 시장의 흐름에 따라 조금 더 많이 사용된다고 생각되어 공부하게 되었습니다. prisma도 고려해 보았으나 아직은 시기상조인 것 같았습니…","fields":{"slug":"/backend/typeorm-톺아보기/"},"frontmatter":{"date":"March 09, 2021","title":"typeorm 톺아보기","category":"backend","tags":["node","sql","db","rdb","typeorm","orm"],"draft":false}}},{"node":{"excerpt":"빌더는 객체 패턴입니다. 객체 패턴(Object patterns)에서는 객체 사이의 관계를 다루며, 객체 상이의 관계는 보통 구성을 통해서 정의 됩니다. 객체 패턴에서는 일반적으로 실행 중에 관계가 생성되기 때문에 더 동적이고 유연 합니다. 빌더 패턴은 생성 패턴(Creational Pattern) 중 하나이다. 빌더 패턴은 싱글톤 패턴, 팩토리 패턴, …","fields":{"slug":"/design pattern/builder-pattern/"},"frontmatter":{"date":"March 07, 2021","title":"builder pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"적응자 패턴 adapter란? adapter는 다른 전기나 기계 장치를 서로 연결해서 작동할 수 있도록 만들어 주는 결합 도구를 뜻합니다. 디자인 패턴 분류 디자인 패턴에는 생성, 구조, 행위, 3가지 분류가 있습니다. 어댑터 패턴은 에 대한 패턴입니다. 구조 패턴 구조 패턴이란 작은 클래스들을 과 을 이용하여 더 큰 클래스를 생성하는 방법을 제공하는 패…","fields":{"slug":"/design pattern/adapter-pattern/"},"frontmatter":{"date":"February 28, 2021","title":"adapter pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"캡슐화를 위배하지 않은 채 내부 상태의 스냅샷을 찍는 패턴  어떤 객체의 내부 상태를 잡아내고 신체화시켜, 이후에 해당 객체가 그 상태로 다시 되돌아올 수 있도록 하는 패턴입니다. 메멘토 패턴은 객체의 상태 정보를 저장하고 사용자의 필요에 의하여 원하는 시점의 데이터를 복원(Rollback) 할 수 있는 패턴을 의미합니다. 객체를 이전의 상태로 복구시켜야…","fields":{"slug":"/design pattern/memento/"},"frontmatter":{"date":"February 21, 2021","title":"memento","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"상태 변화를 감시자에게 통지합니다. 옵저버 객체들은 주체 주제 객체에 등록되어 있으며 주체의 데이터가 바뀌면 갱신 내용을 전달 받습니다. 옵저버 패턴은 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-to-many) 의존성을 정의합니다. 다른 다른 명칭들은 무엇이 있을까요? 관찰자 …","fields":{"slug":"/design pattern/observer-pattern/"},"frontmatter":{"date":"February 08, 2021","title":"observer pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다 팩토리 패턴은 생성과 관련된 디자인 패턴입니다. 생성 패턴을 이용하면 되고, 하며, 이것이 되는지, 할 것인지 결정하는데 을 확보할 수 있게 됩니다. 생성 패턴은 인스턴스를 만드는 절차를 하는 패턴입니다. 생성 패턴은 시스템이 어떤 Concrete Class를 사용하는지에 대한 정보를 합…","fields":{"slug":"/design pattern/factory-pattern/"},"frontmatter":{"date":"January 30, 2021","title":"factory pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"객체의 행위를 클래스로 만들어 캡슐화 하는 패턴 커맨드 패턴은 행위에 대한 패턴입니다. 클래스와 객체들이 상호작용하는 방법 및 역할을 분담하는 방법과 관련된 패턴입니다. 한 객체가 혼자 수행할 수 없는 작업을 여러 개의 객체로 어떻게 하는지, 또 그렇게 하면서도 객체 사이의 하는 것에 중점을 둡니다. 템플릿 메소드, 인터프리터, 역할 변경, 비지터, , …","fields":{"slug":"/design pattern/command-pattern/"},"frontmatter":{"date":"January 26, 2021","title":"command pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"중재자 패턴 중재자 패턴은 으로 분류 됩니다. 디자인 패턴 분류인 생성, 구조, 행위 중 프로그램의 실행 행위를 변경할 수 있기 때문에 으로 간주됩니다. 중재자 디자인 패턴은 유연하고 재사용 가능한 객체 지향 소프트웨어를 설계하기 위해 반복되는 디자인 문제를 해결하는 방법 23가지 입니다. GoF 디자인 패턴 : 객체는 구현, 변경, 테스트, 재사용이 쉬…","fields":{"slug":"/design pattern/mediator-pattern/"},"frontmatter":{"date":"January 25, 2021","title":"mediator-pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"복잡한 과장을 간단하게 표현하는 퍼사드 패턴 디자인 패턴 와 같은 확장성(Extensibility) 문제는 많은 디자인 패턴들이 해결하고자 하는 문제 중 하나입니다. 디자인 패턴에는 생성, 구조, 행위, 3가지 분류가 있습니다. 구조패턴은 적응자, 브리지, 복합체, 장식자, 퍼사드, 플라이급, 프록시로 분류가 됩니다. 이중 가장 많이 사용하는 패턴은 적응…","fields":{"slug":"/design pattern/facade-pattern/"},"frontmatter":{"date":"January 23, 2021","title":"facade-pattern","category":"design pattern","tags":["design pattern"],"draft":false}}},{"node":{"excerpt":"프로그래밍 언어란? 기계어 0과 1로 이루어진 언어입니다. 기계가 이해할 수 있습니다. 프로그래밍 언어 비교적 사람이 이해할 수 있는 언어입니다. 기계가 이해할 수 없습니다. 컴파일러 프로그래밍 언어를 기계어로 바꾸어 기계가 이해할 수 있도록 합니다. 이러한 작업을 이라고 합니다. Low-level 기계어, 어셈블리 언어입니다. 기계는 이해할 수 있지만 …","fields":{"slug":"/c/c-base/"},"frontmatter":{"date":"November 28, 2020","title":"c base","category":"c","tags":[],"draft":false}}},{"node":{"excerpt":"TL;DR 아래 내용은 javascript 중심의 입니다. 람다는 익명함수를 정의 하는 편리한 방법입니다. 하지만 자바스크립트에서는 별도의 방법 없이도 익명함수를 선언할 수 있기 때문에 람다라는 표현을 쓰이는 경우가 어색한거 같습니다. - 람다식은 수학자 알론조(Alonzo Church)가 발표한 람다 계산법에서 사용된 식으로, 이를 제자 존 매카시(Jo…","fields":{"slug":"/javascript/lambda/"},"frontmatter":{"date":"November 24, 2020","title":"lambda","category":"javascript","tags":[],"draft":false}}},{"node":{"excerpt":"Method binding 방법 case 0 this가 제대로 bind 되지 않아서 method1 안에서 this를 사용할 수 없습니다. map 같은 함수를 써서 parameter를 넘길 경우 사용하기에 모호해집니다. case 1 화살표 함수는 자신의 this가 없습니다. 대신 화살표 함수를 둘러싸는 렉시컬 범위(lexical scope)의 this가 사…","fields":{"slug":"/frontend/method-binding/"},"frontmatter":{"date":"November 17, 2020","title":"method binding","category":"frontend","tags":[],"draft":false}}},{"node":{"excerpt":"대표적인 브랜칭(branching) 전략 Git-flow GitHub-flow Git-flow Git-flow는 브랜치를 크게 4가지로 나누어 개발하는 전략입니다. 메인 브랜치(Main branch) 피처 브랜치(Feature branch) 또는 토픽 브랜치(Topic branch) 릴리스 브랜치(Release branch) 핫픽스 브랜치(Hotfix b…","fields":{"slug":"/git/git-branching/"},"frontmatter":{"date":"November 10, 2020","title":"git branching","category":"git","tags":[],"draft":false}}},{"node":{"excerpt":"이미지 압축방식 이해하기 Lossy vs Lossless 압축 방법에는 크게 손실압축(Lossy compression)과 비손실 압축(Lossless compression) 방법이 있습니다. 각각에 방법에는 용도에 따라, 속도 측면에 따라 장단점이 존재합니다. Lossy Lossy는 이미지를 압축하여 크기를 줄이지만 이미지의 Quaility는 손상되는 것…","fields":{"slug":"/design/svg/"},"frontmatter":{"date":"October 19, 2020","title":"svg","category":"design","tags":[],"draft":false}}},{"node":{"excerpt":"zsh version 확인 zsh 5.5.1 (x86_64-apple-darwin17.5.0) zsh이 없다면 설치 bash를 zsh로 변경 문제가 있다면 chsh -s /bin/zsh로 시도해 보자\n10.10 버전부터 무언가 바뀐 듯 하다. 재로그인하거나 터미널을 종료하고 재시작한 후 기본 쉘이 zsh인 것을 확인한다. 일부 시스템 특히 OS X에서는 …","fields":{"slug":"/develop/zsh/"},"frontmatter":{"date":"September 09, 2020","title":"zsh","category":"develop","tags":["zsh","iterm"],"draft":false}}},{"node":{"excerpt":"Least Recently Used Cache 1. Cache 기본 개념 캐시는 데이터나 값을 미리 복사해 놓는 임시 장소를 가리킵니다. 캐시는 접근 시간에 비해 원래 데이터를 접근하는 시간이 오래 걸리는 경우나 값을 다시 계산하는 시간을 절약하고 싶은 경우 사용합니다. 캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 시간 없이 더 빠른 속도로 데이터에…","fields":{"slug":"/develop/lru-cache/"},"frontmatter":{"date":"August 27, 2020","title":"LRU Cache","category":"develop","tags":["LRU Cache"],"draft":false}}},{"node":{"excerpt":"자바스크립트 이벤트 루프에 대해 알아보겠습니다. 자바스크립트는 싱글 스레드 프로그래밍 언어(Single threaded programming language) 입니다. 자바스크립트는 기본적으로 싱글 스레드 프로그래밍 언어입니다. 여기서 싱글 스레드라는 것은 한 번에 하나의 작업만 할 수 있다는 뜻입니다. 유저가 컨트롤 할 수 있는 스레드가 하나라는 뜻에서…","fields":{"slug":"/javascript/event-loop/"},"frontmatter":{"date":"August 25, 2020","title":"event loop","category":"javascript","tags":["javascript","event loop"],"draft":false}}},{"node":{"excerpt":"호이스팅(Hoisting)의 개념 함수 안에 있는 선언들을 모두 끌어올려서 해당 함수 유효 범위의 최상단에 선언하는 것을 말합니다. 호이스팅이란 자바스크립트 함수는 실행되기 전에 함수 안에 필요한 변수값들을 모두 모아서 유효 범위의 최상단에 선언합니다. 자바스크립트 Parser가 함수 실행 전 해당 함수를 한 번 훑습니다. 함수 안에 존재하는 변수 / 함…","fields":{"slug":"/javascript/hoisting/"},"frontmatter":{"date":"August 21, 2020","title":"hoisting","category":"javascript","tags":["javascript","hoisting"],"draft":false}}},{"node":{"excerpt":"비권장방식 display: none; visibility: hidden; width: 0; hight: 0; overflow: hidden; 권장방식 hidden 클래스와 aria-describedby를 활용하여 읽게 할 수 있습니다. a11y-hidden","fields":{"slug":"/frontend/html-content-숨기기/"},"frontmatter":{"date":"August 13, 2020","title":"html content 숨기기","category":"frontend","tags":["display","visibility","hidden","aria-describedby","a11y-hidden"],"draft":false}}},{"node":{"excerpt":"환경 변수를 사용하고 싶은 경우 스크립트에 미리 넣어서 사용합니다. 변수를 이용해 실행 시 받을 수도 있습니다. 실행 시 로 실행합니다. 환경변수를 동적으로 사용하면서 기본값을 주고 싶다면 대쉬(-)를 사용합니다. 윈도우에서도 같은 방식으로 실행하고 싶다면 cross-env를 사용합니다. dotenv 비밀키는 .env라는 파일에 모아두고, dotenv가 …","fields":{"slug":"/javascript/env/"},"frontmatter":{"date":"August 10, 2020","title":"env","category":"javascript","tags":["env","cross-env","port","javascript"],"draft":false}}},{"node":{"excerpt":"HTML Living Standard HTML, HyperText Markup Language로 대변되는 이 언어는 단순히 Markup Language라는 이유로 많은 개발자들에게 ‘HTML은 프로그래밍 언어가 아니다’라는 식으로 조롱받고는 합니다. HTML 4.01이 1999년 12월 표준이 되었고, HTML 5가 2008년 1월 22일 처음 시작되어 …","fields":{"slug":"/frontend/html-base/"},"frontmatter":{"date":"August 03, 2020","title":"html base","category":"frontend","tags":["html"],"draft":false}}},{"node":{"excerpt":"자바스크립트 특징 자바스크립트는 인터프리터 언어입니다. 최근 웹 브라우저 대부분에는 싱핼 시간에 자바스크립트를 컴파일하는 JIT 컴파일러(Just In Time Compiler)가 내장되어 있어 실행 속도가 매우 빨라졌습니다. 동적 프로토타입 기반 객체 지향 언어입니다. 객체를 생성한 후에도 프로퍼티와 메서드를 동적으로 추가하거나 삭제할 수 있습니다. 동…","fields":{"slug":"/javascript/javascript-base/"},"frontmatter":{"date":"July 29, 2020","title":"javascript base","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"단축키 단축키 설명 ctrl + shift + 좌/우 선택 영역 확장/축소 option + 위/아래 블록간 이동 command + shift + \\ 마지막 블록으로 이동 F2 rename F12 정의부로 이동 option + shift + F12 사용하는 코드 탐색 command + 0 파일 탐색기 포커싱 command + 1 에디터 포커싱 ctrl + …","fields":{"slug":"/tool/visual-studio-code/"},"frontmatter":{"date":"July 29, 2020","title":"Visual Studio Code","category":"tool","tags":null,"draft":false}}},{"node":{"excerpt":"gatsby 배포 시 gatsby develop 옵션은 구동하는데 많이 시간이 필요하기 때문에 적절하지 않습니다. gatsby serve 역시 포트 조정이 불가능하여서 마땅치 않습니다. 해결책 애플리케이션에서 heroku/node.js및 heroku-buildpack-static 빌드 팩을 설정합니다. heroku 플랫폼 API를 app.json 활용하려…","fields":{"slug":"/heroku/gatsby-배포/"},"frontmatter":{"date":"July 27, 2020","title":"gatsby 배포","category":"heroku","tags":null,"draft":false}}},{"node":{"excerpt":"특징 개별 객체(instance) 수준에서 메소드와 변수를 추가 객체 생성은 일반적으로 복사를 통해 이루어짐 확장(extends)은 클래스가 아니라 위임(delegation) 개별 객체 수준에서 객체를 수정하고 발전시키는 능력은 선험적 분류의 필요성을 줄이고 반복적인 프로그래밍 및 디자인 스타일을 장려 프로토타입 프로그래밍은 일반적으로 분류하지 않고 유사…","fields":{"slug":"/develop/prototype-based-OOP/"},"frontmatter":{"date":"July 21, 2020","title":"prototype based OOP","category":"develop","tags":null,"draft":false}}},{"node":{"excerpt":"객체지향 프로그래밍은 컴퓨터 프로그래밍 패러다임(견해, 사고법)의 하나로, 프로그래밍에서 필요한 데이터를 추상화 시켜서 상태(속성, 어트리뷰트)와 행위(메서드)를 가진 객체로 만들고, 그 객체간의 상호작용을 통해 로직을 구성하는 방법입니다. 객체지향 애플리케이션의 중심 사상은 연쇄적으로 메시지를 전송하고 수신하는 객체들 사이의 협력 관계를 기반으로 사용자…","fields":{"slug":"/develop/객체지향-프로그래밍(oop)/"},"frontmatter":{"date":"July 21, 2020","title":"객체지향 프로그래밍(OOP)","category":"develop","tags":null,"draft":false}}},{"node":{"excerpt":"javascript에서 Object.freeze를 활용해여 배열의 값을 변경 못하게 할 수 있습니다. freeze","fields":{"slug":"/javascript/freeze/"},"frontmatter":{"date":"July 19, 2020","title":"freeze","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"spring backend로 된 프로젝트 진행 중 누군가는 out 파일이 생기고 누군가는 생기지 않아 문제를 겪에 되었습니다. 해결책 IntelliJ IDEA 2에서 command + , 을 통해 설정창 실행합니다. 검색창에 gradle 검색합니다. Build and run using을 IntelliJ IDEA로 설정합니다. 서버 재실행 시 super2/…","fields":{"slug":"/Java/build-파일의-위치/"},"frontmatter":{"date":"July 15, 2020","title":"build 파일의 위치","category":"java","tags":null,"draft":false}}},{"node":{"excerpt":"캔버스를 활용한 눈알 굴리기 Canvas API는 JavaScript와 HTML canvas 엘리먼트를 통해 그래픽을 그리기위한 수단을 제공합니다. 무엇보다도 애니메이션, 게임 그래픽, 데이터 시각화, 사진 조작 및 실시간 비디오 처리를 위해 사용됩니다. Canvas API는 주로 2D 그래픽에 중점을 두고 있습니다. WebGL API 또한 canvas …","fields":{"slug":"/studyFront/day5/"},"frontmatter":{"date":"July 14, 2020","title":"day5","category":"studyFront","tags":null,"draft":false}}},{"node":{"excerpt":"자바스크립트 사용하기 index.html에 script 태그를 연결 합니다. 자바스크립트에서 특정 html의 element를 사용할 때 그 element보다 자바스크립트 코드가 상위에 있을 경우 에러를 발생할 수 있습니다. 또한 스크립트가 element보다 상단에 위치할 경우 사용자에게 초기에 보여지는 속도가 느려질 수 있기 때문에 body 끝에 작성합니…","fields":{"slug":"/studyFront/day4/"},"frontmatter":{"date":"July 14, 2020","title":"day4","category":"studyFront","tags":null,"draft":false}}},{"node":{"excerpt":"휴대폰 인증 같은 경우 3분 안에 입력해야 하는데 사용자들의 편의를 위해서 03:00에서 0:00으로 1초마다 초가 줄어드는 UI를 많이 사용합니다. requestAnimationFrame을 이용해 이를 구현합니다.","fields":{"slug":"/react/타이머-만들기/"},"frontmatter":{"date":"July 12, 2020","title":"타이머 만들기","category":"react","tags":null,"draft":false}}},{"node":{"excerpt":"이미지 가운데 정렬 이미지도 inline 요소이기 때문에 를 통해 가운데 정렬을 합니다. plugin 사용하기 vscode 좌측 active bar에 있는 Extenstions에서 각종 plugin을 사용합니다.  Auto Rename Tag 페어링 태그의 이름을 자동으로 바꿔줍니다. htmltagwrap option + w 를 이용하여 선택한 내용을 H…","fields":{"slug":"/studyFront/day3/"},"frontmatter":{"date":"July 12, 2020","title":"day3","category":"studyFront","tags":null,"draft":false}}},{"node":{"excerpt":"자바스크립트에서는 0, ”, false, undefined, null을 모두 falsy값으로 처리합니다. if나 삼항 연산자에 falsy값을 넣을 경우 false로 처리합니다. 0, ”, false와 null, undefined를 구분하고 싶다면 nullish coalescing operator를 사용합니다.","fields":{"slug":"/javascript/nullish-coalescing-operator/"},"frontmatter":{"date":"July 09, 2020","title":"nullish coalescing operator","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"github 활용하기 github 가입 github에 가입합니다. 우측 상단에 동그라미를 눌러 Your repositories 우측 상단에 New라는 녹색 버튼을 클릭합니다. Repository name에 자신의 계정이름 + github.io로 repository를 생성합니다. - 저는 Yuni-Q.github.io 입니다. 이곳에 파일을 넣으면 gith…","fields":{"slug":"/studyFront/day2/"},"frontmatter":{"date":"July 08, 2020","title":"day2","category":"studyFront","tags":null,"draft":false}}},{"node":{"excerpt":"1. vscode 설치 Terminal.app을 실행 시킵니다. brew를 통해 vscode를 설치하기 위해 brew를 설치 합니다. brew update를 진행합니다. brew를 통해 vscode를 설치합니다. 2. 터미널로 vscode 열기 Visual Studio Code 실행합니다. commend + shift + p를 입력합니다. Shell co…","fields":{"slug":"/studyFront/day1/"},"frontmatter":{"date":"July 08, 2020","title":"day1","category":"studyFront","tags":null,"draft":false}}},{"node":{"excerpt":"중요한 것은 개별 객체가 아니라 객체들 사이에 이뤄지는 협력입니다. 책임 객체지향 개발에서 가장 중요힌 능력은 능숙하게 소프트웨어 객체에 할당하는 것입니다. 책임의 분류 객체의 책임은 객체가 무엇을 알고 있는가(knowing)와 무엇을 할 수 있는가(doing)로 구성됩니다. 하는 것(doing) 객체를 생성하거나 계산하는 등의 스스로 하는 것 다른 객체…","fields":{"slug":"/객체지향의 사실과 오해/04.-역할,-책임,-협력/"},"frontmatter":{"date":"July 03, 2020","title":"04. 역할, 책임, 협력","category":"객체지향의 사실과 오해","tags":null,"draft":false}}},{"node":{"excerpt":"의도는 입니다. 훌륭하고 성장 가능한 시스템을 만들기 위한 핵심은 모듈 내부의 속성과 행동이 어떤가보다는 모듈이 어떻게 커뮤니케이션하는가에 달려 있습니다. 설계의 품질을 좌우하는 책임 객체지향 공통체를 구성하는 기본 단위는 자율적인 객체입니다. 객체들은 애플리케이션의 기능을 구현하기 위해 협력하고, 협력 과정에서 각자 맡은 바 책임을 다하기 위해 자율적으…","fields":{"slug":"/객체지향의 사실과 오해/05.-책임과-메시지/"},"frontmatter":{"date":"July 03, 2020","title":"05. 책임과 메시지","category":"객체지향의 사실과 오해","tags":null,"draft":false}}},{"node":{"excerpt":"추상화 어떤 양상, 세부 사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법입니다. 복잡성을 다루기 위해 추상화는 두 차원에서 이뤄집니다. 첫 번째 차원은 구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것입니다. 두 번째 차원은 중요한 부분을 강조하기…","fields":{"slug":"/객체지향의 사실과 오해/03.-타입과-추상화/"},"frontmatter":{"date":"July 03, 2020","title":"03. 타입과 추상화","category":"객체지향의 사실과 오해","tags":null,"draft":false}}},{"node":{"excerpt":"란 식별 가능한 개체 또는 사물입니다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있습니다. 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가집니다. 소프트웨어 안에서 객체는 저장된 상태와 실행 가능한 코드를 통해 구현됩니다. 객체의 상태 상태는 특정 시점에 객체가 가지고 있는 정보의 집합…","fields":{"slug":"/객체지향의 사실과 오해/02.-이상한-나라의-객체/"},"frontmatter":{"date":"July 03, 2020","title":"02. 이상한 나라의 객체","category":"객체지향의 사실과 오해","tags":null,"draft":false}}},{"node":{"excerpt":"객체를 상태와 행동을 함께 지닌 실체라고 정의합니다. 이 말은 객체가 협력에 참여하기 위해 어떤 행동을 해야 한다면 그 행동을 하는 데 필요한 상태도 함께 지니고 있어야 한다는 것을 의미합니다. 객체가 협력에 참여하는 과정 속에서 스스로 판단하고 스스로 결정하는 자율적인 존재로 남기 위해서는 필요한 행동과 상태를 함께 지니고 있어야 합니다. 객체의 역할 …","fields":{"slug":"/객체지향의 사실과 오해/01.-협력하는-객체들의-공동체/"},"frontmatter":{"date":"July 03, 2020","title":"01. 협력하는 객체들의 공동체","category":"객체지향의 사실과 오해","tags":null,"draft":false}}},{"node":{"excerpt":"현재 포커스 되어 있는 element의 포커스를 해제 합니다.","fields":{"slug":"/frontend/blur-처리/"},"frontmatter":{"date":"June 29, 2020","title":"blur 처리","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"창을 닫을 때 현재 활성화 되어 있는 포커스 제거합니다. alert 사용 시 chrom에서는 정상 작동하지 않습니다.","fields":{"slug":"/frontend/close-event/"},"frontmatter":{"date":"June 29, 2020","title":"close event","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"ie11 max-width ie11에서 max-width가 동작하지 않습니다. position: absolute; left: 0;으로 해결했습니다. ie11 text-align start와 end 값이 동작하지 않아서 left와 right를 사용합니다. ie11에서 web font 로딩되지 않음 web font를 캐싱 하지 않을 경우 새로 고침 시에 나타…","fields":{"slug":"/frontend/ie11/"},"frontmatter":{"date":"June 26, 2020","title":"ie11","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"자바스크립트에서 클래스란? ES2015부터 class 키워드를 지원하기 시작했으나, 문법적인 양념일 뿐이며 자바스크립트는 여전히 프로토타입 기반의 언어다. https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain JavaScript class는…","fields":{"slug":"/javascript/class/"},"frontmatter":{"date":"May 27, 2020","title":"Class","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"zsh 버전 확인 zsh가 없다면 설치 bash를 zsh로 변경 재로그인하거나 터미널을 종료하고 재시작한 후 기본 쉘이 zsh인 것을 확인한다. 일부 시스템 특히 OS X에서는 /etc/shells 파일에 설치한 쉘을 등록한 후에 재시작해야 합니다. oh-my-zsh 설치 iTerm2 iTerm2 에서 다운로드 하거나, Homebrew 를 통해 다운 받는…","fields":{"slug":"/develop/terminer-setting/"},"frontmatter":{"date":"May 25, 2020","title":"Terminer Setting","category":"develop","tags":null,"draft":false}}},{"node":{"excerpt":"MySQL 같은 SQL 데이터베이스와는 다른 유형의 데이터 NoSQL의 대표주자인 mongoDB(몽고디비) 사용 SQL 규칙에 맞는 데이터 입력합니다. 테이브 간 JOIN 지원합니다. 트랜잭션 지원합니다. 안정성, 일관성을 가집니다. 용어(테이블, 로우, 칼럼) NoSQL 자유로운 데이터 입력합니다. 컬랙션 간 JOIN 지원하지 않습니다. JOIN : 관…","fields":{"slug":"/backend/nosql/"},"frontmatter":{"date":"May 13, 2020","title":"NoSQL","category":"backend","tags":null,"draft":false}}},{"node":{"excerpt":"CSS 값에 대한 레벨 4 사양에서 완전히 인식하지 못한 몇 가지 새로운 단위가 있습니다. lh은 계산 된 값과 동일한 line-height, rlh는 루트 요소 (아마도의 동일 html요소)가 아닌 현재의 구성 요소의 line-height 입니다.","fields":{"slug":"/frontend/lh-and-rlh/"},"frontmatter":{"date":"May 08, 2020","title":"lh and rlh","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"AWS EC2를 이용해 사이드 프로젝트를 진행하는 중 $273.11 달러의 요금 청구서가 날아왔습니다. Free Tier를 사용하고 있었기 때문에 과금 될 요소가 있지 않다고 생각했습니다. EC2, MYSQL, S3를 사용하고 있었습니다. 비용 발생 요인은  입니다. $0.126 per GB - first 10 TB / month data transfer…","fields":{"slug":"/aws/data-transfer/"},"frontmatter":{"date":"May 07, 2020","title":"data transfer","category":"aws","tags":null,"draft":false}}},{"node":{"excerpt":"1줄 2줄 line-clamp : 몇줄뒤에 콘텐츠를 자를지를 설정 합니다. box-orient : 박스의 흐름 방향을 지정합니다. 한줄에 여러 요소가 있는 경우 나머지 영역을 모두 채우고 ellipsis 부모에게 , 형제에겐 을 주면 남은 영역을 모두 차지하고 첫번째 줄에서 ellipsis 됩니다. flex를 이용한 ellipsis 버그 숫자만 있는 경우…","fields":{"slug":"/frontend/ellipsis/"},"frontmatter":{"date":"April 28, 2020","title":"ellipsis","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"이번 장에서는 유연하고 재사용 가능할 설계를 만들기 위해 적용할 수 있는 다양한 의존성 관리 기법들을 이라는 관점에서 정리 합니다. 01. 개방-폐쇄 원칙 개방-폐쇄 원칙(Open-CLosed Principle, OCP) : 소프트웨어 개체(클래스, 모듈, 함수 등등)는 , . 확장에 대해 열려 있다는 것은 애플리케이션의 요구사항이 변경될 때 이 변경에 …","fields":{"slug":"/object/object-chapter-09-유연한-설계/"},"frontmatter":{"date":"April 25, 2020","title":"object chapter 09 유연한 설계","category":"object","tags":null,"draft":false}}},{"node":{"excerpt":"잘 설계된 객체지향 애플리케이션은 들로 구성됩니다. 이런 작은 객체들이 단독으로 수행할 수 있는 작업은 거의 없기 때문에 객체 사이의 을 낳습니다. 협력을 위해서는 의존성이 필요하지만 과도한 의존성은 애플리케이션을 수정하기 어렵게 만듭니다. 객체지향 설계의 핵심은 협력을 위해 필요한 의존성은 유지하면서도 변경을 방해하는 의존성을 제거하는 데 있습니다. 이…","fields":{"slug":"/object/object-chapter-08-의존성-관리하기/"},"frontmatter":{"date":"April 20, 2020","title":"object chapter 08 의존성 관리하기","category":"object","tags":null,"draft":false}}},{"node":{"excerpt":"OOP (객체지향 프로그래밍) 자세히보기 AOP (관점지향 프로그래밍) 스프링 프레임워크의 핵심 요소 중 하나 입니다. 비즈니스 로직과 공통 모듈로 분리하고, 핵심 로직 사이사이에 공통 모듈을 잘 끼워 넣는 것입니다. 이때 공통 모듈을 코드 밖에서 설정된다는 것이 핵심입니다. 인증, 로깅, 트랜잭션 처리에 용이합니다. FP (함수형 프로그래밍) 함수형 프…","fields":{"slug":"/develop/oop,-aop,-fp/"},"frontmatter":{"date":"April 16, 2020","title":"OOP, AOP, FP","category":"develop","tags":null,"draft":false}}},{"node":{"excerpt":"Async/await 더 편안한 환경에서 Promise를 다루기 위해 태어난 특별한 문법입니다. 비동기 프로그래밍을 동기 방식처럼 직관적으로 표현할 수 있어서, Callback을 많이 사용하는 프론트엔드 개발자들에게 많은 사랑을 받고 있습니다. async-await는 ECMA-262에서 초안으로 처음 등장했으며, ECMAScript 2017에서 표준으로 …","fields":{"slug":"/javascript/async-await/"},"frontmatter":{"date":"April 12, 2020","title":"Async Await","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"Iterator는 자바스크립트의 collection을 반복하는 새로운 방법입니다. ES6에서 소개된 개념이고 매우 유용하고 많은 곳에서 사용되고 있기 때문에 인기가 많습니다. 반복 가능한 것(Iterable)과 Iterator 을 적용한 메소드가 iteratorMethod 입니다. 이와 비슷하게 사용자 정의 오브젝트를 반복하는 프로세스의 표준화가 에 의해…","fields":{"slug":"/javascript/iterator/"},"frontmatter":{"date":"April 12, 2020","title":"Iterator","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"ES6는 제너레이터(Generator) 또는 Generator 함수 형태에서 함수와 Iterator를 다루는 방법을 새롭게 소개했습니다. 제너레이터는 함수를 중간에서 멈추고, 다시 멈췄던 부분부터 실행할 수 있게 합니다. 요약하면, Generator는 함수의 형태를 띄지만, Iterator처럼 동작합니다. 재미있는 사실은 async/await이 Gener…","fields":{"slug":"/javascript/generator/"},"frontmatter":{"date":"April 12, 2020","title":"generator","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"this 자바스크립트의 함수는 호출될 때, 매개변수로 전달되는 인자값 이외에, arguments 객체와 this를 암묵적으로 전달 받습니다. 자바스크립트의 this keyword는 Java와 같은 익숙한 언어의 개념과 달라 개발자에게 혼란을 줍니다. Java에서의 this는 인스턴스 자신(self)을 가리키는 참조변수입니다. this가 객체 자신에 대한 …","fields":{"slug":"/javascript/this/"},"frontmatter":{"date":"April 10, 2020","title":"this","category":"javascript","tags":["this","call","apply","bind","함수 호출","메소드 호출","생성자 함수 호출","명시적바인딩","묵시적바인딩"],"draft":false}}},{"node":{"excerpt":"5장에서는 2장에서 소개한 코드의 설계 과정을 한 걸음씩 따라가 보면서 객체에 책임을 할당하는 기본적인 원리를 살펴 봅니다. 데이터 중심의 설계는 하고 협력이라는 문맥을 벗어나 고립된 객체의 상태에 초점을 맞추기 때문에 캡슐화를 위반하기 쉽고, 요소들 사이의 결합도가 높아지며, 코드를 변경하기 어려워집니다. 데이터 중심 설계로 인해 발생하는 문제점을 해결…","fields":{"slug":"/object/object-chapter-05-책임-할당하기/"},"frontmatter":{"date":"April 07, 2020","title":"object chapter 05 책임 할당하기","category":"object","tags":null,"draft":false}}},{"node":{"excerpt":"javascript를 활용해서 웹사이트를 크롤링 합니다.","fields":{"slug":"/frontend/크롤링/"},"frontmatter":{"date":"April 03, 2020","title":"크롤링","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"npm 모듈의 타입 선언 파일(.d.ts)을 커스텀 타입 선언 파일로 대체하는 법 원본 .d.ts 파일이 node_modules 아래에 있을 경우 컴파일러는 src/index.ts에서 non-relative module import구문을 발견하여 moduleA모듈에 대한 타입 선언 파일을 탐색하기 시작합니다. compilerOptions.path에 mod…","fields":{"slug":"/typescript/커스텀-타입-선언-파일/"},"frontmatter":{"date":"March 26, 2020","title":"커스텀 타입 선언 파일","category":"typescript","tags":null,"draft":false}}},{"node":{"excerpt":"도메인 구입 DNS 세팅 type : A answer : {본인 IP} SSL 적용 CSR 생성 이메일과 전화번호는 name.com 사이트와 일치하게 작성합니다. 도메인과 파일 이름을 같게 세팅 합니다. 인증서 설치 아래의 정보를 바탕으로 인증서 받기 인증서 정보를 바탕으로 cert.pem 생성 Nginx 세팅 ssl_session_cache shared…","fields":{"slug":"/develop/github-education-name.com-사용하기/"},"frontmatter":{"date":"March 22, 2020","title":"github education name.com 사용하기","category":"develop","tags":null,"draft":false}}},{"node":{"excerpt":"Repository는 하나의 도메인에 관련 된 것들을 컨트롤 합니다. 하나의 도메인에는 여러개의 테이블이 존재할 수 있습니다. REPOSITORY는 메모리에 로드된 객체 컬렉션에 대한 집합 처리를 위한 인터페이스를 제공합니다. DAO(Data Access Object)는 하나의 테이블에 관련 된 것들을 컨트롤 합니다. Entity Bean을 대체하기 위한…","fields":{"slug":"/develop/repository와-dao/"},"frontmatter":{"date":"February 24, 2020","title":"repository와 DAO","category":"develop","tags":null,"draft":false}}},{"node":{"excerpt":"SYNC / ASYNC 중요한 포인트는 입니다. . Synchronous / Asynchronous는 호출되는 함수의 작업 완료 여부를 누가 신경쓰냐가 관심사 입니다. SYNC : 서브루틴이 즉시 값을 반환 합니다. 이벤트를 자신이 직접 처리 합니다.(확인의 주체가 유저 프로세스이며, 다 될때까지 기다리거나 스스로 확인 합니다.) Synchronous I…","fields":{"slug":"/develop/동기-비동기/"},"frontmatter":{"date":"February 24, 2020","title":"동기 비동기","category":"develop","tags":null,"draft":false}}},{"node":{"excerpt":"tsconfig 파일 작성 esModuleInterop을 설정하지 않고 module.exports와 export default를 다르게 import 한다. module.exports 를 사용해서 import 해야한다. scripts 작성 webpack 적용 nodeExternals를 사용하지 않으면 웹팩에서 에러가 발생한다. 왜인지는 아직 잘 모르겠다… …","fields":{"slug":"/typescript/node-javascript에서-typescript로-바꾸기/"},"frontmatter":{"date":"February 22, 2020","title":"Node javascript에서 typescript로 바꾸기","category":"typescript","tags":null,"draft":false}}},{"node":{"excerpt":"애플리케이션 보안 주입(Injection) 크로스 사이트 스크립트(Cross-site scripting) 크로스 사이트 요청 위조 토큰 보호(Cross-site request forgery protection) 오픈 리다이렉션(Open redirects) 주입(Injection) SQL 주입은 애플리케이션에 영향을 끼치는 가장 일반적인 주입의 형태입니다.…","fields":{"slug":"/frontend/애플리케이션-보안/"},"frontmatter":{"date":"February 21, 2020","title":"애플리케이션 보안","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":",  두 속성을 이용해서 html 수정을 허용 할 수 있습니다.","fields":{"slug":"/frontend/html-edit/"},"frontmatter":{"date":"February 21, 2020","title":"html edit","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"마우스를 올리면 텍스트 밑에 밑줄을 긋는다거나 배경색을 바꾸는 효과를 줄때가 있습니다. 하지만 모바일에서는 호버 이벤트가 업습니다. 하지만 이를 위해 action 가상 선택자를 통해 클릭 시 효과를 주는 것으로 통일성을 줄 수 있습니다. 하지만 호버 이벤트를 모바일 사이즈에서 없애지 않는다면 클릭 후 색이 남는 현상이 발생 했습니다. 이벤트 주기 호버 이…","fields":{"slug":"/frontend/hover/"},"frontmatter":{"date":"February 14, 2020","title":"hover","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"스크롤 되는 영역에 그라데이션을 넣어야 했습니다. 아래 영역에서 before과 absolute를 이용해서 스크롤 되는 리스트 하단에 항상 그라데이션을 넣는 것에는 성공했습니다. 하지만 그 영역에서 스크롤이 되지 않았습니다. 그냥 보기엔 리스트의 영역처럼 보이지만 실제론 아래 영역 안에 포함된 곳이기 때문에 스크롤이 되지 않는 것이 올바른 동작입니다. 이를…","fields":{"slug":"/frontend/pointer-events/"},"frontmatter":{"date":"February 13, 2020","title":"pointer events","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"이미지를 업로드 하는 경우에 로컬에서는 문제가 없었으나 호스팅한 서버에서는 를 반환했습니다. 413 Request Entity Too Large는 nginx에서 업로드한 파일의 용량이 제한 수치를 넘겨서 발생 했습니다. 로컬에선 nginx를 사용하지 않고 호스팅 된 서버에서는 80포트를 8080포트로 옮겨주기 위해 사용했습니다. 해결 방안 nginx 서버…","fields":{"slug":"/backend/413-request-entity-too-large/"},"frontmatter":{"date":"February 13, 2020","title":"413 Request Entity Too Large","category":"backend","tags":null,"draft":false}}},{"node":{"excerpt":"HTTP란? HTTP는 웹상에서 Client (Internet Explorer, Chrome, Firefox) 와 Server (웹서버 eg: httpd, nginx, etc…)간 통신을 위한 Protocol 입니다. HTTP는 1996년 처음 1.0버전이 release되고 1999년 현재 우리가 공식적으로 가장 많이 사용하고 지원하는 버전인 1.1이 출…","fields":{"slug":"/develop/http/"},"frontmatter":{"date":"February 11, 2020","title":"http","category":"develop","tags":null,"draft":false}}},{"node":{"excerpt":"react에서 function으로 만들어진 component에는 4가지 타입이 있었습니다. FC, SFC, FunctionComponent, StatelessComponent 하지만 hooks로 인해서 function component에서도 state를 사용할 수 있게 되어 SFC와 StatelessComponent가 deprecated 되었습니다.","fields":{"slug":"/react/function-component-type/"},"frontmatter":{"date":"February 10, 2020","title":"function component type","category":"react","tags":null,"draft":false}}},{"node":{"excerpt":"TCP 연결형 서비스입니다. 가상 회선 방식입니다. 전송 순서 보장합니다. 신뢰성 높습니다. 전송 속도 느립니다. http/1과 http/2는 TCP를 사용합니다. UDP 비연결형 서비스입니다 데이터그램 방식입니다. 전송 순서 보장 하지 않습니다. 신뢰성 낮습니다. 전송 속도 빠릅니다. http/3는 UDP를 사용합니다. 커스터마이징이 용이합니다.","fields":{"slug":"/develop/tcp-udp/"},"frontmatter":{"date":"February 09, 2020","title":"TCP UDP","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"<input type=” ”> 속성 input 태그에서 공통적으로 사용되는 속성들 autocomplete 양식 자동생성 기능 암시. Boolean 속성이 아니며 공백으로 구분된 문자열을 값으로 갖는다. 간단하게는 ‘on’, ‘off’ 값으로 설정하지만 더 복잡한 자동 완성 구문을 사용할 수도 있다. autofocus 페이지가 로딩 될 때 자동으로 초점을 …","fields":{"slug":"/frontend/input/"},"frontmatter":{"date":"February 08, 2020","title":"input","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"JVM은 자바 가상머신(Java Virtual Machine)의 약자입니다. JRE는 자바 실행환경(Java Runtime Environment)의 약자입니다. JDK JDK는 자바 개발도구(Java Development Kit)의 약자입니다. JDK는 JRE + 개발을 위해 필요한 도구(javac, java등)들을 포함합니다. v8은 jvm가 아니라 j…","fields":{"slug":"/Java/jre-jvm/"},"frontmatter":{"date":"February 06, 2020","title":"JRE JVM","category":"java","tags":null,"draft":false}}},{"node":{"excerpt":"String a = “”로 생성하는건 String pool을 할당하는거고 내부적으로 intern()이라는 코드를 통해 상수풀에 값을 올립니다. 이미 존재하는 값이라면 값을 주소를 리턴하는 것을 보장합니다. “hello” + “world”와 같은 동작도 String pool을 할당받은 동작을 하는 것이기 때문에 a==e 는 true 입니다. “문자열” + …","fields":{"slug":"/Java/java-string/"},"frontmatter":{"date":"February 05, 2020","title":"Java String","category":"java","tags":null,"draft":false}}},{"node":{"excerpt":"마진병합현상의 조건 인접해있는 Block요소끼리만 일어납니다. 상하단만 해당 됩니다. 레이아웃을 더 보기 좋게 하기 위한 좋은 기능이다. 하지만 원하는 바와 다르게 적용 될 수도 있다. 마진병합을 방지하는 방법 부모에 margin이 0 auto여서 wrapper와 자식의 마진이 사라졌을 경우 부모에 padding: 1px을 줍니다. 부모에 border: …","fields":{"slug":"/frontend/마진-병합/"},"frontmatter":{"date":"February 04, 2020","title":"마진 병합","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"ES2015(ES6)에서 자바스크립트에 클래스(Class)가 도입되었습니다. 자바스크립트는 기본적으로 프로토타입 기반의 언어입니다. 프로토타입 기반으로 객체 지향적으로 설계하는 것이 복잡하여 클래스라는 sugar syntax 문법이 도입된 것입니다. Java에서의 클래스와 똑같은 기능을 한다고 생각 할 수 있지만 여전히 객체 지향을 흉내내고 있고 그 내부…","fields":{"slug":"/javascript/javascript-class/"},"frontmatter":{"date":"February 03, 2020","title":"JavaScript Class","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"Hook가 React 버전 16.8에 새로 추가되었습니다. Hook를 이용하여 Class를 작성할 필요 없이 상태 값과 여러 React의 기능을 사용할 수 있습니다. 하지만 React에서 Class를 제거할 계획은 없습니다. Hook은 알고 있는 React 컨셉을 대체하지 않습니다. 대신에, Hook는 props, state, context, refs, …","fields":{"slug":"/react/react-hook/"},"frontmatter":{"date":"February 02, 2020","title":"React Hook","category":"react","tags":null,"draft":false}}},{"node":{"excerpt":"3.0 새로운 개념의 프로젝트 참조가 도입되었습니다. 프로젝트 참조를 통해 TypeScript 프로젝트는 다른 TypeScript 프로젝트에 의존 할 수 tsconfig.json있습니다. 특히 파일이 다른 tsconfig.json파일 을 참조 할 수 있습니다. 이러한 종속성을 지정하면 TypeScript가 빌드 순서 및 출력 구조를 이해할 수 있는 방법을…","fields":{"slug":"/typescript/TypeScript 버전에 따른 변경점/"},"frontmatter":{"date":"February 01, 2020","title":"TypeScript 버전에 따른 변경점","category":"typescript","tags":["typesciprt","version"],"draft":false}}},{"node":{"excerpt":"유니온(Union)타입 유니온 타입은 하나의 프로퍼티에 다양한 변수가 올 수 있는 타입을 말합니다. keyof 키워드 keyof 키워드는 타입 값에 존재하는 모든 프로퍼티의 키값을 union 형태로 리턴 받습니다. never 타입 never는 에러가 발생했을 때 프로세스를 중단시키지 않고 무시하는 타입입니다. any를 제외한 다른 모든 타입의 원시 타입으…","fields":{"slug":"/typescript/typescript-헬터-타입/"},"frontmatter":{"date":"January 27, 2020","title":"typescript 헬터 타입","category":"typescript","tags":null,"draft":false}}},{"node":{"excerpt":"prototype을 사용하여 class를 구현하는 방법입니다. 자바스크립트는 상속 또한 존재하지 않습니다. 하지만, 역시 마찬가지로 prototype을 사용하여 상속을 구현할 수 있습니다. 일반적으로 클래스를 만들면 자동으로 prototype의 constructor라는 프로퍼티가 만들어집니다. 이 프로퍼티에는 해당 클래스의 생성자 정보가 기본값으로 담기게…","fields":{"slug":"/javascript/javascript에서-클래스를-구현하는-방법,-상속하는-방법/"},"frontmatter":{"date":"January 27, 2020","title":"ECMA6 이전의 class 가 없을 시절의 JS에서 클래스를 구현하는 방법, 상속하는 방법 정리","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"screen.height 화면의 세로 크기를 가져옵니다. screen.availHeight 브라우저의 막대를 포함하여 최대화 된 경우 브라우저의 윈도우가 가질 수 있는 높이입니다. 창이 최대화되면 screen.availHeight === window.outerHeight 작업 표시줄이 차지하는 부분을 제외한 세로 크기를 가져옵니다. 화면 아래의 작업 표시…","fields":{"slug":"/frontend/height/"},"frontmatter":{"date":"January 26, 2020","title":"height","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"HTML부터 React까지의 제가 알고 있는 웹 프론트엔드 흐름에 대해 정리를 해보고자 합니다. 웹은 HTML, CSS, Javascript로 구성되어 있습니다. DART나 KOTLIN.JS, 웹어셈블리 등이 웹을 지원하기는 한다고 합니다. HTML 가장 먼저 HTML은 HyperText Markup Language로 웹페이지를 기술하기 위한 마크업 언어…","fields":{"slug":"/frontend/web-frontend/"},"frontmatter":{"date":"January 24, 2020","title":"WEB FRONTEND","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"자바스크립트로 doublyLinkedList 구현하기 참조 데이터 스트럭쳐란 무엇인가? codingeverybody/data_structure_java","fields":{"slug":"/javascript/doublylinkedlist/"},"frontmatter":{"date":"January 24, 2020","title":"doublyLinkedList","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"자바스크립트로 linkedList 구현하기 참조 데이터 스트럭쳐란 무엇인가? codingeverybody/data_structure_java","fields":{"slug":"/javascript/linkedlist/"},"frontmatter":{"date":"January 24, 2020","title":"linkedList","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"자바스크립트로 arrayList 구현하기 참조 데이터 스트럭쳐란 무엇인가? codingeverybody/data_structure_java","fields":{"slug":"/javascript/arraylist/"},"frontmatter":{"date":"January 24, 2020","title":"arrayList","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"npm이란? npm은 Node Package Manager의 약자이며 대부분의 JavaScript 프로그램은 npm에 패키지로 등록됩니다. java에 gradle , php의 composer, python의 pip와 같은 역할을 합니다. npm의 대안으로는 facebook의 yarn이 있습니다. node.js를 설치하면 내장(built in)되어 있습니다…","fields":{"slug":"/javascript/javascript-패키지-매니저(NPM)/"},"frontmatter":{"date":"January 22, 2020","title":"javascript 패키지 매니저(NPM)","category":"javascript","tags":null,"draft":false}}},{"node":{"excerpt":"react와 styled-components를 이용해서 퍼센트에 따라 원을 그리는 컴포넌트를 만들었습니다.","fields":{"slug":"/react/퍼센트-원-그리기/"},"frontmatter":{"date":"January 19, 2020","title":"퍼센트 원 그리기","category":"react","tags":null,"draft":false}}},{"node":{"excerpt":"리액트는 배열을 렌더링 할 때 값을 통하여 업데이트 성능을 최적화 합니다. 기본적으로 DOM 노드의 자식에 대해 반복 할 때 React는 두 자식 목록을 동시에 반복하고 차이가 있을 때마다 돌연변이를 생성합니다.(virtual dom diff를 써서 확인) 이 문제를 해결하기 위해 React는 key속성을 지원 합니다. 자식에 키가 있으면 React는이 …","fields":{"slug":"/react/리액트에서-key를-사용하는-이유/"},"frontmatter":{"date":"January 18, 2020","title":"리액트에서 key를 사용하는 이유","category":"react","tags":null,"draft":false}}},{"node":{"excerpt":"V8이란? 독일 구글 개발 센터에서 만들어진 JavaScript 엔진입니다. 웹 브라우저 안에서 실행되는 JavaScript의 성능을 높이기 위해 처음 고안되었습니다. 오픈 소스이고 C++로 작성되었습니다. 구글 크롬과 Node.js의 런타임에서 사용 중입니다. 속도를 높이기 위해서 V8은 인터프리터를 이용하는 대신 기계어 코드로 번역합니다. JIT(Ju…","fields":{"slug":"/frontend/v8-엔진의-동작-원리/"},"frontmatter":{"date":"January 14, 2020","title":"V8 엔진의 동작 원리","category":"frontend","tags":null,"draft":false}}},{"node":{"excerpt":"가장 먼저 CSS transition 속성을 이용해서 아코디언 애니메이션을 구현했습니다. CSS를 수정하지 않고 애니메이션 구현하기 window.requestAnimationFrame 함수를 사용해서 구현했습니다. 애니메이션을 모두 기다린 후에 클릭을 하면 잘 작동하지만 애니메이션 도중 클릭을 할 경우 제대로 작동하지 않고 다시 클릭 했을 때 2번 작동 …","fields":{"slug":"/frontend/라이브러리-없이-애니메이션-구현하는-방법/"},"frontmatter":{"date":"January 14, 2020","title":"라이브러리 없이 애니메이션 구현하는 방법","category":"frontend","tags":null,"draft":false}}}]}},"pageContext":{}},"staticQueryHashes":["3128451518","96099027"],"slicesMap":{}}