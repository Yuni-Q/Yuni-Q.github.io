{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/design pattern/state-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"1e348ce3-7e9b-51ba-9df6-ea54b9ff1ee9","excerpt":"행위 소프트웨어 디자인 패턴 상태 패턴(state pattern…","html":"<h2 id=\"행위-소프트웨어-디자인-패턴\" style=\"position:relative;\"><a href=\"#%ED%96%89%EC%9C%84-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\" aria-label=\"행위 소프트웨어 디자인 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행위 소프트웨어 디자인 패턴</h2>\n<ul>\n<li>상태 패턴(state pattern)은 객체 지향 방식으로 상태 기계를 구현하는 <code class=\"language-text\">행위</code> 소프트웨어 디자인 패턴입니다.</li>\n</ul>\n<h2 id=\"변하는-것은-잘-변하지-않는-것과-분리해라-즉-변하는-녀석들을-캡슐화해라\" style=\"position:relative;\"><a href=\"#%EB%B3%80%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80-%EC%9E%98-%EB%B3%80%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83%EA%B3%BC-%EB%B6%84%EB%A6%AC%ED%95%B4%EB%9D%BC-%EC%A6%89-%EB%B3%80%ED%95%98%EB%8A%94-%EB%85%80%EC%84%9D%EB%93%A4%EC%9D%84-%EC%BA%A1%EC%8A%90%ED%99%94%ED%95%B4%EB%9D%BC\" aria-label=\"변하는 것은 잘 변하지 않는 것과 분리해라 즉 변하는 녀석들을 캡슐화해라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변하는 것은 잘 변하지 않는 것과 분리해라. 즉, 변하는 녀석들을 캡슐화해라!</h2>\n<ul>\n<li>스테이트 패턴은 객체가 <code class=\"language-text\">특정 상태에 따라 행위를 달리하는 상황</code>에서 <code class=\"language-text\">자신이 직접 상태를 체크하여 상태에 따라 행위를 호출하지 않고</code> 상태를 <code class=\"language-text\">객체화</code>하여 <code class=\"language-text\">상태가 행동을 할 수 있도록 위임하는 패턴</code>입니다.</li>\n<li>객체의 내부 상태에 따라 스스로 행동을 변경할 수 있게 허가하는 패턴으로, 이렇게 하면 <code class=\"language-text\">객체는 마치 자신의 클래스를 바꾸는 것처럼 보입니다</code>.</li>\n<li>상태 패턴을 이용하면 상태 패턴 인터페이스의 파생 클래스로 각각의 상태를 구현함으로써, 또 패턴의 슈퍼클래스에 의해 정의되는 메소드를 호출하여 상태 변화를 구현함으로써 상태 기계를 구현합니다.</li>\n<li>객체의 특정 <code class=\"language-text\">상태를 클래스로 선언</code>하고, 클래스에서는 <code class=\"language-text\">해당 상태에서 할 수 있는 행위들을 메서드로 정의</code>합니다. 그리고 이러한 <code class=\"language-text\">각 상태 클래스들을 인터페이스로 캡슐화</code> 하여, <code class=\"language-text\">클라이언트에서 인터페이스를 호출</code>하는 방식을 말합니다.</li>\n<li>구체적인 상태 클래스가 아닌 추상화된 State 인터페이스만 참조하므로 <code class=\"language-text\">현재 어떤 상태에 있는지와 무관하게 코드를 작성할 수 있습니다</code>.</li>\n<li>상태 전환은 State 클래스에 의해서 제어할 수도 있고, Context 클래스에 의해서 제어할 수도 있습니다.</li>\n<li>State 클래스를 여러 Context 객체의 인스턴스에서 공유하도록 디자인할 수도 있습니다.</li>\n</ul>\n<h2 id=\"싱글톤을-이용하는-이유\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"싱글톤을 이용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤을 이용하는 이유</h2>\n<ul>\n<li>각 상태들의 구현체에서 조금 특이한 것은 각 상태의 구현체들이 <code class=\"language-text\">싱글톤</code>으로 구현되어 있습니다. 이것은 상태들이 행위를 수행하면서 객체의 상태를 <code class=\"language-text\">수시로 바꾸어주기 때문</code>에 싱글톤으로 작성하지 않으면 <code class=\"language-text\">매번 새로운 인스턴스가 생겨</code> 불필요한 메모리를 잡아 먹을 것이고 전체적으로 성능 저하의 원인이 될 것이기 때문에 싱글톤으로 작성합니다.</li>\n</ul>\n<h2 id=\"유한-상태-기계fsm를-구현할-수-있습니다\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%95%9C-%EC%83%81%ED%83%9C-%EA%B8%B0%EA%B3%84fsm%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"유한 상태 기계fsm를 구현할 수 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유한 상태 기계(FSM)를 구현할 수 있습니다.</h2>\n<ul>\n<li>FSM은 컴퓨터 과학 분야 중의 하나인 오토마타 이론에서 나왔습니다.</li>\n<li>가질 수 있는 <code class=\"language-text\">상태</code>가 한정됩니다.</li>\n<li>한 번에 <code class=\"language-text\">한 가지</code> 상태만 될 수 있습니다.</li>\n<li><code class=\"language-text\">입력</code>이나 <code class=\"language-text\">이벤트</code>가 기계에 전달됩니다.</li>\n<li>각 상태에는 입력에 따라 다음 상태로 바뀌는 <code class=\"language-text\">전이</code>가 있습니다.</li>\n</ul>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>각 상태를 클래스로 <code class=\"language-text\">캡슐화</code>함으로써 나중에 변경시켜야 하는 내용을 국지화시킬 수 있습니다.</li>\n<li>하나의 객체에 대한 여러 동작을 구현해야할 때 상태 객체만 수정하므로 동작의 추가, 삭제 및 수정이 간단해집니다.</li>\n<li>State 패턴을 사용하면 객체의 상태에 따른 조건문(if/else, switch)이 줄어들어 코드가 간결해지고 가독성이 올라갑니다.</li>\n<li>상태 변경에 따른 행위 로직을 직접 구현 하지 않아도 됨으로써 확장에 유리하다.</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li>상태에 따른 조건문을 대신한 상태 객체가 증가하여 관리해야할 클래스의 수가 증가합니다.</li>\n</ul>\n<h2 id=\"스트래지티-패턴과의-비교\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%9E%98%EC%A7%80%ED%8B%B0-%ED%8C%A8%ED%84%B4%EA%B3%BC%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-label=\"스트래지티 패턴과의 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스트래지티 패턴과의 비교</h2>\n<ul>\n<li>상태 패턴은 패턴의 인터페이스에 정의된 <code class=\"language-text\">메소드들의 호출을 통해 현재의 전략을 전환할 수 있는 전략 패턴</code>으로 해석할 수 있습니다.</li>\n<li>\n<p>스트래티지 패턴에서와 <code class=\"language-text\">같은 다이어그램</code>을 사용한다. 하지만 이 두 패턴은 용도에 있어서 차이가 있습니다.</p>\n<ul>\n<li>스테이트 패턴을 사용할 때는 여러 상태 객체 중 <code class=\"language-text\">한 객체에서 모든 행동을 맡기게 됩니다</code>. 그 객체의 내부 상태에 따라 현재 상태를 나타내는 객체가 바뀌게 되고, 그 결과로 컨텍스트 객체의 행동도 자연스럽게 바뀌게 됩니다. <code class=\"language-text\">클라이언트는 상태 객체에 대해서 거의 아무것도 몰라도 됩니다</code>.</li>\n<li>스트래티지 패턴을 사용할 때는 일반적으로 클라이언트에서 컨텍스트 객체한테 <code class=\"language-text\">어떤 전략 객체를 사용할지를 지정해 줍니다</code>. 스트래티지 패턴은 주로 실행시에 전략 객체를 변경할 수 있는 <code class=\"language-text\">유연성</code>을 제공하기 위한 용도로 쓰입니다. 보통 가장 적합한 전략 객체를 선택해서 사용하게 됩니다.</li>\n<li>일반적으로 스트래티지 패턴은 서브클래스를 만드는 방법을 대신하여 <code class=\"language-text\">유연성</code>을 극대화하기 위한 용도로 쓰입니다. 상속을 이용해서 클래스의 행동을 정의하다 보면 행동을 변경해야 할 때 마음대로 변경하기가 힘듭니다. 하지만 스트래티지 패턴을 사용하면 구성을 통해 행동을 정의하는 객체를 유연하게 바꿀 수 있습니다.</li>\n<li>스테이트 패턴은 컨텍스트 객체에 수많은 <code class=\"language-text\">조건문</code>을 집어넣는 대신에 사용할 수 있는 패턴이라고 생각하면 됩니다. 행동을 상태 객체 내의 캡슐화시키면 컨텍스트 내의 상태 객체를 바꾸는 것만으로도 컨텍스트 객체의 행동을 바꿀 수 있으니까요.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// State : 상태에 따른 동작을 정의하는 인터페이스입니다</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onButton</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>light<span class=\"token operator\">:</span> Light<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">offButton</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>light<span class=\"token operator\">:</span> Light<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ConcreteState : State에서 정의된 메소드를 구현하는 클래스입니다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">ON</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> on <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">ON</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ON 클래스의 인스턴스로 초기화됨</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 초기화된 ON 클래스의 인스턴스를 반환함</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onButton</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">:</span> Light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ON 상태일 때 On 버튼을 눌러도 변화 없음</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'반응 없음'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">offButton</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">:</span> Light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    light<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">OFF</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Light Off!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">OFF</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> off <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">OFF</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OFF 클래스의 인스턴스로 초기화됨</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 초기화된 OFF 클래스의 인스턴스를 반환함</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>off<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onButton</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">:</span> Light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Off 상태일 때 On 버튼을 눌러도 On 상태임</span>\n    light<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ON</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Light On!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">offButton</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">:</span> Light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Off 상태일 때 Off 버튼을 눌러도 변화 없음</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'반응 없음'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Context</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Light</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">OFF</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">onButton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">offButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">offButton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> light <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Light</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlight<span class=\"token punctuation\">.</span><span class=\"token function\">offButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlight<span class=\"token punctuation\">.</span><span class=\"token function\">onButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlight<span class=\"token punctuation\">.</span><span class=\"token function\">offButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://victorydntmd.tistory.com/294\">🙈[디자인패턴] 스테이트 패턴 ( State Pattern )🐵</a></li>\n<li><a href=\"https://coding-start.tistory.com/247\">코딩스타트</a></li>\n<li><a href=\"https://boycoding.tistory.com/110\">소년코딩</a></li>\n<li><a href=\"https://www.crocus.co.kr/1541\">Crocus</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/design%20pattern/state-pattern/#%ED%96%89%EC%9C%84-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\">행위 소프트웨어 디자인 패턴</a></li>\n<li><a href=\"/design%20pattern/state-pattern/#%EB%B3%80%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80-%EC%9E%98-%EB%B3%80%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83%EA%B3%BC-%EB%B6%84%EB%A6%AC%ED%95%B4%EB%9D%BC-%EC%A6%89-%EB%B3%80%ED%95%98%EB%8A%94-%EB%85%80%EC%84%9D%EB%93%A4%EC%9D%84-%EC%BA%A1%EC%8A%90%ED%99%94%ED%95%B4%EB%9D%BC\">변하는 것은 잘 변하지 않는 것과 분리해라. 즉, 변하는 녀석들을 캡슐화해라!</a></li>\n<li><a href=\"/design%20pattern/state-pattern/#%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">싱글톤을 이용하는 이유</a></li>\n<li><a href=\"/design%20pattern/state-pattern/#%EC%9C%A0%ED%95%9C-%EC%83%81%ED%83%9C-%EA%B8%B0%EA%B3%84fsm%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">유한 상태 기계(FSM)를 구현할 수 있습니다.</a></li>\n<li><a href=\"/design%20pattern/state-pattern/#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"/design%20pattern/state-pattern/#%EB%8B%A8%EC%A0%90\">단점</a></li>\n<li><a href=\"/design%20pattern/state-pattern/#%EC%8A%A4%ED%8A%B8%EB%9E%98%EC%A7%80%ED%8B%B0-%ED%8C%A8%ED%84%B4%EA%B3%BC%EC%9D%98-%EB%B9%84%EA%B5%90\">스트래지티 패턴과의 비교</a></li>\n<li><a href=\"/design%20pattern/state-pattern/#%EC%BD%94%EB%93%9C\">코드</a></li>\n<li><a href=\"/design%20pattern/state-pattern/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","frontmatter":{"title":"state pattern","date":"March 21, 2021"}}},"pageContext":{"slug":"/design pattern/state-pattern/","previous":{"fields":{"slug":"/design pattern/strategy-pattern/"},"frontmatter":{"title":"strategy pattern","category":"design pattern","tags":["design pattern"],"draft":false}},"next":null,"tag":["design pattern"]}},"staticQueryHashes":["3128451518","96099027"]}