{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/design pattern/visitor-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"5160574d-8d34-59eb-bd9f-53a362bd6fae","excerpt":"알고리즘을 객체 구조에서 분리시키는 디자인 패턴 입니다. 실제 로직을 가지고 있는 객체(Visitor)가 로직을 적용할 객체(Element)를 방문하면서 실행하는 패턴입니다. 즉, 이라고 볼 수 있습니다. 로직과 구조가 분리되면  할 수 있습니다. 개방-폐쇄 원칙을 적용하는 방법의 하나입니다. 비지터 패턴은 하여, 방문 공간이 방문자를 맞이할 때, 이후에 대한 하는 패턴입니다. 보통 OOP…","html":"<h2 id=\"알고리즘을-객체-구조에서-분리시키는-디자인-패턴\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%A1%B0%EC%97%90%EC%84%9C-%EB%B6%84%EB%A6%AC%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\" aria-label=\"알고리즘을 객체 구조에서 분리시키는 디자인 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘을 객체 구조에서 분리시키는 디자인 패턴</h2>\n<ul>\n<li><code class=\"language-text\">기존 클래스 필드 정보를 유지하면서 새로운 연산을 추가하는 방식</code>입니다.</li>\n<li>\n<p>실제 로직을 가지고 있는 객체(Visitor)가 로직을 적용할 객체(Element)를 방문하면서 실행하는 패턴입니다. 즉, <code class=\"language-text\">로직과 구조를 분리하는 패턴</code>이라고 볼 수 있습니다. 로직과 구조가 분리되면 <code class=\"language-text\">구조를 수정하지 않고도 새로운 동작을 기존 객체 구조에 추가</code> 할 수 있습니다.</p>\n<ul>\n<li>개방-폐쇄 원칙을 적용하는 방법의 하나입니다.</li>\n</ul>\n</li>\n<li>\n<p>비지터 패턴은 <code class=\"language-text\">방문자와 방문 공간을 분리</code>하여, 방문 공간이 방문자를 맞이할 때, 이후에 대한 <code class=\"language-text\">행동을 방문자에게 위임</code>하는 패턴입니다.</p>\n<ul>\n<li>보통 OOP에서, 객체는 그 객체가 하는 행동을 메쏘드로 가지고 있습니다. 그리고 행동의 대상이 되는 객체가 있을 경우, 메쏘드의 파라미터로 입력받습니다. 그런데, 비지터 패턴은 행동의 대상이 되는 객체가 행동을 일으키는 객체를 입력으로 받습니다.</li>\n</ul>\n</li>\n<li>런타임 중에 하나 이상의 연산을 객체 집합에 적용되도록 해줍니다.</li>\n</ul>\n<h2 id=\"행동-패턴\" style=\"position:relative;\"><a href=\"#%ED%96%89%EB%8F%99-%ED%8C%A8%ED%84%B4\" aria-label=\"행동 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행동 패턴</h2>\n<ul>\n<li>행동 관련 패턴(Behavioral Pattern)은 클래스와 객체들이 상호작용하는 방법 및 역할을 분담하는 방법과 관련된 패턴입니다.</li>\n<li>Visitor 패턴에서는 요소 클래스의 실행 알고리즘을 변경하는 visitor 클래스를 사용합니다. 이러한 방식으로, 요소의 실행 알고리즘은 방문자가 다양 할 때 달라질 수 있습니다. 이 패턴은 <code class=\"language-text\">행동 패턴 카테고리</code>에 포함됩니다. 패턴에 따라 요소 객체는 방문자 객체가 요소 객체에 대한 작업을 처리하도록 <code class=\"language-text\">방문자 객체를 받아 들여야합니다</code>.</li>\n</ul>\n<h2 id=\"활용처\" style=\"position:relative;\"><a href=\"#%ED%99%9C%EC%9A%A9%EC%B2%98\" aria-label=\"활용처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>활용처</h2>\n<ul>\n<li>다양한 객체에 새로운 기능을 추가해야 하는데 <code class=\"language-text\">캡슐화가 별로 중요하지 않은 경우</code> 사용합니다.</li>\n<li>\n<p>데이터 구조보다 알고리즘이 더 자주 바뀌는 경우 사용합니다.</p>\n<ul>\n<li>적용해야 할 대상 객체가 잘 바뀌지 않고(특히 개수), 적용할 알고리즘이 추가될 가능성이 많은 상황일 때 사용을 고려해봐야 합니다.</li>\n</ul>\n</li>\n<li>자료 구조(데이터)와 자료 구조를 처리하는 로직(알고리즘)을 분리해야할 경우 사용합니다.</li>\n</ul>\n<h2 id=\"방문자-패턴을-사용하는-이유는\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EB%AC%B8%EC%9E%90-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94\" aria-label=\"방문자 패턴을 사용하는 이유는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방문자 패턴을 사용하는 이유는?</h2>\n<ul>\n<li>데이터 구조와 연산을 분리 하여 인스턴스 필드를 변경하지 않고 새로운 연산을 추가할 수 있습니다.</li>\n<li>domain에게 View를 위한 책임은 Visitor에게 위임하기 위해서 사용됩니다.</li>\n<li>새로운 연산을 더 만들고 싶다면, 새로운 방문자를 추가하면 됩니다.</li>\n</ul>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>\n<p>작업 대상(방문 공간)과 작업 항목(방문 공간을 가지고 하는 일)을 <code class=\"language-text\">분리</code> 시킵니다.</p>\n<ul>\n<li>작업 대상(방문 공간)은 단지 데이터를 담고있는 자료구조로 만듭니다.</li>\n<li>작업 주체(방문자)는 visit() 안에 이 작업 대상을 입력받아 작업 항목을 처리하면 됩니다.</li>\n<li>즉, 데이터와 알고리즘이 분리되어, <code class=\"language-text\">데이터의 독립성을 높여줍니다</code>.</li>\n</ul>\n</li>\n<li>작업 대상의 입장에서는 accept()로 인터페이스를 통일시켜, 사용자에게 <code class=\"language-text\">동일한 인터페이스를 제공</code>합니다.</li>\n<li>객체 집단 혹은 객체 구조에 대한 업무구현을 객체 외부로 위임할수 있습니다. (전략 패턴이나 커맨드 패턴보다 더 윗단계)</li>\n<li>command pattern을 전체 집단에 대한 처리 개념으로 확대함으로서, 사용자 입장에서 <code class=\"language-text\">매우 단순하게 전체 객체구조를 다룰수 있게 합니다</code>.</li>\n<li>연산에 대한 확장이 쉬워집니다. Visitor interface의 구현 클래스로 하나만 추가하면 전체 데이터 구조에 대한 연산이 추가됩니다.</li>\n<li>연산은 한 군데로 모으고 관련되지 데이터 구조에서 연산을 때어낼 수 있습니다.</li>\n<li>계층구조로 방문하게 됩니다.</li>\n<li>상태를 누적할 수 있습니다. 연산이 분산되어 있지 않아서 하나의 상태를 변경하면서 모든 노드를 방문할 수 있습니다. 보통은 노드를 방문할 때마다 데이터가 누적됩니다. 만약 로직이 분산되어있었다면 전역변수를 이용하던 연산에 의해 전달되던 깔끔하지 못하게 공유될 것입니다.</li>\n</ul>\n<h3 id=\"오버로딩이-가능할-시에-장점자바스크립트는-오버로딩이-되지-않습니다\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%A0-%EC%8B%9C%EC%97%90-%EC%9E%A5%EC%A0%90%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"오버로딩이 가능할 시에 장점자바스크립트는 오버로딩이 되지 않습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버로딩이 가능할 시에 장점(자바스크립트는 오버로딩이 되지 않습니다.)</h3>\n<ul>\n<li>업무의 추가나, 업무 대상객체의 추가 시에 instanceOf를 사용하지 않아도 되도록 하기 때문에, 안정적이고 확장에 용이한 구조로 만듭니다.</li>\n<li>visitor의 구별을 위해 instanceOf를 사용하지 않기 때문에, proxy 방식으로 객체의 제어가 가능합니다. (Proxy방식에서는 객체생성 의존관계를 느슨하게 해줄수 있습니다. 그런데 instanceOf 방식으로 객체를 판별해버리면 Proxy는 모두 같은 proxy객체로 판별해 버리기 때문에 문제가 생깁니다.)</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li>\n<p>객체간에 <code class=\"language-text\">결합도가 높은 편</code>이고, 비지터가 객체의 속성값을 직접 제어하므로 <code class=\"language-text\">캡슐화가 약해집니다</code>.(반복자 패턴과는 정반대)</p>\n<ul>\n<li><code class=\"language-text\">데이터의 은닉을 깰 수 있습니다</code>. 내부 상태에 접근하는 내용들에 대해서 모두 공개 인터페이스로 만들 수 밖에 없어서 외부에 데이터가 노출하게 됩니다.</li>\n<li>서로 visit()와 accept()에 의존합니다.</li>\n</ul>\n</li>\n<li>\n<p>새로운 ConcreteElement 추가는 어렵습니다. 새로운 데이터 노드가 추가될 때마다 모든 방문자에 이에 대응하는 로직을 구현해야합니다.</p>\n<ul>\n<li>새로운 작업 대상(방문 공간)이 추가될 때마다 작업 주체(방문자)도 이에 대한 로직을 추가해야 합니다.</li>\n</ul>\n</li>\n<li>최초 구조 잡는 것이 쉽지 않습니다.</li>\n</ul>\n<h2 id=\"reverse-visiter-구조\" style=\"position:relative;\"><a href=\"#reverse-visiter-%EA%B5%AC%EC%A1%B0\" aria-label=\"reverse visiter 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reverse visiter 구조</h2>\n<h3 id=\"client\" style=\"position:relative;\"><a href=\"#client\" aria-label=\"client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Client</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectoryEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectoryEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Lkt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectoryEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Lkt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> file1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> file3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> file4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbin<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbin<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>file3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLkt<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>file4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Lkt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"element\" style=\"position:relative;\"><a href=\"#element\" aria-label=\"element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Element</h3>\n<ul>\n<li>구조를 구성하는 인터페이스이자 Visitor가 방문하여 수행해야 할 대상입니다.</li>\n<li>\n<p>방문자를 인자로 받아들이는 Accept 연산을 정의합니다.</p>\n<ul>\n<li>Visitor 를 실행할 수 있는 메소드를 하나 가지고 있으며 보통 accept 라는 이름으로 정의합니다.</li>\n<li>내부적으로 <code class=\"language-text\">visitor.visit(this)</code>를 호출합니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> Visitor<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IElement</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> Visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"concreteelement\" style=\"position:relative;\"><a href=\"#concreteelement\" aria-label=\"concreteelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ConcreteElement</h3>\n<ul>\n<li>Element를 구체적으로 구현한 클래스 입니다.</li>\n<li>Accept에 대해 구현하며 객체의 연산 노드를 담당합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileEntry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Entry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> Visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DirectoryEntry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Entry</span> <span class=\"token punctuation\">{</span>\n  directory<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>directory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> Visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"visitor\" style=\"position:relative;\"><a href=\"#visitor\" aria-label=\"visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visitor</h3>\n<ul>\n<li>Element를 방문하고 동작을 구현하기 위한 인터페이스 입니다.</li>\n<li>\n<p><code class=\"language-text\">visit(Element)</code>을 공용 인터페이스로 사용합니다.</p>\n<ul>\n<li>Element는 방문 공간입니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Visitor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"concretevisitor\" style=\"position:relative;\"><a href=\"#concretevisitor\" aria-label=\"concretevisitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ConcreteVisitor</h3>\n<ul>\n<li>Visitor를 구체적으로 구현한 클래스 입니다.</li>\n<li>Visitor의 구현으로 각 ConcreteElement에 대한 처리 로직을 구현합니다. 알고리즘이 운영될 수 있는 상황정보를 제공하며 자체 상태를 저장합니다. 구조를 순회하며 누적되는 경우가 많습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewVisitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Visitor</span> <span class=\"token punctuation\">{</span>\n  path <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FileEntry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> target<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'.file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DirectoryEntry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">.</span>directory<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">.</span>directory<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"일반-visiter\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98-visiter\" aria-label=\"일반 visiter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 visiter</h3>\n<ul>\n<li>객체 구조 내의 원소들을 나열할 수 있습니다. Composite 패턴으로 만든 복찹체일 수도 있고, List나 Set등의 컬렉션일 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">accept</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token operator\">:</span> ComputerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Keyboard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token operator\">:</span> ComputerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Keyboard22</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token operator\">:</span> ComputerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Monitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token operator\">:</span> ComputerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token operator\">:</span> ComputerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ObjectStructure</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">{</span>\n  parts<span class=\"token operator\">:</span> ComputerPart<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Mouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Monitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Keyboard22</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token operator\">:</span> ComputerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ComputerPartVisitor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">visit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> ComputerPart<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ComputerPartDisplayVisitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPartVisitor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> ComputerPart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 로직</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Displaying Computer.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Mouse</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 로직</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Displaying Mouse.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 로직</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Displaying Keyboard.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Monitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 로직</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Displaying Monitor.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncomputer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ComputerPartDisplayVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"이중-디스패치double-dispatch\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A4%91-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98double-dispatch\" aria-label=\"이중 디스패치double dispatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이중 디스패치(Double Dispatch)</h2>\n<ul>\n<li>결론적으로 Visitor Pattern은 Double Dispatch가 핵심입니다. 이는 클래스를 변경하지 않으면서 해당 클래스에 메서드를 추가하는 패턴입니다. 위 예제에서는 element.Accept(visitor)를 통해 내부에서 visitor.visit(this)를 하게되므로 이를 Double Dispatch라고 부르며 실제로 Accept 메서드는 visitor에게 함수 실행 로직을 위임함으로써 실제로 기존 코드를 변경 없이 Accept에 대한 구현을 동적으로 변화시킬 수 있습니다. 언어적으로 다중 디스패치를 지원한다면 Visitor 패턴은 필요하지 않을 수 있습니다.</li>\n</ul>\n<h2 id=\"다른-패턴과-비교\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%ED%8C%A8%ED%84%B4%EA%B3%BC-%EB%B9%84%EA%B5%90\" aria-label=\"다른 패턴과 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 패턴과 비교</h2>\n<ul>\n<li>객체에 대한 행위의 내용을 외부 클래스로 빼서 객체의 행위를 위임하기도 합니다. 이런 타입의 패턴으로 <code class=\"language-text\">전략패턴</code>, <code class=\"language-text\">커맨드 패턴</code>, <code class=\"language-text\">비지터 패턴</code> 등이 있습니다. 셋 모두 객체의 행위를 바깥으로 위임하는 것이지만, <code class=\"language-text\">전략패턴이 하나의 객체에 대해 여러 동작을 하게 하거나(1:N)</code>, <code class=\"language-text\">커맨드 패턴이 하나의 객체에 대하 하나의 동작(+보조동작)에 대한 설계방식(1:1)</code>인 반면에, <code class=\"language-text\">방문자 패턴은 여러 객체들에 대해 객체의 동작들을 지정하는 방식(N:N)</code> 입니다.</li>\n</ul>\n<hr>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EB%B9%84%EC%A7%80%ED%84%B0_%ED%8C%A8%ED%84%B4\">비지터 패턴</a></li>\n<li><a href=\"https://dailyheumsi.tistory.com/216\">[디자인 패턴 15편] 행동 패턴, 방문자 (Visitor)</a></li>\n<li><a href=\"https://huisam.tistory.com/entry/Visitor\">Visitor Pattern - 비지터 패턴, 방문자 패턴</a></li>\n<li><a href=\"https://kunoo.tistory.com/entry/%ED%96%89%EC%9C%84-%ED%8C%A8%ED%84%B4-Visitor-pattern-%EB%B9%84%EC%A7%80%ED%84%B0-%ED%8C%A8%ED%84%B4\">Kunoo</a></li>\n<li><a href=\"https://thecodinglog.github.io/design/2019/10/29/visitor-pattern.html\">방문자 패턴 - Visitor pattern</a></li>\n<li><a href=\"https://lktprogrammer.tistory.com/58\">12 방문자 패턴 (Visitor Pattern)</a></li>\n<li><a href=\"https://sticky32.tistory.com/entry/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-%EB%B0%A9%EB%AC%B8%EC%9E%90-%ED%8C%A8%ED%84%B4Visitor-Pattern\">Sticky</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/design%20pattern/visitor-pattern/#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%A1%B0%EC%97%90%EC%84%9C-%EB%B6%84%EB%A6%AC%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\">알고리즘을 객체 구조에서 분리시키는 디자인 패턴</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#%ED%96%89%EB%8F%99-%ED%8C%A8%ED%84%B4\">행동 패턴</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#%ED%99%9C%EC%9A%A9%EC%B2%98\">활용처</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#%EB%B0%A9%EB%AC%B8%EC%9E%90-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94\">방문자 패턴을 사용하는 이유는?</a></li>\n<li>\n<p><a href=\"/design%20pattern/visitor-pattern/#%EC%9E%A5%EC%A0%90\">장점</a></p>\n<ul>\n<li><a href=\"/design%20pattern/visitor-pattern/#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%A0-%EC%8B%9C%EC%97%90-%EC%9E%A5%EC%A0%90%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\">오버로딩이 가능할 시에 장점(자바스크립트는 오버로딩이 되지 않습니다.)</a></li>\n</ul>\n</li>\n<li><a href=\"/design%20pattern/visitor-pattern/#%EB%8B%A8%EC%A0%90\">단점</a></li>\n<li>\n<p><a href=\"/design%20pattern/visitor-pattern/#reverse-visiter-%EA%B5%AC%EC%A1%B0\">reverse visiter 구조</a></p>\n<ul>\n<li><a href=\"/design%20pattern/visitor-pattern/#client\">Client</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#element\">Element</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#concreteelement\">ConcreteElement</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#visitor\">Visitor</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#concretevisitor\">ConcreteVisitor</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#%EC%9D%BC%EB%B0%98-visiter\">일반 visiter</a></li>\n</ul>\n</li>\n<li><a href=\"/design%20pattern/visitor-pattern/#%EC%9D%B4%EC%A4%91-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98double-dispatch\">이중 디스패치(Double Dispatch)</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#%EB%8B%A4%EB%A5%B8-%ED%8C%A8%ED%84%B4%EA%B3%BC-%EB%B9%84%EA%B5%90\">다른 패턴과 비교</a></li>\n<li><a href=\"/design%20pattern/visitor-pattern/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","frontmatter":{"title":"visitor pattern","date":"March 13, 2021"}}},"pageContext":{"slug":"/design pattern/visitor-pattern/","previous":{"fields":{"slug":"/backend/typeorm-톺아보기/"},"frontmatter":{"title":"typeorm 톺아보기","category":"backend","tags":["node","sql","db","rdb","typeorm","orm"],"draft":false}},"next":{"fields":{"slug":"/design pattern/strategy-pattern/"},"frontmatter":{"title":"strategy pattern","category":"design pattern","tags":["design pattern"],"draft":false}},"tag":[]}},"staticQueryHashes":["3128451518","96099027"]}