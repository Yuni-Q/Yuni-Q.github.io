{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/design pattern/memento/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"d7dce6a0-7b31-54a9-bb31-7a38fb07c480","excerpt":"캡슐화를 위배하지 않은 채 내부 상태의 스냅샷을 찍는 패턴  어떤 객체의 내부 상태를 잡아내고 신체화시켜, 이후에 해당 객체가 그 상태로 다시 되돌아올 수 있도록 하는 패턴입니다. 메멘토 패턴은 객체의 상태 정보를 저장하고 사용자의 필요에 의하여 원하는 시점의 데이터를 복원(Rollback…","html":"<h2 id=\"캡슐화를-위배하지-않은-채-내부-상태의-스냅샷을-찍는-패턴\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94%EB%A5%BC-%EC%9C%84%EB%B0%B0%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EC%B1%84-%EB%82%B4%EB%B6%80-%EC%83%81%ED%83%9C%EC%9D%98-%EC%8A%A4%EB%83%85%EC%83%B7%EC%9D%84-%EC%B0%8D%EB%8A%94-%ED%8C%A8%ED%84%B4\" aria-label=\"캡슐화를 위배하지 않은 채 내부 상태의 스냅샷을 찍는 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화를 위배하지 않은 채 내부 상태의 스냅샷을 찍는 패턴</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">캡슐화를 위배하지 않는 채</code> 어떤 객체의 내부 상태를 잡아내고 신체화시켜, 이후에 해당 객체가 그 상태로 다시 되돌아올 수 있도록 하는 패턴입니다.</p>\n<ul>\n<li>메멘토 패턴은 객체의 상태 정보를 저장하고 사용자의 필요에 의하여 원하는 시점의 데이터를 복원(Rollback) 할 수 있는 패턴을 의미합니다.</li>\n<li>객체를 이전의 상태로 복구시켜야 하는 경우에는 메멘토 패턴을 쓰면 됩니다. 예를 들어 사용자가 ‘직업 취소’를 요청하는 경우를 생각하면 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"행위-패턴\" style=\"position:relative;\"><a href=\"#%ED%96%89%EC%9C%84-%ED%8C%A8%ED%84%B4\" aria-label=\"행위 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행위 패턴</h2>\n<ul>\n<li>디자인 패턴에는 생성, 구조, 행위, 3가지 분류가 있습니다.</li>\n<li>메멘토\u001d 패턴은 <code class=\"language-text\">행위</code>에 대한 패턴입니다.</li>\n</ul>\n<h2 id=\"객체-패턴object-patterns\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%ED%8C%A8%ED%84%B4object-patterns\" aria-label=\"객체 패턴object patterns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 패턴(Object patterns)</h2>\n<ul>\n<li>객체 패턴(Object patterns)에서는 객체 사이의 관계를 다루며, 객체 상이의 관계는 보통 구성을 통해서 정의 됩니다. 객체 패턴에서는 일반적으로 실행 중에 관계가 생성되기 때문에 더 동적이고 유연 합니다.</li>\n</ul>\n<h2 id=\"메맨토-패턴\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%A7%A8%ED%86%A0-%ED%8C%A8%ED%84%B4\" aria-label=\"메맨토 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메맨토 패턴</h2>\n<ul>\n<li>객체 내부 상태를 저장하므로써 객체 상태가 변경되었을 때 이전 상태(원상태)로의 복구가 가능합니다.</li>\n<li>이 패턴이 주로 사용되는 곳은 에러 콜백, 삭제에 대한 되돌림와 같은 유저 액션입니다.</li>\n<li>특히나 메멘토 패턴은 캡슐화를 해치지 않는 선에서 내부 상태에 대한 원복을 목표로 하기 때문에, 객체지향 관점에서 효과적이라 볼 수 있습니다. 하지만 캡슐화가 잘 된 객체는 데이터 구조가 잘 숨겨져 있기 때문에 객체의 외부에서 접근이 쉽지 않습니다.</li>\n</ul>\n<h2 id=\"객체의-캡슐화가-훼손되지-않아야-합니다\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%BA%A1%EC%8A%90%ED%99%94%EA%B0%80-%ED%9B%BC%EC%86%90%EB%90%98%EC%A7%80-%EC%95%8A%EC%95%84%EC%95%BC-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"객체의 캡슐화가 훼손되지 않아야 합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체의 캡슐화가 훼손되지 않아야 합니다.</h2>\n<ul>\n<li>객체의 내부 상태가 외부적으로 저장되어야 이후에 객체가 그 상태를 복구할 수 있습니다.</li>\n<li>문제는 잘 디자인된 객체는 캡슐화되어 있기 때문에 그 표현(데이터 구조)이 내부에 숨겨져 있어 객체의 외부에서 접근할 수 없다는 것입니다.</li>\n</ul>\n<h2 id=\"메멘토-패턴의-장점\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"메멘토 패턴의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메멘토 패턴의 장점</h2>\n<ul>\n<li>저장된 상태를 핵심 객체와는 다른 별도의 객체에 보관하기 때문에 안전합니다.</li>\n<li>핵심 객체의 데이터를 계속해서 캡슐화된 상태로 유지할 수 있습니다.</li>\n<li>복구 기능을 구현하기가 쉽습니다.</li>\n</ul>\n<h2 id=\"메멘토-패턴-활용법-및-단점\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4-%ED%99%9C%EC%9A%A9%EB%B2%95-%EB%B0%8F-%EB%8B%A8%EC%A0%90\" aria-label=\"메멘토 패턴 활용법 및 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메멘토 패턴 활용법 및 단점</h2>\n<ul>\n<li>메멘토 객체를 써서 상태를 저장합니다.</li>\n<li>상태를 저장하고 복구하는 데 시간이 오래 걸릴 수 있다는 단점이 있습니다.</li>\n<li>자바 시스템에서는 시스템의 상태를 저장할 때 직렬화를 사용하는 것이 좋습니다.</li>\n</ul>\n<h2 id=\"메멘토-패턴은-3개의-객체로-구현됩니다\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4%EC%9D%80-3%EA%B0%9C%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EA%B5%AC%ED%98%84%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-label=\"메멘토 패턴은 3개의 객체로 구현됩니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메멘토 패턴은 3개의 객체로 구현됩니다.</h2>\n<ul>\n<li>오리지네이터 (Originator)</li>\n<li>케어테이커 (Caretaker)</li>\n<li>메멘토 (Memento)</li>\n<li>디자인 패턴은 인터페이스에 정의해야 하는 중요 요소가 무엇이고 어떤 종류의 데이터를 주고받아야 하는지 식별하여 인터페이스를 정의하도록 도와줍니다. 가끔 디자인 패턴은 인터페이스에 넣지 말아야 할 것을 알려주기도 합니다. 메멘토 패턴은 객체의 내부 상태를 어떻게 저장하고 캡슐화해야 하는지를 정의함으로써 객체가 나중에 그 상태로 복구할 수 있는 방법을 알려줍니다. 이 패턴에서는 객체에 두 개의 인터페이스를 정의하도록 규정합니다. 이 두 가지는 사용자가 상태를 저장하고 복사할 수 있도록 해 주는 인터페이스와 원본 객체가 그 메멘토에서 상태를 저장하고 검색하기 위해 사용하는 인터페이스입니다.</li>\n</ul>\n<h3 id=\"오리지네이터-originator---작성자\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A6%AC%EC%A7%80%EB%84%A4%EC%9D%B4%ED%84%B0-originator---%EC%9E%91%EC%84%B1%EC%9E%90\" aria-label=\"오리지네이터 originator   작성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오리지네이터 (Originator) - 작성자</h3>\n<ul>\n<li>오리지네이터는 내부의 상태를 가지고 있는 객체입니다.</li>\n<li>단독으로 객체에 접근할 수 있습니다.</li>\n<li>메멘토 객체에 내부 상태를 저장합니다.</li>\n<li>메멘토 객체로부터 이전 상태를 복구합니다.</li>\n<li>메멘토를 생성한 오리지네이터만이 접근이 허용된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Originator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> state1<span class=\"token operator\">:</span> string\n  <span class=\"token keyword\">public</span> state2<span class=\"token operator\">:</span> string\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state1<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> state2<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state1 <span class=\"token operator\">=</span> state1\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state2 <span class=\"token operator\">=</span> state2\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">createMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Memento <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Memento</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">restoreMemento</span><span class=\"token punctuation\">(</span>memento<span class=\"token operator\">:</span> Memento<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state1 <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span>state1\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state2 <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span>state2\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"케어테이커-caretaker---관리인\" style=\"position:relative;\"><a href=\"#%EC%BC%80%EC%96%B4%ED%85%8C%EC%9D%B4%EC%BB%A4-caretaker---%EA%B4%80%EB%A6%AC%EC%9D%B8\" aria-label=\"케어테이커 caretaker   관리인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>케어테이커 (Caretaker) - 관리인</h3>\n<ul>\n<li>케어테이커는 오리지네이터에게 메멘토 객체를 요청합니다. 그 뒤 예정된 일련의 명령을 수행합니다. 명령 이전의 상태로 되돌리기 위해 메멘토 객체를 오리지네이터에 반환합니다.</li>\n<li>케어테이커는 오리지네이터에 대해서 액션을 제공하지만, 변경에 대한 취소 및 저장에 대해서만 제공합니다. <code class=\"language-text\">다른 기능도 제공하게 되면 단일-책임원칙에 위배</code>되기 때문입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CareTaker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> memento<span class=\"token operator\">:</span> Memento<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">saving</span><span class=\"token punctuation\">(</span>originator<span class=\"token operator\">:</span> Originator<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memento<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">createMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">restoring</span><span class=\"token punctuation\">(</span>originator<span class=\"token operator\">:</span> Originator<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memento<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    originator<span class=\"token punctuation\">.</span><span class=\"token function\">restoreMemento</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memento<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memento<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"메멘토-memento---스냅샷\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%A9%98%ED%86%A0-memento---%EC%8A%A4%EB%83%85%EC%83%B7\" aria-label=\"메멘토 memento   스냅샷 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메멘토 (Memento) - 스냅샷</h3>\n<ul>\n<li>메멘토 객체 자신은 불투명 자료형(케어테이커는 변경할 수 없거나 변경해서는 안 되는)입니다.</li>\n<li>메멘토 객체는 Originator와 반대로, <code class=\"language-text\">변경되기 이 전의 상태</code>를 갖고있는 객체입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Memento</span> <span class=\"token punctuation\">{</span>\n  readonly state1<span class=\"token operator\">:</span> string\n  readonly state2<span class=\"token operator\">:</span> string\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state1<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> state2<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state1 <span class=\"token operator\">=</span> state1\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state2 <span class=\"token operator\">=</span> state2\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"동작\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9E%91\" aria-label=\"동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동작</h2>\n<ul>\n<li>케어테이커는 오리지네이터에 대해서 변경에 대한 실행 취소를 진행합니다.</li>\n<li>그러기 위해 오리지네이터에게 메멘토 객체를 요청합니다.</li>\n<li>오리지네이터는 내부 상태를 변경하기위해서 메멘토 객체를 반환하며 케어테이커는 반환된 메멘토 객체를 적용합니다.</li>\n<li>careTaker 객체는 originator 객체를 받아 저장 및 복원을 진행합니다. Originator는 Memento를 만들어낼 뿐이지, 자신의 상태에 대해서만 가지고 있습니다. 실제로 일을 하는 곳은 CareTaker라 보시면되고, 스냅샷을 Memento라고 이해하시면 되겠습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> originator<span class=\"token operator\">:</span> Originator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Originator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> careTaker<span class=\"token operator\">:</span> CareTaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CareTaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncareTaker<span class=\"token punctuation\">.</span><span class=\"token function\">saving</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noriginator<span class=\"token punctuation\">.</span>state1 <span class=\"token operator\">=</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">;</span>\noriginator<span class=\"token punctuation\">.</span>state2 <span class=\"token operator\">=</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncareTaker<span class=\"token punctuation\">.</span><span class=\"token function\">restoring</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"주의\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98\" aria-label=\"주의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의</h2>\n<ul>\n<li>메멘토 패턴을 사용해 현재 상태를 저장하고, 롤백하는 구현을 쉽게 진행하였습니다. 다만 상태가 많아지면 메모리를 많이 먹으므로 최대 배열의 갯수를 잡아 코딩을 진행하는게 좋습니다.</li>\n<li>메멘토 패턴은 커멘드 패턴을 통해 커맨드에 대한 롤백 및 미래에 대한 커맨드를 기억하고 추가하거나 하여 시뮬레이팅 시스템을 구현할 수도 있습니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://vallista.kr/2020/06/07/TypeScript-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4/\">TypeScript 디자인 패턴 - 메멘토 패턴</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EB%A9%94%EB%A9%98%ED%86%A0_%ED%8C%A8%ED%84%B4\">메멘토 패턴</a></li>\n<li><a href=\"https://sticky32.tistory.com/entry/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4Memento-Pattern\">Sticky</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/design%20pattern/memento/#%EC%BA%A1%EC%8A%90%ED%99%94%EB%A5%BC-%EC%9C%84%EB%B0%B0%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EC%B1%84-%EB%82%B4%EB%B6%80-%EC%83%81%ED%83%9C%EC%9D%98-%EC%8A%A4%EB%83%85%EC%83%B7%EC%9D%84-%EC%B0%8D%EB%8A%94-%ED%8C%A8%ED%84%B4\">캡슐화를 위배하지 않은 채 내부 상태의 스냅샷을 찍는 패턴</a></li>\n<li><a href=\"/design%20pattern/memento/#%ED%96%89%EC%9C%84-%ED%8C%A8%ED%84%B4\">행위 패턴</a></li>\n<li><a href=\"/design%20pattern/memento/#%EA%B0%9D%EC%B2%B4-%ED%8C%A8%ED%84%B4object-patterns\">객체 패턴(Object patterns)</a></li>\n<li><a href=\"/design%20pattern/memento/#%EB%A9%94%EB%A7%A8%ED%86%A0-%ED%8C%A8%ED%84%B4\">메맨토 패턴</a></li>\n<li><a href=\"/design%20pattern/memento/#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%BA%A1%EC%8A%90%ED%99%94%EA%B0%80-%ED%9B%BC%EC%86%90%EB%90%98%EC%A7%80-%EC%95%8A%EC%95%84%EC%95%BC-%ED%95%A9%EB%8B%88%EB%8B%A4\">객체의 캡슐화가 훼손되지 않아야 합니다.</a></li>\n<li><a href=\"/design%20pattern/memento/#%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90\">메멘토 패턴의 장점</a></li>\n<li><a href=\"/design%20pattern/memento/#%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4-%ED%99%9C%EC%9A%A9%EB%B2%95-%EB%B0%8F-%EB%8B%A8%EC%A0%90\">메멘토 패턴 활용법 및 단점</a></li>\n<li>\n<p><a href=\"/design%20pattern/memento/#%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4%EC%9D%80-3%EA%B0%9C%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EA%B5%AC%ED%98%84%EB%90%A9%EB%8B%88%EB%8B%A4\">메멘토 패턴은 3개의 객체로 구현됩니다.</a></p>\n<ul>\n<li><a href=\"/design%20pattern/memento/#%EC%98%A4%EB%A6%AC%EC%A7%80%EB%84%A4%EC%9D%B4%ED%84%B0-originator---%EC%9E%91%EC%84%B1%EC%9E%90\">오리지네이터 (Originator) - 작성자</a></li>\n<li><a href=\"/design%20pattern/memento/#%EC%BC%80%EC%96%B4%ED%85%8C%EC%9D%B4%EC%BB%A4-caretaker---%EA%B4%80%EB%A6%AC%EC%9D%B8\">케어테이커 (Caretaker) - 관리인</a></li>\n<li><a href=\"/design%20pattern/memento/#%EB%A9%94%EB%A9%98%ED%86%A0-memento---%EC%8A%A4%EB%83%85%EC%83%B7\">메멘토 (Memento) - 스냅샷</a></li>\n</ul>\n</li>\n<li><a href=\"/design%20pattern/memento/#%EB%8F%99%EC%9E%91\">동작</a></li>\n<li><a href=\"/design%20pattern/memento/#%EC%A3%BC%EC%9D%98\">주의</a></li>\n<li><a href=\"/design%20pattern/memento/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","frontmatter":{"title":"memento","date":"February 21, 2021"}}},"pageContext":{"slug":"/design pattern/memento/","previous":{"fields":{"slug":"/design pattern/observer-pattern/"},"frontmatter":{"title":"observer pattern","category":"design pattern","tags":["design pattern"],"draft":false}},"next":null,"tag":["design pattern"]}},"staticQueryHashes":["3128451518","96099027"]}