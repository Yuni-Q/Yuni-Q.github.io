{"componentChunkName":"component---src-templates-blog-post-js","path":"/design pattern/mvc-mvp-mvvm/","result":{"data":{"site":{"siteMetadata":{"title":"yuniq 블로그","author":"yuniq","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuniq","utterances":"yuniq"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"e647e1a3-af7a-5fc1-b132-6e09a5f38422","excerpt":"Model 데이터를 처리하는 역할 입니다. 애플리케이션의 정보(데이터)를 처리하는 컴포넌트를 말합니다. 데이터베이스에 연결하고 데이터를 추출하거나 저장, 삭제, 업데이트, 변환 등의 작업을 수행하는 역할을 합니다. View 사용자가 보는 화면입니다. 화면에 표시되는 부분입니다. 추출한 데이터나 일반적인 텍스트 데이터를 표시하거나 input, button 등의 사용자 인터페이스 요소, 데이터 및 객체의 입력, 출력 또는 사용자와의 상호작용을 위한 인터페이스를 표시하는 영역입니다. Controller…","html":"<h2 id=\"model\" style=\"position:relative;\"><a href=\"#model\" aria-label=\"model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h2>\n<ul>\n<li>데이터를 처리하는 역할 입니다.</li>\n<li>애플리케이션의 정보(데이터)를 처리하는 컴포넌트를 말합니다.</li>\n<li>데이터베이스에 연결하고 데이터를 추출하거나 저장, 삭제, 업데이트, 변환 등의 작업을 수행하는 역할을 합니다.</li>\n</ul>\n<h2 id=\"view\" style=\"position:relative;\"><a href=\"#view\" aria-label=\"view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View</h2>\n<ul>\n<li>사용자가 보는 화면입니다.</li>\n<li>화면에 표시되는 부분입니다.</li>\n<li>추출한 데이터나 일반적인 텍스트 데이터를 표시하거나 input, button 등의 사용자 인터페이스 요소, 데이터 및 객체의 입력, 출력 또는 사용자와의 상호작용을 위한 인터페이스를 표시하는 영역입니다.</li>\n</ul>\n<h2 id=\"controller\" style=\"position:relative;\"><a href=\"#controller\" aria-label=\"controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller</h2>\n<ul>\n<li>데이터와 뷰를 연결, 제어하는 역할 입니다.</li>\n<li>어플리케이션에서 각 요소들의 연결관계를 설정하고 데이터와 시각적 부분의 연결 등을 관리합니다.</li>\n<li>url로부터 입력되는 정보로부터 어떤 데이터와 뷰를 연결할 지 등을 제어핣니다.</li>\n<li>사용자가 Controller에 작업을 요청하면 Controller는 Model을 호출하여 데이터를 처리하고 Model이 데이터를 처리한 결과를 View에 보내고 이 결과를 사용자가 보게 됩니다.</li>\n<li>Model과 View를 이어주는 다리 역할, 모든 ‘이벤트’를 처리하는 부분, 메인 조직을 담당합니다.</li>\n<li>Model과 View 내의 클래스들 간 정보 교환하는데 사용합니다.</li>\n</ul>\n<h2 id=\"mvc\" style=\"position:relative;\"><a href=\"#mvc\" aria-label=\"mvc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC</h2>\n<ul>\n<li>객체지향 프로그래밍에서 MVC란 사용자 인터페이스를 성공적이며 효과적으로 데이터 모형에 관련 시키기 위한 방법론 또는 설계 방식중 하나로써, 목적 코드의 재사용에 유용한 것은 물론, 사용자 인터페이스와 응용프로그램 개발에 소요되는 시간을 현저하게 줄여주는 방식입니다.</li>\n<li>Model, View, Controller의 약자로 User - View - Controller - Model - Controller - View - User의 구조를 가지고 있습니다.</li>\n<li>\n<p>응용프로그램의 시각적 부분과 이면의 동작을 제어를 처리하는 부분(비즈니스 로직)을 분리하여 서로에 미치는 영향 없이도 응용 프로글램을 변경할 수 있습니다.</p>\n<ul>\n<li>데이터베이스나 제어프로그램의 변경 없이 시각적인 부분만 수정하려면 View에 해당하는 부분만 수정하면 됩니다.</li>\n<li>시각적인 부분과 관계 없이 데이터 처리 부분만 수정하려면 Model 부분만 수정하면 됩니다.</li>\n<li>프로그램간 연결과 제어를 수정하려면 controller 부분만 수정하면 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mvc-패턴의-장점\" style=\"position:relative;\"><a href=\"#mvc-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"mvc 패턴의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 패턴의 장점</h3>\n<ul>\n<li>전형적인 어플리케이션 OOP 구조로써 가장 단순하며 보편적으로 많이 사용하는 디자인 패턴입니다.</li>\n<li>맡은 일에만 집중할 수 있게 되기 때문에 효율성을 높이고 유지보수가 편리해지고, 애플리케이션의 확장성과 유연성이 늘어나고, 중복코딩의 문제점이 사라집니다.</li>\n<li>유저 인터페이스와 비지니스 로직을 분리할수 있습니다.</li>\n</ul>\n<h3 id=\"mvc-패턴의-단점\" style=\"position:relative;\"><a href=\"#mvc-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"mvc 패턴의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 패턴의 단점</h3>\n<ul>\n<li>View와 Model 사이의 의존성이 높습니다. 따라서 애플리케이션이 커질수록 복잡하고 유지보수가 어려워질 수 있습니다.</li>\n</ul>\n<h2 id=\"mvp-패턴\" style=\"position:relative;\"><a href=\"#mvp-%ED%8C%A8%ED%84%B4\" aria-label=\"mvp 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVP 패턴</h2>\n<ul>\n<li>MVC패턴은 View와 Model 사이의 의존성이 높고, 이 의존성이 높기 때문에 어플리케이션이 커지면 커질수록 더 복잡해지고 유지보수가 힘들어진다는 단점을 가지고 있습니다.</li>\n<li>MVP는 Model-View-Presenter의 약자로 Model과 View는 MVC와 동일하지만 Controller 대신에 Presenter가 존재합니다.</li>\n<li>Model과 View는 서로를 알 필요가 없이 Presenter만 가리킵니다. 따라서 Model과 View의 의존성은 사라지게 됩니다.</li>\n<li>사용자들의 입력들은 View를 통해서 데이터를 Presenter에 요청하고 Presenter는 Model에게 데이터를 요청합니다. Model은 Presenter에게 응답하여 다시 View로 전송해서 화면에 나타내게 되는 동작 순서를 가지고 있습니다.</li>\n<li>View는 기본적으로는 MVC와 같이 화면에 보여지는 요소를 맡는 것은 동일하나 <code class=\"language-text\">Controller가 사라짐에 따라서 이제 사용자의 입력을 받는 역할</code>을 겸하게 됩니다.</li>\n<li>Presenter는 View에서 요청한 정보로 Model을 가공하여 View에 전달해주는 부분입니다. 본질적으로는 MVC의 컨트롤러와 같지만 <code class=\"language-text\">뷰에 연결되는 것이 아니라 그냥 인터페이스</code>라는 점이 다릅니다.</li>\n</ul>\n<h3 id=\"mvp-패턴의-장점\" style=\"position:relative;\"><a href=\"#mvp-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"mvp 패턴의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVP 패턴의 장점</h3>\n<ul>\n<li>MVC와 달리 View와 Model의 의존성이 사라졌습니다.</li>\n</ul>\n<h3 id=\"mvp-패턴의-단점\" style=\"position:relative;\"><a href=\"#mvp-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"mvp 패턴의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVP 패턴의 단점</h3>\n<ul>\n<li>View와 Model 사이의 의존성은 해결되었지만 대신에 View와 Presenter 사이의 높은 의존성을 가지게 되었습니다. 이는 MVC와 마찬가지로 애플리케이션이 복잡해질수록 View와 Presenter 사이의 의존성이 더욱 강해지고 복잡해집니다.</li>\n</ul>\n<h2 id=\"mvvm-패턴\" style=\"position:relative;\"><a href=\"#mvvm-%ED%8C%A8%ED%84%B4\" aria-label=\"mvvm 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVVM 패턴</h2>\n<h3 id=\"vmviewmodel\" style=\"position:relative;\"><a href=\"#vmviewmodel\" aria-label=\"vmviewmodel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VM(ViewModel)</h3>\n<ul>\n<li>뷰에 필요한 데이터를 준비하고 모델에 필요한 이벤트르 전달합니다. 그러면서도 뷰에 종속되지 않는 뷰만을 위한 모델이라고 할 수 있습니다.</li>\n<li>\n<p>Command 패턴과 Data Binding을 활용해 의존성을 없앱니다.</p>\n<ul>\n<li>Command 패턴은 요청을 객체의 형태로 캡슐화하여 저장, 로깅, 최소를 할수 있는 패턴입니다.</li>\n<li>Data Binding은 XML에서 만든 View들을 자동으로 알아서 만들어주는 안드로이드 라이브러리 입니다.</li>\n</ul>\n</li>\n<li>MVP 패턴처럼 View를 통해 사용자의 입력이 들어오면 되면 Command 패턴으로 ViewModel에 요청합니다.</li>\n<li>ViewModel은 Model에게 필요한 데이터를 요청하고 Model에 응답한 뒤 ViewModel에게 다시 가공해서 저장합니다.</li>\n<li>여기서 View로 다시 안돌려주냐고 할 수 있는데, View는 Data Binding을 통해 자동으로 갱신하게 됩니다.</li>\n</ul>\n<h3 id=\"mvvm-패턴의-장점\" style=\"position:relative;\"><a href=\"#mvvm-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"mvvm 패턴의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVVM 패턴의 장점</h3>\n<ul>\n<li>Command 패턴과 Data Binding을 사용하여 View와 Model, 심지어 View와 ViewModel 사이의 의존성 또한 없습니다.</li>\n<li>테스트와 모듈화가 쉽습니다.</li>\n<li>뷰와 모델을 연결하기 위해 사용해야 하는 연결 코드를 줄일 수 있습니다.</li>\n</ul>\n<h3 id=\"mvvm-패턴의-단점\" style=\"position:relative;\"><a href=\"#mvvm-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"mvvm 패턴의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVVM 패턴의 단점</h3>\n<ul>\n<li>ViewModel의 설계가 쉽지 않습니다.</li>\n<li>뷰가 변수와 표현식 모두에 바인딩될 수 있어서 시간이 지남에 따라 관계 없는 프리젠테이션 로직이 늘어나 유지 관리하기 번거롭습니다.</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://blog.metafor.kr/146\">MVC? 싱글톤? 여러가지 디자인 패턴들</a></li>\n</ul>","frontmatter":{"title":"MVC MVP MVVM","date":"March 18, 2020"}}},"pageContext":{"slug":"/design pattern/mvc-mvp-mvvm/","previous":{"fields":{"slug":"/programming paradigm/프로그래밍-패러다임/"},"frontmatter":{"title":"프로그래밍 패러다임","category":"develop","draft":false}},"next":{"fields":{"slug":"/design pattern/싱글톤/"},"frontmatter":{"title":"싱글톤","category":"design pattern","draft":false}}}}}