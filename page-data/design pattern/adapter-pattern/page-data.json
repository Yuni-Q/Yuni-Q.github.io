{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/design pattern/adapter-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"","utterances":"Yuni-Q/blog"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"d9fa608c-f655-569f-8af7-421256d7fc19","excerpt":"적응자 패턴 adapter란? adapter는 다른 전기나 기계 장치를 서로 연결해서 작동할 수 있도록 만들어 주는 결합 도구를 뜻합니다. 디자인 패턴 분류 디자인 패턴에는 생성, 구조, 행위, 3가지 분류가 있습니다. 어댑터 패턴은 에 대한 패턴입니다. 구조 패턴 구조 패턴이란 작은 클래스들을 과 을 이용하여 더 큰 클래스를 생성하는 방법을 제공하는 패턴입니다. 서로 독립적으로 개발한 클래스 라이브러리를 마치 처럼 사용할 수 있습니다. 또, 여러 인터페이스를 합성(Composite…","html":"<h2 id=\"적응자-패턴\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9D%91%EC%9E%90-%ED%8C%A8%ED%84%B4\" aria-label=\"적응자 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적응자 패턴</h2>\n<h2 id=\"adapter란\" style=\"position:relative;\"><a href=\"#adapter%EB%9E%80\" aria-label=\"adapter란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>adapter란?</h2>\n<ul>\n<li>adapter는 다른 전기나 기계 장치를 서로 연결해서 작동할 수 있도록 만들어 주는 결합 도구를 뜻합니다.</li>\n</ul>\n<h2 id=\"디자인-패턴-분류\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EB%B6%84%EB%A5%98\" aria-label=\"디자인 패턴 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴 분류</h2>\n<ul>\n<li>디자인 패턴에는 생성, 구조, 행위, 3가지 분류가 있습니다.</li>\n<li>어댑터 패턴은 <code class=\"language-text\">구조</code>에 대한 패턴입니다.</li>\n</ul>\n<h3 id=\"구조-패턴\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0-%ED%8C%A8%ED%84%B4\" aria-label=\"구조 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조 패턴</h3>\n<ul>\n<li>구조 패턴이란 작은 클래스들을 <code class=\"language-text\">상속</code>과 <code class=\"language-text\">합성</code>을 이용하여 더 큰 클래스를 생성하는 방법을 제공하는 패턴입니다.</li>\n<li>서로 독립적으로 개발한 클래스 라이브러리를 마치 <code class=\"language-text\">하나인 것</code>처럼 사용할 수 있습니다. 또, 여러 인터페이스를 합성(Composite)하여 서로 다른 인터페이스들의 통일된 추상을 제공합니다.</li>\n<li>구조 패턴의 중요한 포인트는 인터페이스나 구현을 복합하는 것이 아니라 객체를 <code class=\"language-text\">합성</code>하는 방법을 제공한다는 것입니다. 이는 컴파일 단계에서가 아닌 <code class=\"language-text\">런타임 단계</code>에서 복합 방법이나 대상을 변경할 수 있다는 점에서 유연성을 갖습니다.</li>\n</ul>\n<h2 id=\"code-classlanguage-text호환성code을-위한-패턴\" style=\"position:relative;\"><a href=\"#code-classlanguage-text%ED%98%B8%ED%99%98%EC%84%B1code%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%8C%A8%ED%84%B4\" aria-label=\"code classlanguage text호환성code을 위한 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">호환성</code>을 위한 패턴</h2>\n<ul>\n<li>일상 생활에서와 동일하게 어떤 인터페이스를 클라이언트에서 요구하는 형태의 인터페이스에 적응시켜주는 역할을 한다.</li>\n<li>어뎁터 패턴은 B를 A처럼 포장하여 A로 사용할 수 있게 하는 패턴입니다.</li>\n<li>이미 잘 구축되어 있는 것을 새로운 어떤 것이 사용 할 때 양쪽 간의 호환성을 유지해주기 위해 사용합니다.</li>\n<li>한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 변환합니다.</li>\n<li>어댑터를 구현할 때는 타켓 인터페이스의 크기와 구종에 따라 코딩해야 할 분량이 결정됩니다.</li>\n</ul>\n<h2 id=\"활용-상황\" style=\"position:relative;\"><a href=\"#%ED%99%9C%EC%9A%A9-%EC%83%81%ED%99%A9\" aria-label=\"활용 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>활용 상황</h2>\n<ul>\n<li>이미 만든 것을 재사용하고자 하나 이 재사용 가능한 라이브러리를 수정할 수 없을 때 사용합니다.\n<ul>\n<li>서버 코드에 손대지 못한다면 어댑터 패턴을 사용해 API를 변경한 후 잠금을 추가 합니다.</li>\n</ul>\n</li>\n<li>기존의 코드에 새로운 코드(써드파티 라이브러리 등)을 연동하여 사용하고 싶은데, 두 코드의 인터페이스가 달라, 이를 하나로 통일하여 사용하고 싶을 때 사용합니다.</li>\n<li>리팩토링 없이도 기존의 클래스를 이용해 새로운 클래스를 만들 수 있습니다.</li>\n<li>[객체 적응자] 이미 존재하는 여러 개의 서브 클래스를 사용해야 하는데, 이 서브클래스들의 상속을 통해서 이들의 인터페이스를 다 개조 한다는 것이 현실성이 없을 때, 객체 적응자를 써서 부모 클래스의 인터페이스를 변경하는 것이 더 바람직합니다.</li>\n</ul>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>관계가 없는 인터페이스를 같이 사용할 수 있습니다.</li>\n<li>기존 클라이언트 단의 코드 수정을 최소화 할 수 있습니다.</li>\n<li>클래스 재활용성이 증가합니다.</li>\n<li>클라이언트는 연동부분을 몰라도, 새로운 코드의 기능을 일관되게 사용 가능합니다.</li>\n</ul>\n<h3 id=\"장점을-조금-더-길게-설명해-보겠습니다\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90%EC%9D%84-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EA%B8%B8%EA%B2%8C-%EC%84%A4%EB%AA%85%ED%95%B4-%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"장점을 조금 더 길게 설명해 보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점을 조금 더 길게 설명해 보겠습니다.</h3>\n<ul>\n<li>기존 클래스의 소스코드를 수정해서 인터페이스에 맞추는 작업보다는 기존 클래스의 소스 코드의 수정을 전혀 하지 않고 타겟 인터페이스에 맞춰서 동작을 가능하게 합니다. 즉, 기존 클래스의 명세만 알면 얼마든지 새로운 클래스를 작성할 수 있습니다. 이를 통해 소스코드가 간단해지고 유지볻보수도 원할하게 하는 이점이 있습니다.</li>\n<li>어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있습니다. 이로 인해 호환되지 않는 인터페이스를 사용하는 클라이언트를 그대로 활용할 수 있습니다.</li>\n<li>어댑터 패턴을 통해 클라이언트와 구현된 인터페이스를 분리시킬수 있으며, 향후 인터페이스가 바뀌더라도 그 변경 내역은 어댑터에 <code class=\"language-text\">캡슐화</code> 되기 때문에 클라이언트는 바뀔 필요가 없어집니다.</li>\n<li>외부 패키지를 호출하는 코드를 가능한 줄여 경계를 관리합니다. 코드 가독성이 높아지며, 경계 인터페이스를 사용하는 일관성도 높아지며, 외부 패키지가 변했을 때 변경할 코드도 줄어듭니다.</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li>어댑터 클래스에서 통일 시켜주는 부분을 구현해야 합니다.</li>\n</ul>\n<h2 id=\"객체지향-원칙\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9B%90%EC%B9%99\" aria-label=\"객체지향 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향 원칙</h2>\n<ul>\n<li>어댑터 패턴에는 여러 객체지향 원칙이 반영되어 있습니다. 어댑터를 새로 바뀐 인터페이스로 감쌀 때는 객체 <code class=\"language-text\">구성(composition)</code>을 사용합니다. 이런 접근법을 쓰면 어탭티의 어떤 서브클래스에 대해서도 어댑터를 쓸 수 있다는 장점이 있지요.</li>\n</ul>\n<h2 id=\"클라이언트에서-어댑터를-사용하는-방법에-대해-살펴-보겠습니다\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EC%96%B4%EB%8C%91%ED%84%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%B4-%EC%82%B4%ED%8E%B4-%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"클라이언트에서 어댑터를 사용하는 방법에 대해 살펴 보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트에서 어댑터를 사용하는 방법에 대해 살펴 보겠습니다.</h2>\n<ol>\n<li>클라이언트에서 타겟 인터페이스를 사용하여 메소드를 호출함으로써 어댑터에 요청합니다.</li>\n<li>어댑터에서는 어댑티 인터페이스를 사용하여 그 요청을 어댑티에 대한 하나 이상의 메소드를 호출로 변환합니다.</li>\n<li>클라이언트에서는 호출 결과를 받긴 하지만 중간에 어댑터가 껴 있는지는 전혀 알지 못합니다.</li>\n</ol>\n<ul>\n<li>클라이언트 -> request() -> 어댑터 - specificRequest() -> 어댑티.</li>\n<li>클라이언트에서는 Target Interface를 호출하는 것처럼 보입니다. 하지만 클라이언트의 요청을 전달받은 (Target Interface 를 구현한) Adapter 는 자신이 감싸고 있는 Adaptee에게 실질적인 처리를 위임합니다. Adapter가 Adaptee를 감싸고 있는 것 때문에 <code class=\"language-text\">Wrapper 패턴</code>이라고도 불립니다.</li>\n</ul>\n<h2 id=\"어댑터에는-두종류가-있다\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%8C%91%ED%84%B0%EC%97%90%EB%8A%94-%EB%91%90%EC%A2%85%EB%A5%98%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"어댑터에는 두종류가 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어댑터에는 두종류가 있다.</h2>\n<h3 id=\"클래스-어댑터-패턴\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4\" aria-label=\"클래스 어댑터 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 어댑터 패턴</h3>\n<ul>\n<li>상속을 이용한 어댑터 패턴입니다.</li>\n<li>클래스 어댑터에서는 어댑터를 만들 때 타겟과 어댑티 모두의 서브클래스로 만들고, 객체 어댑터에서는 구성을 통해서 어댑티에 요청을 전달한다는 점을 제외하면 별 다르 차이점이 없습니다.</li>\n<li>특정 어댑티 클래스에만 적용된다는 단점이 있습니다. 대신 어댑티 전체를 다시 구현하지 않아도 된다는 장점이 있습니다. 그리고 서브클래스기 때문에 어댑티의 행동을 오버라이드할 수 있습니다.</li>\n<li>클래스 어댑터 패턴은 다중 상속을 허용하는 프로그래밍 언어에서만 가능한 패턴이다.</li>\n</ul>\n<h3 id=\"객체-어댑터-패턴\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4\" aria-label=\"객체 어댑터 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 어댑터 패턴</h3>\n<ul>\n<li>구성(composition)을 사용하기 때문에 더 뛰어납니다. 어댑티 클래스 뿐 아니라 그 서브 클래스에 대해서도 어댑터 역할을 할 수 있습니다.</li>\n<li>상속이 아닌 구성을 활용합니다. 상속을 이용하면 코드 분량을 줄일 수 있긴 하겠지만, 구성을 이용하더라도 어댑티한테 필요한 일을 시키기 위한 코드만 만들면 되기 때문에 별로 코드가 많이 필요한 건 아닙니다. 유연성을 확보할 수 있습니다.</li>\n</ul>\n<h3 id=\"클래스-어댑터-vs-객체-어댑터\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%96%B4%EB%8C%91%ED%84%B0-vs-%EA%B0%9D%EC%B2%B4-%EC%96%B4%EB%8C%91%ED%84%B0\" aria-label=\"클래스 어댑터 vs 객체 어댑터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 어댑터 vs 객체 어댑터</h3>\n<ul>\n<li>클래스 어댑터는 <code class=\"language-text\">다중 상속이 불가능</code>합니다.</li>\n<li>클래스의 상속 기능을 사용할 경우 <code class=\"language-text\">조합 폭발이 일어나서 제어 불가능</code>합니다.\n<ul>\n<li>상속의 남용으로 하나의 기능을 추가하기 위해 필요 이상으로 많은 수의 클래스를 추가해야 하는 경우를 가르켜 <code class=\"language-text\">클래스 폭발(class explosion)</code> 문제 또는 <code class=\"language-text\">조합 폭발(combinational explosion)</code> 문제라고 부릅니다.</li>\n<li>런타임에 타입선택(세트)</li>\n<li>추상메소드로 의존성 역전</li>\n</ul>\n</li>\n<li>객체 어댑터의 경우 <code class=\"language-text\">의존성 폭발이 일어나지만 제어 가능</code>합니다.\n<ul>\n<li>런타임에 합성(조립)</li>\n<li>추가 인터페이스로 의존성 분산</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"유사-패턴과의-비교\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%82%AC-%ED%8C%A8%ED%84%B4%EA%B3%BC%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-label=\"유사 패턴과의 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유사 패턴과의 비교</h2>\n<ul>\n<li>어댑터 : 한 인터페이스를 다른 인터페이스로 변환</li>\n<li>데코레이터 : 인터페이스는 바꾸지 않고 책임(기능)만 추가</li>\n<li>퍼사드 : 인터페이스를 간단하게 바꿈</li>\n</ul>\n<h3 id=\"퍼사드-vs-어댑터\" style=\"position:relative;\"><a href=\"#%ED%8D%BC%EC%82%AC%EB%93%9C-vs-%EC%96%B4%EB%8C%91%ED%84%B0\" aria-label=\"퍼사드 vs 어댑터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>퍼사드 vs 어댑터</h3>\n<ul>\n<li>퍼사드는 인터페이스를 단순화 시킬 뿐 아니라 클라이언트와 구성요소들로 이루어진 서브시스템을 분리시키는 역할도 합니다.</li>\n<li>퍼사드와 어댑터는 모두 여러 개의 클래스를 감쌀 수 있습니다. 하지만 퍼사드는 인터페이스를 단순화시키기 위한 용도로 쓰이는 반면, 어댑터는 인터페이스를 다른 인터페이스로 변환하기 위한 용도로 쓰입니다.</li>\n<li>퍼사드는 한 객체에 다른 인터페이스를 구현한다는 면에서 어댑처와 유사합니다. 그러나 퍼사드는 새로운 인터페이스를 생성하지만 어댑터는 기존 인터페이스를 재활용한다는 점이 다릅니다.</li>\n</ul>\n<h3 id=\"어댑터와-프록시의-차이\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%8C%91%ED%84%B0%EC%99%80-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"어댑터와 프록시의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어댑터와 프록시의 차이</h3>\n<ul>\n<li>공통점 : 클라이언트와 다른 객체 사이에 끼어들어서 클라이언트로부터 요청을 받아와서 다른 객체한테 전달해주는 역할을 합니다.</li>\n<li>어댑터 패턴 : 다른 객체의 인터페이스를 바꿔줍니다.</li>\n<li>프록시 패턴 : 똑같은 인터페이스를 사용합니다.</li>\n<li>보호 프록시 : 보호 프록시에서는 클라이언트의 역할에 따라서 객체에 있는 특정 메소드에 대한 클라이언트 접근을 제어합니다. 그러다 보니 보호 프록시에서는 클라이언트한테 인터페이스의 일부분만을 제공할 수 있습니다. 이런 점은 어댑터하고 비슷하다고 할 수 있습니다.</li>\n</ul>\n<h2 id=\"구성\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%84%B1\" aria-label=\"구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구성</h2>\n<h3 id=\"target-interface\" style=\"position:relative;\"><a href=\"#target-interface\" aria-label=\"target interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Target Interface</h3>\n<p>Adapter 가 구현(implements) 하는 인터페이스이다. 클라이언트는 Target Interface 를 통해 Adaptee 인 써드파티 라이브러리를 사용하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">play</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fileName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">MP3</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">MP3 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"adaptee\" style=\"position:relative;\"><a href=\"#adaptee\" aria-label=\"adaptee permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adaptee</h3>\n<ul>\n<li>써드파티 라이브러리나 외부시스템을 의미한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaPackage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">playFile</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fileName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">MP4</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPackage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">playFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">MP4 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">MKV</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPackage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">playFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">MKV : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"adapter\" style=\"position:relative;\"><a href=\"#adapter\" aria-label=\"adapter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adapter</h3>\n<ul>\n<li>Client 와 Adaptee 중간에서 호환성이 없는 둘을 연결시켜주는 역할을 담당한다. Target Interface 를 구현하며, 클라이언트는 Target Interface 를 통해 어댑터에 요청을 보낸다. 어댑터는 클라이언트의 요청을 Adaptee 가 이해할 수 있는 방법으로 전달하고, 처리는 Adaptee 에서 이루어진다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 객체 어댑터</span>\n<span class=\"token comment\">// MP3를 상속하여 사용하는 것도 가능</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FormatAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">{</span>\n  media<span class=\"token operator\">:</span> MediaPackage<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>media<span class=\"token operator\">:</span> MediaPackage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>media <span class=\"token operator\">=</span> media<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Using Adapter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>media<span class=\"token punctuation\">.</span><span class=\"token function\">playFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 클래스 어댑터</span>\n<span class=\"token comment\">// MP3를 상속하여 사용하는 것은 불가능</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FormatAdapterMP4</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">MP4</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Using Adapter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">playFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FormatAdapterMKV</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">MKV</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Using Adapter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">playFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"client\" style=\"position:relative;\"><a href=\"#client\" aria-label=\"client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Client</h3>\n<ul>\n<li>써드파티 라이브러리나 외부시스템을 사용하려는 쪽이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 객체 어댑터</span>\n<span class=\"token keyword\">const</span> playerMP3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">MP3</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayerMP3<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> playerMP4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormatAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">MP4</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayerMP4<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file.mp4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> playerMKV <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormatAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">MKV</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayerMKV<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file.mkv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클래스 어댑터</span>\n<span class=\"token keyword\">const</span> playerMP3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">MP3</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayerMP3<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> playerMP4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormatAdapterMP4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayerMP4<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file.mp4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> playerMKV <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormatAdapterMKV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayerMP4<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file.mkv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"어댑터-패턴-정리\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4-%EC%A0%95%EB%A6%AC\" aria-label=\"어댑터 패턴 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어댑터 패턴 정리</h2>\n<ul>\n<li>Adaptee를 감싸고, Target Interface만을 클라이언트에게 드러냅니다.</li>\n<li>Target Interface를 구현하여 클라이언트가 예상하는 인터페이스가 되도록 Adaptee의 인터페이스를 간접적으로 변경합니다.</li>\n<li>Adaptee가 기대하는 방식으로 클라이언트의 요청을 간접적으로 변경합니다.</li>\n<li>호환되지 않는 우리의 인터페이스와 Adaptee를 함께 사용할 수 있습니다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://jusungpark.tistory.com/22\">디자인패턴 - 어댑터 패턴 (adapter pattern)</a></li>\n<li><a href=\"https://niceman.tistory.com/141\">Java 디자인패턴 - 어댑터(Adapter) 패턴</a></li>\n<li><a href=\"https://yaboong.github.io/design-pattern/2018/10/15/adapter-pattern/\">디자인패턴 - 어댑터 패턴</a></li>\n<li><a href=\"https://readystory.tistory.com/125\">[구조 패턴] 어댑터 패턴(Adapter Pattern) 이해 및 예제</a></li>\n<li><a href=\"https://dailyheumsi.tistory.com/189\">[디자인 패턴 6편] 구조 패턴, 어댑터(Adapter)</a></li>\n<li><a href=\"https://kimch3617.tistory.com/entry/%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4-adapter-pattern\">코드 저장소</a></li>\n<li><a href=\"https://coding-start.tistory.com/256\">코딩스타트</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%A0%81%EC%9D%91%EC%9E%90-%ED%8C%A8%ED%84%B4\">적응자 패턴</a></p>\n</li>\n<li>\n<p><a href=\"#adapter%EB%9E%80\">adapter란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EB%B6%84%EB%A5%98\">디자인 패턴 분류</a></p>\n<ul>\n<li><a href=\"#%EA%B5%AC%EC%A1%B0-%ED%8C%A8%ED%84%B4\">구조 패턴</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#code-classlanguage-text%ED%98%B8%ED%99%98%EC%84%B1code%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%8C%A8%ED%84%B4\"><code class=\"language-text\">호환성</code>을 위한 패턴</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%99%9C%EC%9A%A9-%EC%83%81%ED%99%A9\">활용 상황</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90%EC%9D%84-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EA%B8%B8%EA%B2%8C-%EC%84%A4%EB%AA%85%ED%95%B4-%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">장점을 조금 더 길게 설명해 보겠습니다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9B%90%EC%B9%99\">객체지향 원칙</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EC%96%B4%EB%8C%91%ED%84%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%B4-%EC%82%B4%ED%8E%B4-%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">클라이언트에서 어댑터를 사용하는 방법에 대해 살펴 보겠습니다.</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%96%B4%EB%8C%91%ED%84%B0%EC%97%90%EB%8A%94-%EB%91%90%EC%A2%85%EB%A5%98%EA%B0%80-%EC%9E%88%EB%8B%A4\">어댑터에는 두종류가 있다.</a></p>\n<ul>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4\">클래스 어댑터 패턴</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4\">객체 어댑터 패턴</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%96%B4%EB%8C%91%ED%84%B0-vs-%EA%B0%9D%EC%B2%B4-%EC%96%B4%EB%8C%91%ED%84%B0\">클래스 어댑터 vs 객체 어댑터</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9C%A0%EC%82%AC-%ED%8C%A8%ED%84%B4%EA%B3%BC%EC%9D%98-%EB%B9%84%EA%B5%90\">유사 패턴과의 비교</a></p>\n<ul>\n<li><a href=\"#%ED%8D%BC%EC%82%AC%EB%93%9C-vs-%EC%96%B4%EB%8C%91%ED%84%B0\">퍼사드 vs 어댑터</a></li>\n<li><a href=\"#%EC%96%B4%EB%8C%91%ED%84%B0%EC%99%80-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4\">어댑터와 프록시의 차이</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B5%AC%EC%84%B1\">구성</a></p>\n<ul>\n<li><a href=\"#target-interface\">Target Interface</a></li>\n<li><a href=\"#adaptee\">Adaptee</a></li>\n<li><a href=\"#adapter\">Adapter</a></li>\n<li><a href=\"#client\">Client</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4-%EC%A0%95%EB%A6%AC\">어댑터 패턴 정리</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>","frontmatter":{"title":"adapter pattern","date":"February 28, 2021"}}},"pageContext":{"slug":"/design pattern/adapter-pattern/","previous":{"fields":{"slug":"/design pattern/memento/"},"frontmatter":{"title":"memento","category":"design pattern","tags":["design pattern"],"draft":false}},"next":{"fields":{"slug":"/design pattern/builder-pattern/"},"frontmatter":{"title":"builder pattern","category":"design pattern","tags":["design pattern"],"draft":false}},"tag":["design pattern"]}},"staticQueryHashes":["3128451518","96099027"],"slicesMap":{}}