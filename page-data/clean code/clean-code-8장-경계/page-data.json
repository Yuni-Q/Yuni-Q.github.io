{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean code/clean-code-8장-경계/","result":{"data":{"site":{"siteMetadata":{"title":"yuniq 블로그","author":"yuniq","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuniq","utterances":"yuniq"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"def5e042-7b0a-5419-9890-ad306b0b2f02","excerpt":"…","html":"<ul>\n<li>우리는 가끔 서드파티 패키지나 오픈소스를 사용해야 될 상황에 직면합니다. 혹은 우리 회사 내부 팀이 만든 컴포넌트를 사용해야 할 상황도 있습니다. 어느 상황이던, 우리는 이 코드들을 우리 내부 코드와 “깨끗하게” 통합시켜야 합니다.</li>\n</ul>\n<h2 id=\"외부-코드-사용하기서드파티-코드-사용하기\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0%EC%84%9C%EB%93%9C%ED%8C%8C%ED%8B%B0-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"외부 코드 사용하기서드파티 코드 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 코드 사용하기(서드파티 코드 사용하기)</h2>\n<ul>\n<li>\n<p>경계에서의 긴장</p>\n<ul>\n<li>패키지 제공자나 프레임워크 제공자는 <code class=\"language-text\">적용성</code>을 최대한 넓히려 애씁니다. 더 많은 환경에서 돌아가야 더 많은 고객이 구매하기 때문입니다.</li>\n<li>반면, 사용자는 자신의 요구에 집중하는 인터페이스를 바랍니다.</li>\n<li>이런 긴장으로 인해 시스템 경계에서 문제가 생길 소지가 많습니다.</li>\n</ul>\n</li>\n<li>경계 인터페이스를 여기저기 넘기지 않아야 합니다. 경계 인터페이스를 이용할 때는 이를 이용하는 클래스나 클래스 계열 밖으로 노출되지 않도록 주의합니다. 인스턴스를 공개 API의 인수로 넘기거나 반환값으로 사용하지 않습니다.</li>\n</ul>\n<h2 id=\"경계-살피고-익히기\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EA%B3%84-%EC%82%B4%ED%94%BC%EA%B3%A0-%EC%9D%B5%ED%9E%88%EA%B8%B0\" aria-label=\"경계 살피고 익히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경계 살피고 익히기</h2>\n<ul>\n<li>외부 코드를 사용하면 적은 시간에 더 많은 기능을 출시하기 쉬워집니다.</li>\n<li>외부 패키지 테스트가 우리 책임은 아닙니다. 하지만 우리 자신을 위해 우리가 사용할 코드를 테스트하는 편이 바람직합니다.</li>\n<li>외부 코드를 익히는 것은 어렵습니다. 외부 코드를 통합하기도 어렵습니다. 두 가지를 동시에 하기는 두 배나 어렵습니다. 곧바로 우리쪽 코드를 작성해 외부 코드를 호출하는 대신 먼저 간단한 테스트 케이스를 작성해 외부 코드를 익힙니다. 짐 뉴커크는 이를 학습 테스트라 부릅니다. 학습 테스트는 프로그램에서 사용하려는 방식대로 외부 API를 호출합니다. 통제된 환경에서 API를 제대로 이해하는지를 확인하는 셈입니다. 학습 테스트는 API를 사용하려는 목적에 초점을 맞춥니다.</li>\n</ul>\n<h2 id=\"학습-테스트는-공짜-이상이다학습-테스트learning-test는-값어치를-한다\" style=\"position:relative;\"><a href=\"#%ED%95%99%EC%8A%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EA%B3%B5%EC%A7%9C-%EC%9D%B4%EC%83%81%EC%9D%B4%EB%8B%A4%ED%95%99%EC%8A%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8learning-test%EB%8A%94-%EA%B0%92%EC%96%B4%EC%B9%98%EB%A5%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"학습 테스트는 공짜 이상이다학습 테스트learning test는 값어치를 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>학습 테스트는 공짜 이상이다(“학습 테스트(Learning test)“는 값어치를 한다)</h2>\n<ol>\n<li><code class=\"language-text\">공짜</code> 입니다.</li>\n<li>메인 로직에 영향을 주지 않으며 서드파티 코드를 이해할 수 있습니다.</li>\n<li>서드파티 코드가 바뀔 경우 Learning test를 돌려 필요한 기능이 잘 동작하는지 테스트할 수 있습니다.</li>\n<li>Learning test를 하던 말던, 경계 테스트는 새 버전으로의 이전에 도움을 줍니다.</li>\n<li>학습 테스트에 드는 비용은 없습니다. 어쨌든 API를 배워야 하므로 오히려 필요한 지식만 확보하는 손쉬운 방법입니다. 학습 테스트는 이해도를 높여주는 정확한 실험입니다.</li>\n<li>학습 테스트는 공짜 이상입니다. 투자하는 노력보다 얻는 성과가 더 큽니다. 패키지 새 버전이 나온다면 학습 테스트를 돌려 차이가 있는지 확인합니다.</li>\n<li>학습 테스트는 패키지가 예상대로 도는지 검증합니다. 일단 통합한 이후라고 하더라도 패키지가 우리 코드와 호환되리라는 보장은 없습니다. 패키지 작성자에게 코드를 변경할 필요가 생길 수 있습니다. 패키지 작성자는 버그를 수정하고 기능도 추가합니다. 패키지 새 버전이 나올 때마다 새로운 위험이 생깁니다. 새 버전이 우리 코드와 호환되지 않으면 학습 테스트가 이 사실을 곧바로 밝혀냅니다.</li>\n<li>학습 테스트를 이용한 학습이 필요하든 그렇지 않든, 실제 코드와 동일한 방식으로 인터페이스를 사용하는 테스트 케이스가 필요합니다. 이런 경계 테스트가 있다면 패키지의 새 버전으로 이전하기 쉬워집니다. 그렇지 않다면 낡은 버전을 필요 이상으로 오랫동안 사용하려는 유혹에 빠지기 쉽습니다.</li>\n</ol>\n<h2 id=\"아직-존재하지-않는-코드를-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%A7%81-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아직 존재하지 않는 코드를 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아직 존재하지 않는 코드를 사용하기</h2>\n<ul>\n<li>아직 개발되지 않은 모듈이 필요한데, 기능은 커녕 인터페이스조차 구현되지 않은 경우가 있을 수 있습니다.</li>\n<li>하지만 우리는 이러한 제약 때문에 우리의 구현이 늦어지는걸 탐탁치 않게 여깁니다.</li>\n</ul>\n<h2 id=\"깨끗한-경계clean한-경계\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%EA%B2%BD%EA%B3%84clean%ED%95%9C-%EA%B2%BD%EA%B3%84\" aria-label=\"깨끗한 경계clean한 경계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깨끗한 경계(Clean한 경계)</h2>\n<ul>\n<li>경계에서는 흥미로운 일이 많이 벌어집니다. 변경이 대표적인 예입니다. 소프트웨어 설계가 우수하다면 변경하는데 많은 투자와 재작업이 필요하지 않습니다. 엄청난 시간과 노력과 재작업을 요구하지 않습니다. 통제하지 못하는 코드를 사용할 때는 너무 많은 투자를 하거나 향후 변경 비용이 지나치게 커지지 않도록 각별히 주의해야 합니다.</li>\n<li>우리 내부 코드가 서드파티 코드를 많이 알지 못하게 막아야 합니다.</li>\n<li>경계에 위치하는 코드는 깔끔히 분리합니다. 또한 기대치를 정의하는 테스트 케이스도 작성합니다. 이쪽 코드에서 외부 패키지를 세세하게 알아야 할 필요가 없습니다. 통제가 불가능한 외부 패키지에 의존하는 대신 통제가 가능한 우리 코드에 의존하는 편이 훨씬 좋습니다. 자칫하면 오히려 외부 코드에 휘둘릴 것입니다.</li>\n<li>외부 패키지를 호출하는 코드를 가능한 줄여 경계를 관리합니다. 새로운 클래스로 경계를 감싸거나 아니면 ADAPTER 패턴을 사용해 우리가 원하는 인터페이스를 패키지가 제공하는 인터페이스로 변환합니다. 어느 방법이든 코드 가독성이 높아지며, 경계 인터페이스를 사용하는 일관성도 높아지며, 외부 패키지가 변했을 때 변경할 코드도 줄어듭니다.</li>\n</ul>","frontmatter":{"title":"clean code 8장 경계","date":"March 24, 2020"}}},"pageContext":{"slug":"/clean code/clean-code-8장-경계/","previous":{"fields":{"slug":"/develop/github-education-name.com-사용하기/"},"frontmatter":{"title":"github education name.com 사용하기","category":"develop","draft":false}},"next":{"fields":{"slug":"/javascript/setinterval-and-settimeout/"},"frontmatter":{"title":"setInterval and setTimeout","category":"javascript","draft":false}}}}}