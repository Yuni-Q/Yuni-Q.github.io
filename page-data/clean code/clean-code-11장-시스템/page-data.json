{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean code/clean-code-11장-시스템/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni-q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"cacf46bf-a86d-55df-bd42-798c29799945","excerpt":"Intro 깨끗한 코드를 구현하면 낮은 추상화 수준에서 관심사를 분리하기 쉬워집니다. 시스템 제작과 시스템 사용을 분리하라 잘 정돈된 견고한 시스템을 만들기 위해서는 전역적이고 일관된 의존성 해결 방법을 통해 작은 편의 코드들이 모듈성의 저해를 가져오는 것을 막아야 합니다. 소프트웨어 시스템은 (애플리케이션 객체를 제작하고 의존성을 서로 ‘연결’하는) 준비 과정과 (준비 과정 이후에 이어지는) 런타임 로직을 분리해야 합니다. 시작 단계는 모든 애플리케이션이 풀어야 할 관심사(concern…","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>깨끗한 코드를 구현하면 낮은 추상화 수준에서 관심사를 분리하기 쉬워집니다.</li>\n</ul>\n<h2 id=\"시스템-제작과-시스템-사용을-분리하라\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%A0%9C%EC%9E%91%EA%B3%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%82%AC%EC%9A%A9%EC%9D%84-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"시스템 제작과 시스템 사용을 분리하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 제작과 시스템 사용을 분리하라</h2>\n<ul>\n<li>잘 정돈된 견고한 시스템을 만들기 위해서는 전역적이고 일관된 의존성 해결 방법을 통해 작은 편의 코드들이 모듈성의 저해를 가져오는 것을 막아야 합니다.</li>\n<li>소프트웨어 시스템은 (애플리케이션 객체를 제작하고 의존성을 서로 ‘연결’하는) 준비 과정과 (준비 과정 이후에 이어지는) 런타임 로직을 분리해야 합니다.</li>\n<li>시작 단계는 모든 애플리케이션이 풀어야 할 관심사(concern)입니다.</li>\n<li>관심사 분리는 우리 분야에서 가장 오래되고 가장 중요한 설계 기법 중 하나입니다.</li>\n<li>체계적이고 탄탄한 시스템을 만들고 싶다면 흔히 쓰는 좀스럽고 손쉬운 기법으로 모듈성을 깨서는 절대로 안 됩니다. 객체를 생성하거나 의존성을 연결할 때도 마찬가지 입니다. 설정 논리는 일반 실행 논리와 분리해야 모듈성이 높아집니다. 또한 주요 의존성을 해소하기 위한 방식, 즉 전반적이며 일관적인 방식도 필요합니다.</li>\n</ul>\n<h3 id=\"main-분리생성-로직을-어플리케이션의-시작이-아닌-메인으로\" style=\"position:relative;\"><a href=\"#main-%EB%B6%84%EB%A6%AC%EC%83%9D%EC%84%B1-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EC%8B%9C%EC%9E%91%EC%9D%B4-%EC%95%84%EB%8B%8C-%EB%A9%94%EC%9D%B8%EC%9C%BC%EB%A1%9C\" aria-label=\"main 분리생성 로직을 어플리케이션의 시작이 아닌 메인으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main 분리(생성 로직을 어플리케이션의 시작이 아닌 메인으로)</h3>\n<ul>\n<li>시스템 생성과 시스템 사용을 분리하는 한 가지 방법으로, 생성과 관련한 코드는 모두 main이나 main이 호출하는 모듈로 옮기고, 나머지 시스템은 모든 객체가 생성되었고 모든 의존성이 연결되었다고 가정합니다.</li>\n<li>제어 흐름은 따라가기 쉽습니다. main 함수에서 시스템에 필요한 객체를 생성한 후 이를 애플리케이션에 넘깁니다. 애플리케이션은 그저 객체를 사용할 뿐입니다.</li>\n<li>main과 애플리케이션 사이에 표시된 의존성 화살표의 방향에 주목합니다. 모든 화살표가 main 쪽에서 애플리케이션 쪽을 향합니다. 즉. 애플리케이션은 main이나 객체가 생성되는 과정을 전혀 모른다는 뜻입니다. 단지 모든 객체가 적절히 생성되었다고 가정합니다.</li>\n</ul>\n<h3 id=\"팩토리-기법\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC-%EA%B8%B0%EB%B2%95\" aria-label=\"팩토리 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩토리 기법</h3>\n<ul>\n<li>물론 때로는 객체가 생성되는 시점을 애플리케이션이 결정할 필요도 생깁니다.</li>\n<li>객체의 생성 시기를 직접 결정하려면 main에서 완성된 객체를 던져주기 보다 factory 객체를 만들어서 던져줍니다.</li>\n<li>만약 자세한 구현을 숨기고 싶다면 Abstract Factory 패턴을 사용합니다.</li>\n</ul>\n<h3 id=\"의존성-주입dependency-injection\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85dependency-injection\" aria-label=\"의존성 주입dependency injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입(Dependency Injection)</h3>\n<ul>\n<li>의존성 관리의 관점에서는 객체는 그 자신의 의존성들을 직접 생성하지 말고 다른 ‘authoritative mechanism’에게 맡겨야 합니다.</li>\n<li>사용과 제작을 분리하는 강력한 메커니즘 하나가 의존성 주입(Dependency Injection) DI입니다. 의존성 주입은 제어 역전(Inversion of Control, loC) 기법을 의존성 관리에 적용한 메커니즘입니다. 제어 역전에서는 한 객체가 맡은 보조 책임을 새로운 객체에게 전적으로 떠넘깁니다. 새로운 객체는 넘겨받은 책임만 맡으므로 단일 책임 원칙(Single Responsibility Principle, SRP)을 지키게 됩니다. 의존성 관리 맥락에서 객체는 의존성 자체를 인스턴스로 만드는 책임은 지지 않습니다. 대신에 이런 책임을 다른 ‘전담’ 메커니즘에 넘겨야만 합니다. 그렇게 함으로써 제어를 역전합니다. 초기 설정은 시스템 전체에서 필요하므로 대개 ‘책임질’ 메커니즘으로 ‘main’ 루틴이나 특수 컨테이너를 사용합니다.</li>\n</ul>\n<h2 id=\"확장스케일링\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81\" aria-label=\"확장스케일링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장(스케일링)</h2>\n<ul>\n<li>‘처음부터 올바르게’ 시스템을 만들 수 있다는 믿음은 미신입니다.</li>\n<li>우리는 오늘 주어진 사용자 스토리에 맞춰 시스템을 구현해야 합니다. 내일은 새로운 스토리에 맞춰 시스템을 조정하고 확장하면 됩니다. 이것이 반복적이고 점진적인 애자일 방식의 핵심입니다.</li>\n<li>테스트 주도 개발(Test-driven Development, TDD), 리팩터링, (TDD와 리팩터링으로 얻어지는) 깨끗한 코드는 코드 수준에서 시스템을 조정하고 확장하기 쉽게 만듭니다.</li>\n<li>소프트웨어 시스템은 물리적인 시스템과 다릅니다. 관심사(Concern)를 적절히 분리해 관리 한다면 소프트웨어 아키텍처는 점진적으로 발전할 수 있습니다.</li>\n</ul>\n<h3 id=\"횡단cross-cutting-관심사\" style=\"position:relative;\"><a href=\"#%ED%9A%A1%EB%8B%A8cross-cutting-%EA%B4%80%EC%8B%AC%EC%82%AC\" aria-label=\"횡단cross cutting 관심사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>횡단(cross-cutting) 관심사</h3>\n<ul>\n<li>이론적으로는 독립된 형태로 구분될 수 있지만 실제로는 코드에 산재하기 쉬운 부분들을 뜻합니다.(transaction, authorization, logging등)</li>\n<li>영속성과 같은 관심사는 애플리케이션의 자연스러운 객체 경계를 넘나드는 경향이 있습니다. 모든 객체가 전반적으로 동일한 방식을 이용하게 만들어야 합니다. 예를 들어, 특정 DBMS나 독자적인 파일을 사용하고, 테이블과 열은 같은 명명 관례를 따르며, 트랜잭션 의미가 일관적이면 더욱 바람직합니다.</li>\n<li>원론적으로는 모듈화되고 캡슐화된 방식으로 영속성 방식을 구상할 수 있습니다. 하지만 현실적으로는 영속성 방식을 구현한 코드가 온갖 객체로 흩어집니다. 여기서 횡단 관심사라는 용어가 나옵니다. 영속성 프레임워크 또한 모듈화할 수 있습니다. 도메인 논리도 (독자적으로) 모듈화할 수 있습니다. 문제는 이 두 영역이 세밀한 단위로 겹친다는 점입니다.</li>\n<li>관점 지향 프로그래밍(Aspect-Oriented Programming, AOP)는 횡단 관심사에 대처해 모듈성을 확보하는 일반적인 방법론입니다.</li>\n<li>AOP에서 관점 aspect이라는 모듈 구성 개념은 ‘특정 관심사를 지원하려면 시스템에서 특정 지점들이 동작하는 방식을 일관성 있게 바꿔야 한다’라고 명시합니다. 명시는 간결한 선언이나 프로그래밍 메커니즘으로 수행합니다.</li>\n<li>영속성을 예로 들면, 프로그래머는 영속적으로 저장할 객체와 속성을 선언한 후 영속성 책임을 영속성 프레임워크에 위임합니다. 그러면 AOP 프레임워크는 대상 코드에 영향을 미치지 않는 상태로 동작 방식을 변경합니다.</li>\n</ul>\n<h3 id=\"cross-cutting-concerns-해결을-위한-세-가지-방법\" style=\"position:relative;\"><a href=\"#cross-cutting-concerns-%ED%95%B4%EA%B2%B0%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%84%B8-%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95\" aria-label=\"cross cutting concerns 해결을 위한 세 가지 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross-Cutting Concerns 해결을 위한 세 가지 방법</h3>\n<ul>\n<li>자바 프록시 : 간단한 경우라면 자바 프록시가 적절한 솔루션일 것입니다.</li>\n<li>순수 자바 AOP 프레임워크 : Java Proxy API의 단점들은 Spring, JBoss와 같은 순수 자바 AOP 프레임워크를 통해 해결할 수 있습니다.</li>\n<li>AspectJ : AspectJ는 AOP를 실현하기 위한 full-featured tool이라 일컬어집니다. 8~90%의 경우에는 Spring AOP와 JBoss AOP로도 충분하지만 AspectJ는 훨씬 강력한 수준의 AOP를 지원합니다. 다만 이를 사용하기 위해 새로운 툴, 언어 구조, 관습적인 코드를 익혀야 한다는 단점도 존재합니다.(최근 소개된 “annotation-form AspectJ”로 인해 적용에 필요한 노력은 많이 줄어들었다고 합니다.)</li>\n</ul>\n<h2 id=\"시스템-아키텍쳐를-테스트-주도하라test-drive-the-system-architecture\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84%ED%95%98%EB%9D%BCtest-drive-the-system-architecture\" aria-label=\"시스템 아키텍쳐를 테스트 주도하라test drive the system architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 아키텍쳐를 테스트 주도하라(Test Drive the System Architecture)</h2>\n<ul>\n<li>관점으로 (혹은 유사한 개념으로) 관심사를 분리하는 방식은 그 위력이 막강합니다. 애플리케이션 도메인 논리를 POJO로 작성할 수 있다면, 즉 코드 수준에서 아키텍처 관심사를 분리할 수 있다면, 진정한 테스트 주도 아키텍처 구축이 가능해집니다. 그때그때 새로운 기술을 채택해 단순한 아키텍처를 복잡한 아키텍처로 키워갈 수도 있습니다.</li>\n<li>BDUF(Big Design Up Front)를 추구할 필요가 없습니다. 실제로 BDUF는 해롭기까지 합니다. 처음에 쏟아 부은 노력을 버리지 않으려는 심리적 저항으로 인해, 그리고 처음 선택한 아키텍처가 향후 사고 방식에 미치는 영향으로 인해, 변경을 쉽사리 수용하지 못하는 탓입니다.</li>\n<li>건축가는 BDUF 방식을 취합니다. 물리적 구조는 일단 짓기 시작하면 극적인 변경이 불가능한 탓입니다. 소프트웨어 역시 나름대로 형체가 있지만, 소프트웨어 구조가 관점을 효과적으로 분리한다면, 극적인 변화가 경제적으로 가능합니다.</li>\n<li>‘아주 단순하면서도’ 멋지게 분리된 아키텍처로 소프트웨어 프로젝트를 진행해 결과물을 재빨리 출시한 후, 기반 구조를 추가하며 조금씩 확장해 나가도 괜찮다는 말입니다. 세계 최대 웹 사이트들은 고도의 자료 캐싱, 보안, 가상화 등을 이용해 아주 높은 가용성과 성능을 효율적이고도 유연하게 달성했습니다. 설계가 최대한 분리되어 각 추상화 수준과 범위에서 코드가 적당히 단순하기 때문입니다.</li>\n<li>‘아무 방향 없이’ 프로젝트에 뛰이들어도 좋다는 소리는 아닙니다. 프로젝트를 시작할 때는 일반적인 범위, 목표, 일정은 물론이고 결과로 내놓을 시스템의 일반적인 구조도 생각해야 합니다. 하지만 변하는 환경에 대처해 진로를 변경할 능력도 반드시 유지해야 합니다.</li>\n<li>최선의 시스템 구조는 각기 POJO (또는 다른) 객체로 구현되는 모듈화된 관심사 영역(도메인)으로 구성됩니다. 이렇게 서로 다른 영역은 해당 영역 코드에 최소한의 영향을 미치는 관점이나 유사한 도구를 사용해 통합합니다. 이런 구조 역시 코드와 마찬가지로 테스트 주도 기법을 적용할 수 있습니다.</li>\n</ul>\n<h2 id=\"의사-결정을-최적화하라\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%82%AC-%EA%B2%B0%EC%A0%95%EC%9D%84-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EB%9D%BC\" aria-label=\"의사 결정을 최적화하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의사 결정을 최적화하라</h2>\n<ul>\n<li>모듈을 나누고 관심사를 분리하면 지역적인 관리와 결정이 가능해집니다.</li>\n<li>가장 적합한 사람에게 책임을 맡기면 가장 좋습니다. 우리는 때때로 가능한 마지막 순간까지 결정을 미루는 방법이 최선이라는 사실을 까먹곤 합니다. 게으르거나 무책임해서가 아닙니다. 최대한 정보를 모아 최선의 결정을 내리기 위해서 입니다. 성급한 결정은 불충분한 지식으로 내린 결정입니다. 너무 일찍 결정하면 고객 피드백을 더 모으고, 프로젝트를 더 고민하고, 구현방안을 더 탐험할 기회가 사라집니다.</li>\n<li>충분히 큰 시스템에서는(그것이 도시이건 소프트웨어이건) 한 사람이 모든 결정을 내릴 수는 없습니다. 결정은 최대한 많은 정보가 모일 때까지 미루고 시기가 되었을 경우 해당 파트의 책임자(여기서는 사람이 아닌 모듈화된 컴포넌트를 뜻한다)에게 맡기는 것이 불필요한 고객 피드백과 고통을 덜어줄 것입니다.</li>\n<li>모듈화 된 관심 분야로 이루어진 POJO 시스템의(변화에 대한) 민첩함은 가장 최신의 정보를 가지고 적시에 최적의 선택을 할 수 있게 도와줍니다. 결정에 필요한 복잡도 또한 경감됩니다.</li>\n</ul>\n<h2 id=\"표준은-확실한-이득을-가져올-경우-추가하라\" style=\"position:relative;\"><a href=\"#%ED%91%9C%EC%A4%80%EC%9D%80-%ED%99%95%EC%8B%A4%ED%95%9C-%EC%9D%B4%EB%93%9D%EC%9D%84-%EA%B0%80%EC%A0%B8%EC%98%AC-%EA%B2%BD%EC%9A%B0-%EC%B6%94%EA%B0%80%ED%95%98%EB%9D%BC\" aria-label=\"표준은 확실한 이득을 가져올 경우 추가하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표준은 확실한 이득을 가져올 경우 추가하라</h2>\n<ul>\n<li>많은 소프트웨어 팀들은 훨씬 가볍고 직관적인 디자인이 가능했음에도 불구하고 그저 표준이라는 이유만으로 EJB2 구조를 사용했습니다. 표준에 심취해 ‘고객을 위한 가치 창출’이라는 목표를 잃어 버렸기 때문입니다.</li>\n<li>표준은 아이디어와 컴포넌트의 재사용, 관련 전문가 채용, 좋은 아이디어의 캡슐화, 컴포넌트들의 연결을 쉽게 도와줍니다. 하지만 종종 표준을 만드는 데에 드는 시간은 납품 기한을 맞추기 어렵게 만들고, 혹은 최초에 제공하려던 기능과 동떨어지게 되기도 합니다.</li>\n</ul>\n<h2 id=\"시스템에는-dsl도메인-영역-언어이-필요하다\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EB%8A%94-dsl%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%98%81%EC%97%AD-%EC%96%B8%EC%96%B4%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4\" aria-label=\"시스템에는 dsl도메인 영역 언어이 필요하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템에는 DSL(도메인 영역 언어)이 필요하다</h2>\n<ul>\n<li>소프트웨어 분야에시도 최근 들어 DSL(Domain-Specific Language)이 새롭게 조명 받기 시작했습니다. DSL은 간단한 스크립트 언어나 표준 언어로 구현한 API를 가리킵니다. DSL로 짠 코드는 도메인 전문가가 작성한 구조적인 산문처럼 읽힙니다.</li>\n<li>좋은 DSL은 도메인 영역의 개념과 실제 구현될 코드 사이의 “소통의 간극”을 줄여 도메인 영역을 코드 구현으로 번역하는 데에 오역을 줄여줍니다. DSL을 효율적으로 사용하면 코드 덩어리와 디자인 패턴의 추상도를 높여 주며 그에 따라 코드의 의도를 적절한 추상화 레벨에서 표현할 수 있게 해 줍니다.</li>\n<li>DSL은 ‘모든 단계에서의 추상화’와 ‘모든 도메인의 POJO화’를 고차원적 규칙과 저차원적 디테일 전반에 걸쳐 도와줍니다.</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>코드뿐만이 아니라 시스템 또한 깨끗해야 합니다. 침략적인(invasive) 아키텍쳐는 도메인 로직에 피해를 주고 신속성에도 영향을 줍니다. 도메인 로직이 모호해지면 버그는 숨기 쉬워지고 기능 구현은 어려워집니다. 신속성이 침해되면 생산성이 저해되고 TDD로 인한 이득 또한 얻을 수 없습니다.</li>\n<li>의도는 모든 레벨의 추상화에서 명확해야 합니다. 이는 각각의 concern들을 POJO로 작성된 코드와 aspect-like 메커니즘을 통해 구성할 때 비로소 실현될 수 있습니다.</li>\n<li>당신이 시스템을 디자인하든 독자적인 모듈을 디자인하든, 동작하는 범위에서 가장 간단한 것을 사용하는 것을 잊어서는 안 됩니다.</li>\n</ul>","frontmatter":{"title":"clean code 11장 시스템","date":"March 27, 2020"}}},"pageContext":{"slug":"/clean code/clean-code-11장-시스템/","previous":{"fields":{"slug":"/clean code/clean-code-9장-단위-테스트/"},"frontmatter":{"title":"clean code 9장 단위 테스트","category":"clean code","draft":false}},"next":{"fields":{"slug":"/clean code/clean-code-10장-클래스/"},"frontmatter":{"title":"clean code 10장 클래스","category":"clean code","draft":false}}}}}