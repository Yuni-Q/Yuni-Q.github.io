{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean code/clean-code-13장-동시성/","result":{"data":{"site":{"siteMetadata":{"title":"yuniq 블로그","author":"yuniq","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuniq","utterances":"yuniq"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"2dfed68b-ee8a-5f36-a276-e4bf459ab19d","excerpt":"Intro 객체는 처리의 추상화입니다. 스레드는 일정의 추상화입니다. 동시성과 깔끔한 코드는 양립하기 어렵습니다. 스레드를 하나만 실행 하는 코드는 작성하기 쉽습니다. 겉으로 보기에는 멀쩡하나 깊숙한 곳에 문제가 있는 다중 스레드 코드도 작성하기 쉽습니다. 이런 코드는 시스템이 부하를 받기 전까지 멀쩡하게 돌아갑니다. 본 챕터에서는 concurrent 프로그래밍의 필요성, 어려움에 대해 논의하고 그것에 대한 해결 방안과 “clean concurrent code…","html":"<h1 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h1>\n<ul>\n<li>객체는 처리의 추상화입니다.</li>\n<li>스레드는 일정의 추상화입니다.</li>\n<li>동시성과 깔끔한 코드는 양립하기 어렵습니다. 스레드를 하나만 실행 하는 코드는 작성하기 쉽습니다. 겉으로 보기에는 멀쩡하나 깊숙한 곳에 문제가 있는 다중 스레드 코드도 작성하기 쉽습니다. 이런 코드는 시스템이 부하를 받기 전까지 멀쩡하게 돌아갑니다.</li>\n<li>본 챕터에서는 concurrent 프로그래밍의 필요성, 어려움에 대해 논의하고 그것에 대한 해결 방안과 “clean concurrent code”를 작성하는 방법, 테스트 방법을 소개하고자 합니다.</li>\n</ul>\n<h2 id=\"동시성이-필요한-이유\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"동시성이 필요한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성이 필요한 이유?</h2>\n<ul>\n<li>동시성은 결합(coupling)을 없애는 전략입니다. 즉, 무엇과 언제를 분리하는 전략입니다. 스레드가 하나인 프로그램은 무엇과 언제가 서로 밀접합니다. 그래서 호출 스택을 살펴보면 프로그램 상태가 곧바로 드러납니다. 흔히 단일 스레드 프로그램을 디버깅하는 프로그래머는 (일련의) 정지점(breakpoint)을 정한 후 어느 정지점에 걸렸는지 살펴보면서 시스템 상태를 파악합니다.</li>\n<li>무엇과 언제를 분리하면 애플리케이션 구조와 효율이 극적으로 나아집니다. 구조적인 관점에서 프로그램은 거대한 루프 하나가 아니라 작은 협력 프로그램 여럿으로 보입니다. 따라서 시스템을 이해하기가 쉽고 문제를 분리하기도 쉽습니다.</li>\n<li>구조적 개선만을 위해 동시성을 채택하는 건 아닙니다. 어떤 시스템은 응답 시간과 작업 처리량(throughput) 개선이라는 요구사항으로 인해 직접적인 동시성 구현이 불가피합니다.</li>\n</ul>\n<h3 id=\"미신과-오해\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EC%8B%A0%EA%B3%BC-%EC%98%A4%ED%95%B4\" aria-label=\"미신과 오해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미신과 오해</h3>\n<h4 id=\"동시성은-항상-성능을-높여준다\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%80-%ED%95%AD%EC%83%81-%EC%84%B1%EB%8A%A5%EC%9D%84-%EB%86%92%EC%97%AC%EC%A4%80%EB%8B%A4\" aria-label=\"동시성은 항상 성능을 높여준다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성은 항상 성능을 높여준다.</h4>\n<ul>\n<li>Concurrency는 항상 퍼포먼스를 향상시킵니다. Concurrency는 여러 스레드 혹은 여러 프로세서가 대기 시간을 공유할 수 있는 경우에만 퍼포먼스를 향상시킨다. 하지만 이러한 경우는 거의 없습니다.</li>\n</ul>\n<h4 id=\"동시성을-구현해도-설계는-변하지-않는다\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%B4%EB%8F%84-%EC%84%A4%EA%B3%84%EB%8A%94-%EB%B3%80%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"동시성을 구현해도 설계는 변하지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성을 구현해도 설계는 변하지 않는다.</h4>\n<ul>\n<li>단일 스레드 시스템과 다중 스레드 시스템은 설계가 판이하게 다릅니다. 일반적으로 무엇과 언제를 분리하면 시스템 구조가 크게 달라집니다.</li>\n</ul>\n<h4 id=\"웹-또는-ejb-컨테이너를-사용하면-동시성을-이해할-필요가-없다\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EB%98%90%EB%8A%94-ejb-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%A0-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EB%8B%A4\" aria-label=\"웹 또는 ejb 컨테이너를 사용하면 동시성을 이해할 필요가 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 또는 EJB 컨테이너를 사용하면 동시성을 이해할 필요가 없다.</h4>\n<ul>\n<li>실제로는 컨테이너가 어떻게 동작하는지, 어떻게 동시 수정, 데드락 등과 같은 문제를 피할 수 있는지를 알아야만 합니다.</li>\n</ul>\n<h3 id=\"반대로-다음은-동시성과-관련된-타당한-생각-몇-가지다\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%8C%80%EB%A1%9C-%EB%8B%A4%EC%9D%8C%EC%9D%80-%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%ED%83%80%EB%8B%B9%ED%95%9C-%EC%83%9D%EA%B0%81-%EB%AA%87-%EA%B0%80%EC%A7%80%EB%8B%A4\" aria-label=\"반대로 다음은 동시성과 관련된 타당한 생각 몇 가지다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반대로 다음은 동시성과 관련된 타당한 생각 몇 가지다.</h3>\n<ul>\n<li>Concurrency은 다소 부하를 유발합니다. 성능 측면에서 부하가 걸리며, 코드도 더 짜야 합니다.</li>\n<li>Concurrency은 복잡합니다. 간단한 문제라도 Concurrency은 복잡합니다.</li>\n<li>일반적으로 동시성 버그는 재현하기 어렵습니다. 그래서 진짜 결함으로 간주되지 않고 일회성 문제로 여겨 무시하기 쉽습니다.</li>\n<li>Concurrency 문제에는 보통 근본적인 디자인 개편이 필요하다.</li>\n</ul>\n<h2 id=\"동시성-방어-원칙\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%B0%A9%EC%96%B4-%EC%9B%90%EC%B9%99\" aria-label=\"동시성 방어 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성 방어 원칙</h2>\n<h3 id=\"단일-책임-원칙\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99\" aria-label=\"단일 책임 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 책임 원칙</h3>\n<ul>\n<li>\n<p>SRP는 주어진 메서드/클래스/컴포넌트를 변경할 이유가 하나여야 한다는 원칙입니다. 동시성은 복잡성 하나만으로도 따로 분리할 이유가 충분합니다. 즉, 동시성 관련 코드는 다른 코드와 분리해야 한다는 뜻입니다. 그런데 불행히도 동시성과 관련이 없는 코드에 동시성을 곧바로 구현하는 사례가 너무도 흔합니다.</p>\n<ul>\n<li>동시성 코드는 독자적인 개발, 변경, 조율 주기가 있습니다.</li>\n<li>동시성 코드에는 독자적인 난관이 있습니다. 다른 코드에서 겪는 난관과 다르며 훨씬 어렵습니다.</li>\n<li>잘못 구현한 동시성 코드는 별의별 방식으로 실패합니다. 주변에 있는 다른 코드가 발목을 잡지 않더라도 동시성 하나만으로도 충분히 어렵습니다.</li>\n</ul>\n</li>\n<li>권장사항 : 동시성 코드는 다른 코드와 분리합니다.</li>\n</ul>\n<h3 id=\"따름정리corollary--자료-범위를-제한하라\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EB%A6%84%EC%A0%95%EB%A6%ACcorollary--%EC%9E%90%EB%A3%8C-%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%A0%9C%ED%95%9C%ED%95%98%EB%9D%BC\" aria-label=\"따름정리corollary  자료 범위를 제한하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따름정리(corollary) : 자료 범위를 제한하라</h3>\n<ul>\n<li>\n<p>객체 하나를 공유한 후 동일 필드를 수정하던 두 스레드가 서로 간섭하므로 예상치 못한 결과를 내놓습니다. 이런 문제를 해결하는 방안으로 공유 객체를 사용하는 코드 내 임계영역(critical section)을 synchronized 키워드로 보호하라고 권장합니다. 이런 임계영역의 수를 줄이는 기술이 중요합니다. 공유 자료를 수정하는 위치가 많을수록 다음 가능성도 커집니다.</p>\n<ul>\n<li>보호 할 임계 영역을 빼먹습니다. 그래서 공유 자료를 수정하는 모든 코드를 망가 뜨립니다.</li>\n<li>모든 임계영역을 올바로 보호했는지(DRY 위반) 확인하느라 똑같은 노력과 수고를 반복합니다.</li>\n<li>그렇지 않아도 찾아내기 어려운 버그가 더욱 찾기 어려워집니다.</li>\n</ul>\n</li>\n<li>권장사항: 자료를 캡슐화(apsitotion)합니다. 공유 자료를 최대한 줄입니다.</li>\n</ul>\n<h3 id=\"따름-정리--자료-사본을-사용하라\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%AC--%EC%9E%90%EB%A3%8C-%EC%82%AC%EB%B3%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"따름 정리  자료 사본을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따름 정리 : 자료 사본을 사용하라</h3>\n<ul>\n<li>공유 자료를 줄이려면 처음부터 공유하지 않는 방법이 제일 좋습니다. 어떤 경우에는 객체를 복사해 읽기 전용으로 사용하는 방법이 있습니다. 어떤 경우에는 각 스레드가 객체를 복사해 사용한 후 한 스레드가 해당 사본에서 결과를 가져오는 방법도 가능합니다.</li>\n<li>공유 객체를 피하는 방법이 있다면 코드가 문제를 일으킬 가능성도 아주 낮아집니다. 물론 객체를 복사하는 시간과 부하가 걱정스러울지도 있지만 사본으로 동기화를 피할 수 있다면 내부 잠금을 없애 절약한 수행 시간이 사본 생성과 가비지 컬렉션에 드는 부하를 상쇄할 가능성이 큽니다.</li>\n</ul>\n<h3 id=\"따름-정리--스레드는-가능한-독립적으로-구현하라\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%AC--%EC%8A%A4%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EB%9D%BC\" aria-label=\"따름 정리  스레드는 가능한 독립적으로 구현하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따름 정리 : 스레드는 가능한 독립적으로 구현하라</h3>\n<ul>\n<li>자신만의 세상에 존재하는 스레드를 구현합니다. 즉, 다른 스레드와 자료를 공유하지 않습니다. 각 스레드는 클라이언트 요청 하나를 처리합니다. 모든 정보는 비공유 출처에서 가져오며 로컬 변수에 저장합니다. 그러면 각 스레드는 다른 스레드와 동기화할 필요가 없으므로 세상에 자신만 있는 듯이 돌아갈 수 있습니다.</li>\n<li>권장사항 : 독자적인 스레드로, 가능하면 다른 프로세서에서 돌려도 괜찮도록 자료를 독립적인 단위로 분할합니다.</li>\n</ul>\n<h2 id=\"라이브러리를-이해하라\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\" aria-label=\"라이브러리를 이해하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라이브러리를 이해하라</h2>\n<ul>\n<li>권장사항 : 언어가 제공하는 클래스를 검토합니다.</li>\n</ul>\n<h2 id=\"실행-모델을-이해하라\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\" aria-label=\"실행 모델을 이해하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 모델을 이해하라</h2>\n<ul>\n<li>권장사항: 기본 알고리즘과 각 해법을 이해합니다.</li>\n<li>한정된 자원(Bound Resource) : 다중 스레드 환경에서 사용하는 자원으로, 크기나 숫자가 제한적입니다. 데이터베이스 연결, 길이가 일정한 읽기/쓰기 버퍼 등이 예입니다.</li>\n<li>상호 배제(Mutual Exclusion) : 한 번에 한 스레드만 공유 자료나 공유 자원을 사용할 수 있는 경우를 가리킵니다.</li>\n<li>기아(Starvation) : 한 스레드나 여러 스레드가 굉장히 오랫동안 혹은 영원히 자원을 기다립니다. 예를 들어, 항상 짧은 스레드에게 우선순위를 준다면, 짧은 스레드가 지속적으로 이어질 경우, 긴 스레드가 기아 상태에 빠집니다.</li>\n<li>데드락(Deadlock) : 여러 스레드가 서로가 끝나기를 기다립니다. 모든 스레드가 각기 필요한 자원을 다른 스레드가 점유하는 바람에 어느 쪽도 더 이상 진행하지 못합니다.</li>\n<li>라이브락(Livelock) : 락을 거는 단계에서 각 스레드가 서로를 방해합니다. 스레드는 계속해서 진행 하려 하지만, 공명(resonance)으로 인해, 굉장히 오랫동안 혹은 영원히 진행하지 못합니다.</li>\n</ul>\n<h3 id=\"생산자---소비자producer-consumer\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%82%B0%EC%9E%90---%EC%86%8C%EB%B9%84%EC%9E%90producer-consumer\" aria-label=\"생산자   소비자producer consumer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생산자 - 소비자(Producer-Consumer)</h3>\n<ul>\n<li>하나 이상 생산자 스레드가 정보를 생성해 버퍼나 대기열에 넣습니다. 하나 이상 소비자 스레드가 대기열에서 정보를 가져와 사용합니다. 생산자 스레드와 소비자 스레드가 사용하는 대기열은 <code class=\"language-text\">한정된 자원</code>입니다.</li>\n<li>생산자 스레드는 대기열에 빈 공간이 있어야 정보를 채웁니다. 즉, 빈 공간이 생길 때까지 기다립니다. 소비자 스레드는 대기열에 정보가 있어야 가져옵니다. 즉, 정보가 채워질 때까지 기다립니다.</li>\n<li>대기열을 올바로 사용하고자 생산자 스레드와 소비자 스레드는 서로에게 시그널을 보닙니다. 생산자 스레드는 대기열에 정보를 채운 다음 소비자 스레드에게 ‘대기 열에 정보가 있다’는 시그널을 보냅니다. 소비자 스레드는 대기열에서 정보를 읽어들인 후 ‘대기열에 빈 공간이 있다’는 시그널을 보냅니다. 따라서 잘못하면 생산자 스레드와 소비자 스레드가 둘 다 진행 가능함에도 불구하고 동시에 서로에게서 시그널을 기다릴 가능성이 존재합니다.</li>\n</ul>\n<h3 id=\"읽기---쓰기readers-writers\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EA%B8%B0---%EC%93%B0%EA%B8%B0readers-writers\" aria-label=\"읽기   쓰기readers writers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽기 - 쓰기(Readers-Writers)</h3>\n<ul>\n<li>읽기 스레드를 위한 주된 정보원으로 공유 자원을 사용하지만, 쓰기 스레드가 이 공유 자원을 이따금 갱신한다고 가정합니다. 이런 경우 처리율(throughput)이 문제의 핵심입니다. 처리율을 강조하면 <code class=\"language-text\">기아(starvation) 현상</code>이 생기거나 오래된 정보가 쌓입니다. 갱신을 허용하면 처리율에 영향을 미칩니다. 쓰기 스레드가 버퍼를 갱신하는 동안 읽기 스레드가 버퍼를 읽지 않으려면, 마찬가지로 읽기 스레드가 버퍼를 읽는 동안 쓰기 스레드가 버퍼를 갱신하지 않으려면, 복잡한 균형잡기가 필요합니다.</li>\n<li>대개는 쓰기 스레드가 버퍼를 오랫동안 점유하는 바람에 여러 읽기 스레드가 버퍼를 기다리느라 처리율이 떨어집니다.</li>\n<li>읽기 스레드의 요구와 쓰기 스레드의 요구를 적절히 만족시켜 처리율도 적당히 높이고 기아도 방지하는 해법이 필요합니다.</li>\n<li>간단한 전략은 읽기 스레드가 없을 때까지 갱신을 원하는 쓰기 스레드가 버퍼를 기다리는 방법입니다. 하지만 읽기 스레드가 계속 이어진다면 쓰기 스레드는 기아 상태에 빠집니다. 반면, 쓰기 스레드에게 우선권을 준 상태에서 쓰기 스레드가 계속 이어진다면 처리율이 떨어집니다. 양쪽 균형을 잡으면서 동시 갱신 문제를 피하는 해법이 필요합니다. 이 둘 사이의 균형을 맞추며 concurrent 업데이트를 방지하는 것을 주안점으로 둡니다.</li>\n</ul>\n<h3 id=\"식사하는-철학자들dining-philosophers\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94-%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4dining-philosophers\" aria-label=\"식사하는 철학자들dining philosophers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>식사하는 철학자들(Dining Philosophers)</h3>\n<ul>\n<li>둥근 식탁에 철학자 한 무리가 둘러앉아 있습니다. 각 철학자 왼쪽에는 포크가 놓여 있습니다. 식탁 가운데는 커다란 스파게티 한 접시가 놓여 있습니다. 철학자들은 배가 고프지 않으면 생각하며 시간을 보냅니다. 배가 고프면 양손에 포크를 집어들고 스파게티를 먹습니다. 양손에 포크를 쥐지 않으면 먹지 못합니다. 왼쪽 철학자나 오른쪽 철학자가 포크를 사용하는 중이라면 그쪽 철학자가 먹고 나서 포크를 내려놓을 때까지 기다려야 합니다. 스파게티를 먹고 나면 포크를 내려놓고 배가 고플 때까지 다시 생각에 잠깁니다.</li>\n<li>철학자를 스레드로, 포크를 공유 자원으로 바꾸게 되면 이는 자원을 놓고 경쟁하는 프로세스와 비슷한 상황이 됩니다. 잘 설계되지 않은 시스템은 deadlock, livelock, 처리량 문제, 효율성 저하 문제에 맞닥뜨리기 쉽습니다. 당신이 맞닥뜨릴 대부분의 concurrent 관련 문제들은 이 세 가지 문제의 변형일 가능성이 높습니다. 이 알고리즘들을 공부하고 스스로 해법을 작성함으로써 이와 같은 문제들을 직면하더라도 의연하게 대처할 수 있도록 합니다.</li>\n</ul>\n<h2 id=\"동기화하는-메서드-사이에-존재하는-의존성을-이해하라\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9D%B4%EC%97%90-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\" aria-label=\"동기화하는 메서드 사이에 존재하는 의존성을 이해하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기화하는 메서드 사이에 존재하는 의존성을 이해하라</h2>\n<ul>\n<li>동기화 하는 메서드 사이에 의존성이 존재하면 동시성 코드에 찾아내기 어려운 버그가 생깁니다.</li>\n<li>자바 언어는 개별 메서드를 보호하는 synchronized라는 개념을 지원합니다. 하지만 공유 클래스 하나에 동기화된 메서드가 여럿이라면 구현이 올바른지 다시 한 번 확인해야 합니다.</li>\n<li>권장사항 : 공유 객체 하나에는 메서드 하나만 사용합니다.</li>\n<li>\n<p>공유 객체 하나에 여러 메서드가 필요한 상황도 생깁니다.</p>\n<ul>\n<li>클라이언트 기반 잠금(Client-Based Locking) : 클라이언트가 첫 메서드를 부르기 이전부터 마지막 메서드를 부른 다음까지 서버를 잠급니다.(공유 객체를 사용하는 코드에서 공유 객체를 잠그는 것입니다.)</li>\n<li>Bad : 서버를 사용하는 모든 클라이언트 코드에서 lock이 필요하게 되며 이는 유지보수 및 디버깅에 필요한 비용을 상승시킵니다.</li>\n<li>서버 기반 잠금(Server-Based Locking) : 서버 내에서 서버(자신)을 잠그고 모든 동작을 수행한 후 잠금을 푸는 메서드를 제공합니다. 클라이언트에게는 새로운 메서드를 제공합니다. (공유 객체에 새로운 메서드를 작성하고 잠금이 필요한 동작 전체를 수행하게 하는 것입니다.)</li>\n<li>Good : Critical section에 접근하는 코드를 최소화 합니다.</li>\n<li>중계된 서버(Adapted Server) : 잠금을 수행하는 중계자를 작성합니다. 이는 기본적으로 서버 기반 잠금이지만 기존의 서버를 변경할 수 없는 상황에 사용할 수 있는 방법이다.(서드 파티 라이브러리를 사용한다고 생각하면 쉽습니다.)</li>\n<li>Good : 서버 기반 잠금 방식을 사용할 수 없는 경우에 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"동기화하는-부분을-작게-만들어라\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84%EC%9D%84-%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"동기화하는 부분을 작게 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기화하는 부분을 작게 만들어라</h2>\n<ul>\n<li>자바에서 synchronized 키워드를 사용하면 락을 설정합니다. 같은 락으로 감싼 모든 코드 영역은 한 번에 한 스레드만 실행이 가능합니다.</li>\n<li>락은 스레드를 지연시키고 부하를 가중시킵니다. 그러므로 여기저기서 synchronized 문을 남발하는 코드는 바람직하지 않습니다. 반면, 임계 영역(critical section)은 반드시 보호해야 합니다. 따라서, 코드를 짤 때는 임계영역 수를 최대한 줄여야 합니다.</li>\n<li>임계영역 개수를 줄인답시고 거대한 임계영역 하나로 구현하는 순진한 프로그래머도 있습니다. 필요 이상으로 임계영역 크기를 키우면 스레드 간에 경쟁이 늘어나고 프로그램 성능이 떨어집니다.</li>\n<li>권장사항 : 동기화하는 부분을 최대한 작게 만듭니다.</li>\n</ul>\n<h2 id=\"올바른-종료-코드는-구현하기-어렵다\" style=\"position:relative;\"><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%A2%85%EB%A3%8C-%EC%BD%94%EB%93%9C%EB%8A%94-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\" aria-label=\"올바른 종료 코드는 구현하기 어렵다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>올바른 종료 코드는 구현하기 어렵다</h2>\n<ul>\n<li>‘항상 살아 있어야 하는 코드’의 작성은 ‘잠시 동작하고 조용히 끝나는’ 코드의 작성과는 다릅니다.</li>\n<li>조용히 끝나는 코드는 작성하기 어렵습니다. 이는 보편적으로 ‘오지 않을 신호’를 기다리는 쓰레드의 데드락을 포함합니다.</li>\n<li>데드락에 걸린 자식 스레드의 수행이 끝나길 기다리는 부모 스레드의 경우를 생각해보면 자식은 데드락에 걸려 멈춰 있고 부모는 이를 끝없이 기다리게 됩니다.</li>\n<li>코드를 작성할 경우 정상적인 종료가 이루어질 때까지 많은 시간이 소요될 것을 상정해야 합니다.</li>\n<li>깔끔하게 종료하는 다중 스레드 코드를 짜야 한다면 시간을 투자해 올바로 구현해야 합니다.</li>\n<li>권장사항 : 개발 초기에 시스템 종료에 대해 고민하고 구현합니다라. 이 작업은 생각보다 오래 걸릴 것입니다. 기존에 구현한 알고리즘을 리뷰하는 것도 필요합니다.</li>\n</ul>\n<h2 id=\"스레드-코드-테스트하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"스레드 코드 테스트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 코드 테스트하기</h2>\n<ul>\n<li>코드가 올바르다고 증명하기는 현실적으로 불가능합니다. 테스트가 정확성을 보장하지는 않습니다. 그럼에도 충분한 테스트는 위험을 낮춥니다. 스레드가 하나인 프로그램은 지금까지 한 말이 모두 옳습니다. 그런데 같은 코드와 같은 자원을 사용하는 스레드가 둘 이상으로 늘어나면 상황은 급격하게 복잡해집니다.</li>\n<li>권장사항 : 문제를 발생시킬 만한 테스트를 작성하고 여러 프로그램 설정과 시스템 설정, 부하 하에서 자주 수행합니다. 테스트가 한번이라도 실패한다면 원인을 분석합다. 한번 더 테스트를 실행해 성공했다고 해서 이전의 실패를 무시하면 안됩니다.</li>\n<li>\n<p>고려할 사항이 아주 많습니다.</p>\n<ul>\n<li>말이 안 되는 실패는 잠정적인 스레드 문제로 취급합니다.</li>\n<li>멀티 스레드 코드는 일반적으로 발생할 리 없어 보이는 문제를 발생시킵니다. 대부분의 개발자는 이러한 문제를 직관적으로 파악하지 못합니다. 또한 이는 매우 드물게 발생해 개발자들을 좌절하게 만듭니다. 그래서 개발자들은 이러한 문제들을 우주선(宇宙線), 하드웨어 버그, 혹은 이러한 류의 one-off로 치부합니다. 제일 좋은 방향은 one-off는 없다고 판단하는 것입니다. 이러한 one-off들이 무시 될수록 더 많은 코드들이 이미 문제가 있는 시스템에 추가되게 될 뿐입니다.</li>\n<li>권장사항 : 시스템 오작동을 one-off로 판단해 무시하지 않습니다.</li>\n<li>다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만듭니다.</li>\n<li>스레드 밖에서 잘 동작하는 코드를 먼저 작성합니다. 이는 스레드에서 사용될 POJO를 뜻합니다. POJO는 스레드와 연관이 없어 스레드 밖에서도 테스트할 수 있습니다. 시스템은 가능한 한 POJO로 작성하는 것이 좋습니다.</li>\n<li>권장사항 : 스레드 관련 버그와 그렇지 않은 버그를 동시에 잡으려 하지 않습니다. 작성한 코드가 스레드 밖에서 잘 작동하는지 먼저 체크합니다.</li>\n<li>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현합니다.</li>\n<li>\n<p>Concurrency 지원 코드를 아래와 같이 여러 설정으로 실행될 수 있게 만듭니다.</p>\n<ul>\n<li>단일 스레드, 여러 스레드 환경에서 동작하게 구현</li>\n<li>실제 사용될 객체 혹은 Test Double과 상호작용할 수 있는 스레드 코드로 구현</li>\n<li>수행 속도를 조절할 수 있는 Test Double을 구현</li>\n<li>지정된 횟수만큼 반복 수행할 수 있게 구현</li>\n</ul>\n</li>\n<li>권장사항 : 다양한 설정에서 실행할 목적으로 다른 환경에 쉽게 끼워 넣읍 수 있게 코드를 구현합니다.</li>\n<li>다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정할 수 있게 작성합니다.</li>\n<li>적절한 스레드 개수를 파악하려면 상당한 시행착오가 필요합니다. 처음부터 다양 설정으로 프로그램의 성능 측정 방법을 강구합니다. 스레드 개수를 조율하기 쉽게 코드를 구현합니다. 프로그램이 돌아가는 도중에 스레드 개수를 변경하는 방법도 고려합니다. 프로그램 처리율과 효율에 따라 스스로 스레드 개수를 조율하는 코드도 고민합니다.</li>\n<li>프로세서 수보다 많은 스레드를 돌려봅니다.</li>\n<li>시스템이 스레드를 스와핑(swapping)할 때도 문제가 발생합니다. 스와핑을 일으키려면 프로세서 수보다 많은 스레드를 돌립니다. 스와핑이 잦을수록 임계영역을 빼먹은 코드나 데드락을 일으키는 코드를 찾기 쉬워집니다.</li>\n<li>다른 플랫폼에서 돌려봅니다.</li>\n<li>멀티 스레드 코드는 실행 환경에 따라 다르게 동작합니다. 따라서 당신은 모든 잠재적 배포 환경에 대해 테스트를 수행해야 합니다.</li>\n<li>권장사항 : 스레드 관련 코드를 이른 시기에, 빈번한 주기로 모든 타겟 플랫폼에서 수행합니다.</li>\n<li>코드에 보조 코드(instmment)를 넣어 돌립니다. 강제로 실패를 일으키게 합니다.</li>\n<li>\n<p>스레드 관련 문제는 수많은 실행 경로중 얼마 안되는 확률로 발생하기 때문에 드물게 발생하며 재현하기 어렵습니다. 이 실행 경로를 조작해 스레드 문제가 발생할 확률을 높이는 code instrumentation에는 두 가지 방법이 있습니다.</p>\n<ul>\n<li>직접 구현하기</li>\n<li>이는 Object.wait(), Object.sleep(), Object.yield(), Object.priority()등의 메서드를 사용해 실행 경로를 변경함으로써 코드의 문제를 발견하는 방법입니다. yield() 메서드를 호출함으로써 코드의 실행 경로를 변경할 수 있습니다. 만약 코드에서 문제가 발생한다면 이는 yield()를 추가해 생긴 문제가 아니라 이미 존재하던 문제를 명백히 만든 것입니다.</li>\n<li>\n<p>이 방법에는 몇 가지 문제가 있습니다.</p>\n<ul>\n<li>테스트할 부분을 직접 찾아야 합니다.</li>\n<li>어디에 어느 메서드를 호출해야 할지 알기 어렵습니다.</li>\n<li>이와 같은 코드를 제품에 포함해 배포하는 것은 불필요하게 퍼포먼스를 저하시킬 뿐입니다.</li>\n<li>Shotgun approach이기 때문에 반드시 문제가 발생한다는 보장을 얻을 수 없습니다.</li>\n</ul>\n</li>\n<li>우리는 실제 제품에 포함되지 않으며 여러 조합으로 실행해 에러를 찾기 쉽게 만들 방법이 필요합니다. 이를 위해서는 시스템을 최대한 POJO 단위로 나눠 instrument code를 삽입할 부분을 찾기 쉽게 하고 여러 정책에 따라 sleep, yield등을 삽입할 수 있게 해야 합니다.</li>\n<li>자동화</li>\n<li>Aspect-oriented Framework, CGLib, ASM등을 통해 프로그램적으로 코드를 조작할 수도 있습니다.</li>\n</ul>\n</li>\n<li>권장사항: 흔들기 기법을 시용해 오류를 찾아냅니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>Concurrent 코드는 제대로 작성하기 어렵습니다. 이해하기 쉬운 코드는 여러 스레드와 공유 자원이 엮이게 되면 끔찍한 결말을 낳게 됩니다. concurrent code를 작성하게 된다면 엄격한 기준으로 clean하게 작성합니다. 그렇지 않으면 찾기 어렵고 빈번하지 않은 오류를 만나게 될 것입니다.</li>\n<li>최우선적으로 SRP를 숙지합니다. POJO를 사용해 스레드를 아는 코드와 스레드를 모르는 코드를 분리합니다. 스레드 코드를 테스트할 때는 전적으로 스레드만 테스트합니다. 즉, 스레드 코드는 최대한 집약되고 작아야 한다는 의미입니다.</li>\n<li>동시성 오류를 일으키는 잠정적인 원인을 철저히 이해합니다. 예를 들어, 여러 스레드가 공유 자료를 조작하거나 자원 풀을 공유할 때 동시성 오류가 발생합니다. 루프 반복을 끝내거나 프로그램을 깔끔하게 종료하는 등 경계 조건의 경우가 까다로우므로 특히 주의합니다.</li>\n<li>사용하는 라이브러리와 기본 알고리즘을 이해합니다. 특정 라이브러리 기능이 기본 알고리즘과 유사한 어떤 문제를 어떻게 해결하는지 파악합니다.</li>\n<li>보호할 코드 영역을 찾아내는 방법과 특정 코드 영역을 잠그는 방법을 이해합니다. 잠글 필요가 없는 코드는 잠그지 않습니다. 잠긴 영역에서 다른 잠긴 영역을 호출하지 않습니다. 그러려면 공유하는 정보와 공유하지 않는 정보를 제대로 이해 해야 합니다. 공유하는 객체 수와 범위를 최대한 줄입니다. 클라이언트에게 공유 상태를 관리하는 책임을 떠넘기지 않습니다. 필요하다면 객체 설계를 변경해 클라이언트에게 편의를 제공합니다.</li>\n<li>어떻게든 문제는 생깁니다. 초반에 드러나지 않는 문제는 일회성으로 치부해 무시하기 쉽습니다. 소위 일회성 문제는 대개 시스템에 부하가 걸릴 때나 아니면 뜬금없이 발생합니다. 그러므로 스레드 코드는 많은 플랫폼에서 많은 설정으로 반복해서 계속 테스트 해야합니다. 테스트 용이성은 TDD 3대 규칙을 따르면 자연히 얻어집니다. 테스트 용이성은 또한 좀 더 넓은 설정 범위에서 코드를 수행하기 위해 필요한 기능을 제공하는 플러그인 수준을 의미합니다.</li>\n<li>시간을 들여 보조 코드를 추가하면 오류가 드러날 가능성이 크게 높아집니다. 직접 구현해도 괜찮고 몇 가지 자동화 기술을 사용해도 괜찮습니다. 초반부터 보조 코드를 고려합니다. 스레드 코드는 출시하기 전까지 최대한 오랫동안 돌려봐야 합니다.</li>\n<li>깔끔한 접근 방식을 취한다면 코드가 올바로 돌아갈 가능성이 극적으로 높아집니다.</li>\n</ul>","frontmatter":{"title":"clean code 13장 동시성","date":"March 31, 2020"}}},"pageContext":{"slug":"/clean code/clean-code-13장-동시성/","previous":{"fields":{"slug":"/clean code/clean-code-12장-창발성/"},"frontmatter":{"title":"clean code 12장 창발성","category":"clean code","draft":false}},"next":{"fields":{"slug":"/develop/node-https-적용/"},"frontmatter":{"title":"node https 적용","category":"develop","draft":false}}}}}