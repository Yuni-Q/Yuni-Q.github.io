{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean code/clean-code-10장-클래스/","result":{"data":{"site":{"siteMetadata":{"title":"yuniq 블로그","author":"yuniq","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuniq","utterances":"yuniq"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"08a7e1ef-d6f5-528d-844f-37357ff5c4f5","excerpt":"…","html":"<h2 id=\"클래스-체계\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B2%B4%EA%B3%84\" aria-label=\"클래스 체계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 체계</h2>\n<ul>\n<li>클래스를 정의하는 표준 자바 관례에 따르면, 가장 먼저 변수 목록이 나옵니다. 정적 공개 상수가 있다면 맨 처음에 나옵니다. 다음으로 정적 비공개변수가 나옵니다. 이어서 비공개 인스턴스 변수가 나옵니다. 공개 변수가 필요한 경우는 거의 없습니다.</li>\n<li>변수 목록 다음에는 공개 함수가 나옵니다.</li>\n<li>비공개 함수는 자신을 호출하는 공개 함수 직후에 넣습니다.</li>\n<li>즉, 추상화 단계가 순차적으로 내려갑니다. 그래서 프로그램은 신문 기사처럼 읽힙니다.</li>\n</ul>\n<h3 id=\"캡슐화\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"캡슐화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화</h3>\n<ul>\n<li>변수와 유틸리티 함수는 가능한 공개하지 않는 편이 낫지만 반드시 숨겨야 한다는 법칙도 없습니다.</li>\n<li>때로는 변수나 유틸리티 함수를 protected로 선언해 테스트 코드에 접근을 허용하기도 합니다.</li>\n<li>같은 패키지 안에서 테스트 코드가 함수를 호출하거나 변수를 사용해야 한다면 그 함수나 변수를 protected로 선언하거나 패키지 전체로 공개합니다. 하지만 그 전에 비공개 상태를 유지할 온갖 방법을 강구합니다. 캡슐화를 풀어주는 결정은 언제나 최후의 수단입니다.</li>\n</ul>\n<h2 id=\"클래스는-작아야-한다\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EC%9E%91%EC%95%84%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"클래스는 작아야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스는 작아야 한다!</h2>\n<ul>\n<li>클래스는 첫째! 작아야합니다. 둘째! 작아야합니다. 더 작아야 합니다. 단 함수와는 다르게(함수는 물리적인 행 수로 측정)</li>\n<li>클래스가 맡은 책임을 측정합니다.</li>\n<li>개념은 빈 행으로 분리합니다. 코드의 각 줄은 수식이나 절을 나타내고, 여러 줄의 묶음은 완결된 생각 하나를 표현합니다. 생각 사이에는 빈 행을 넣어 분리해야 합니다. 그렇지 않다면 단지 줄바꿈만 다를 뿐인데도 코드 가독성이 현저히 떨어집니다.</li>\n<li>클래스 이름은 해당 클래스 책임을 기술해야 합니다. 실제로 작명은 클래스 크기를 줄이는 첫 번째 관문입니다. 간결한 이름이 떠오르지 않는다면 필경 클래스 크기가 너무 커서 그렇습니다. 클래스 이름이 모호하다면 필경 클래스 책임이 너무 많아서 입니다.</li>\n<li>클래스 설명은 만일(if), 그리고(and), (하)며(or), 하지만(but)을 사용하지 않고서 25단어 내외로 가능해야 합니다.</li>\n</ul>\n<h3 id=\"단일-책임-원칙\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99\" aria-label=\"단일 책임 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 책임 원칙</h3>\n<ul>\n<li>단일 책임 원칙(Single Responsibility Principle, SRP)은 클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙입니다. 책임, 즉 변경할 이유를 파악하려고 애쓰다 보면 코드를 추상화 하기도 쉬워집니다.</li>\n<li>SRP는 ‘책임’이라는 개념을 정의하며 적절한 클래스 크기를 제시합니다. 클래스는 책임, 즉 변경할 이유가 하나여야 한다는 의미입니다.</li>\n<li>SRP는 객체지향설계에서 더욱 중요한 개념이고, 지키기 수월한 개념인데, 개발자가 가장 무시하는 규칙 중 하나입니다.</li>\n<li>대부분의 프로그래머들이 돌아가는 소프트웨어에 초점을 맞춥니다. 전적으로 올바른 태도이기는 하지만, 돌아가는 소프트웨어가 작성되면 깨끗하고 체계적인 소프트웨어라는 다음 관심사로 전환을 해야합니다.</li>\n<li>큼직한 다목적 클래스 몇 개로 이뤄진 시스템은 (변경을 가할 때) 당장 알 필요가 없는 사실까지 들이밀어 독자를 방해합니다.</li>\n<li>큰 클래스 몇 개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직합니다. 작은 클래스는 각자 맡은 책임이 하나이며, 변경할 이유가 하나 입니다. 다른 작은 클래스와 협력해 시스템에 필요한 동작을 수행합니다.</li>\n</ul>\n<h2 id=\"응집도cohesion\" style=\"position:relative;\"><a href=\"#%EC%9D%91%EC%A7%91%EB%8F%84cohesion\" aria-label=\"응집도cohesion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>응집도(Cohesion)</h2>\n<ul>\n<li>클래스는 인스턴스 변수 수가 작아야 합니다.</li>\n<li>각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 합니다.</li>\n<li>일반적으로 메시드가 변수를 더 많이 사용할수록 메서드와 클래스는 응집도가 더 높습니다.</li>\n<li>모든 인스턴스 변수를 메서드마다 사용하는 클래스는 응집도가 가장 높습니다.</li>\n<li>일반적으로 이처럼 응집도가 가장 높은 클래스는 가능하지도 바람직하지도 않습니다. 그렇지만 우리는 응집도가 높은 클래스를 선호합니다. 응집도가 높다는 말은 클래스에 속한 메서드와 변수가 서로 의존하며 논리적인 단위로 묶인다는 의미기 때문입니다.</li>\n<li>‘함수를 작게, 매개변수 목록을 짧게’라는 전략을 따르다 보면 때때로 몇몇 메서드만이 사용하는 인스턴스 변수가 아주 많아집니다. 이는 십중팔구 새로운 클래스로 쪼개야 한다는 신호입니다. 응집도가 높아지도록 변수와 메서드를 적절히 분리해 새로운 클래스 두세 개로 쪼개줍니다.</li>\n</ul>\n<h3 id=\"응집도를-유지하면-작은-클래스-여럿이-나온다\" style=\"position:relative;\"><a href=\"#%EC%9D%91%EC%A7%91%EB%8F%84%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EB%A9%B4-%EC%9E%91%EC%9D%80-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%97%AC%EB%9F%BF%EC%9D%B4-%EB%82%98%EC%98%A8%EB%8B%A4\" aria-label=\"응집도를 유지하면 작은 클래스 여럿이 나온다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>응집도를 유지하면 작은 클래스 여럿이 나온다</h3>\n<ul>\n<li>큰 함수를 작은 함수 여럿으로 나누기만 해도 클래스 수가 많아집니다.</li>\n<li>첫째, 리팩터링한 프로그램은 좀 더 길고 서술적인 변수 이름을 사용합니다.</li>\n<li>둘째, 리팩터링한 프로그램은 코드에 주석을 추가하는 수단으로 함수 선언과 클래스 선언을 활용합니다.</li>\n<li>셋째, 가독성을 높이고자 공백을 추가하고 형식을 맞춥니다.</li>\n</ul>\n<h2 id=\"변경하기-쉬운-클래스\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"변경하기 쉬운 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경하기 쉬운 클래스</h2>\n<ul>\n<li>대다수 시스템은 지속적인 변경이 가해집니다. 그리고 뭔가 변경할 때마다 시스템이 의도대로 동작하지 않을 위험이 따릅니다. 깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춥니다.</li>\n<li>클래스 일부에서만 사용되는 비공개 메서드는 코드를 개선할 잠재적인 여지를 시사합니다. 하지만 실제로 개선에 뛰어드는 계기는 시스템이 변해서라야 합니다.</li>\n<li>새 기능을 수정하거나 기존 기능을 변경할 때 건드릴 코드가 최소인 시스템 구조가 바람직하다. 이상적인 시스템이라면 새 기능을 추가할 때 시스템을 확장 할 뿐 기존 코드를 변경하지는 않는다.</li>\n<li>잘 짜여진 시스템은 추가와 수정에 있어서 건드릴 코드가 최소입니다.</li>\n</ul>\n<h3 id=\"변경으로부터-격리\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0-%EA%B2%A9%EB%A6%AC\" aria-label=\"변경으로부터 격리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경으로부터 격리</h3>\n<ul>\n<li>OOP입문에서 concrete 클래스와 abstract 클래스가 있는데, concrete 클래스에 의존(상세한 구현에 의존)하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠집니다. 그래서 인터페이스와 abstract 클래스를 사용해 구현이 미치는 영향을 격리시켜야 합니다.</li>\n<li>우리는 인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.</li>\n<li>추상화를 통해 테스트가 가능할 정도로 시스템의 결합도를 낮춤으로써 유연성과 재사용성도 더욱 높아집니다.</li>\n<li>상세한 구현에 의존하는 코드는 테스트가 어렵습니다.</li>\n<li>결합도가 낮다는 소리는 각 시스템 요소가 다른 요소로부터 그리고 변경으로부터 잘 격리되어 있다는 의미입니다. 시스템 요소가 서로 잘 격리되어 있으면 각 요소를 이해하기도 더 쉬워집니다.</li>\n<li>결합도를 최소로 줄이면 자연스럽게 또 다른 클래스 설계 원칙인( DIP, Dependency Inversion Principle)를 따르는 클래스가 나옵니다. 본질적으로 DIP는 클래스가 상세한 구현이 아니라 추상화에 의존해야 한다는 원칙입니다.</li>\n<li>추상화로 실제로 값을 얻어오는 방식등과 같은 구체적인 사실을 모두 숨깁니다.</li>\n</ul>","frontmatter":{"title":"clean code 10장 클래스","date":"March 27, 2020"}}},"pageContext":{"slug":"/clean code/clean-code-10장-클래스/","previous":{"fields":{"slug":"/clean code/clean-code-9장-단위-테스트/"},"frontmatter":{"title":"clean code 9장 단위 테스트","category":"clean code","draft":false}},"next":null}}}