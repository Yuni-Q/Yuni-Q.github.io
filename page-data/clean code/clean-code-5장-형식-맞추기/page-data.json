{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean code/clean-code-5장-형식-맞추기/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni_q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"49713711-c4c3-5eb7-afca-6945d2810ee4","excerpt":"Intro…","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>질서정연하고 깔끔하며, 일관적인 코드를 본다면 사람들에게 전문가가 짰다는 인상을 심어줄 수 있습니다. 반대로, 코드가 어수선해 보인다면 프로젝트 전반적으로 무성의한 태도로 작성했다고 생각합니다.</li>\n<li>프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야 합니다.</li>\n<li>코드 형식을 맞추기 위한 간단한 규칙을 정하고 그 규칙을 착실히 따라야 합니다.</li>\n<li>팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 합니다.</li>\n<li>필요하다면 규칙을 자동으로 적용하는 도구를 활용합니다.</li>\n</ul>\n<h2 id=\"형식을-맞추는-목적\" style=\"position:relative;\"><a href=\"#%ED%98%95%EC%8B%9D%EC%9D%84-%EB%A7%9E%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81\" aria-label=\"형식을 맞추는 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형식을 맞추는 목적</h2>\n<ul>\n<li>코드 형식은 중요합니다. 너무 중요해서 무시하기 어렵습니다. 너무나도 중요하므로 융통성 없이 맹목적으로 따르면 안 됩니다. 코드 형식은 의사소통의 일환 입니다.<code class=\"language-text\">의사소통은 전문 개발자의 일차적인 의무 입니다.</code></li>\n<li>어쩌면 ‘돌아가는 코드’가 전문 개발자의 일차적인 의무라 여길 수 있습니다. 오늘 구현한 기능이 다음 버전에서 바뀔 확률은 매우 높습니다. 그런데 오늘 구현한 코드의 가독성은 앞으로 바뀔 코드의 품질에 지대한 영향을 줍니다. 오랜 시간이 지나 원래 코드의 흔적을 더 이상 찾아보기 어려울 정도로 코드가 바뀌어도 맨 처음 잡아놓은 구현 스타일과 가독성 수준은 유지보수 용이성과 확장성에 계속 영향을 줍니다. 원래 코드는 사라질지라도 개발자의 스타일과 규율은 사라지지 않습니다.</li>\n<li><code class=\"language-text\">코드는 사라져도 스타일과 규율은 사라지지 않습니다.</code></li>\n</ul>\n<h2 id=\"적절한-행-길이를-유지하라코드의-세로-길이\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%A0%88%ED%95%9C-%ED%96%89-%EA%B8%B8%EC%9D%B4%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EB%9D%BC%EC%BD%94%EB%93%9C%EC%9D%98-%EC%84%B8%EB%A1%9C-%EA%B8%B8%EC%9D%B4\" aria-label=\"적절한 행 길이를 유지하라코드의 세로 길이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적절한 행 길이를 유지하라(코드의 세로 길이)</h2>\n<ul>\n<li>500줄을 넘지않고 대부분 <code class=\"language-text\">200줄</code> 정도인 파일로도 커다란 시스템을 구축할 수 있습니다.</li>\n<li>코드 길이를 200줄 정도로 제한하는 것은 반드시 지킬 엄격한 규칙은 아니지만, 일반적으로 큰 파일보다는 작은 파일이 이해하기 쉽습니다.</li>\n</ul>\n<h3 id=\"신문-기사처럼-작성하라\" style=\"position:relative;\"><a href=\"#%EC%8B%A0%EB%AC%B8-%EA%B8%B0%EC%82%AC%EC%B2%98%EB%9F%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\" aria-label=\"신문 기사처럼 작성하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>신문 기사처럼 작성하라</h3>\n<ul>\n<li>독자는 위에서 아래로 기사를 읽습니다. 최상 단에 기사를 몇 마디로 요약하는 표제가 나옵니다. 독자는 표제를 보고서 기사를 읽을지 말지 결정합니다.</li>\n<li>첫 문단은 전체 기사 내용을 요약합니다. 세세한 사실은 숨기고 커다란 그림을 보여줍니다. 쭉 읽으며 내려가면 세세한 사실이 조금씩 드러 납니다. 날짜, 이름, 발언, 주장, 기타 세부사항이 나옵니다.</li>\n<li>이름은 간단하면서도 설명이 가능하게 지어야 합니다. 이름만 보고도 올바른 모듈을 살펴보고 있는지 아닌지를 판단 할 정도로 신경 써서 지어야 합니다.</li>\n<li>소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명합니다. 아래로 내려갈수록 의도를 세세하게 묘사합니다. 마지막에는 가장 저차원 함수와 세부 내역이 나옵니다.</li>\n<li>신문은 다양한 기사로 이뤄지니다. 대다수 기사가 아주 짧습니다. 어떤 기사는 조금 길수도 있습니다. 하지만 한 면을 채우는 기사는 거의 없습니다. 신문이 읽을 만한 이유는 여기에 있습니다. 신문이 사실 날짜, 이름 등을 무작위로 뒤섞은 긴 기사 하나만 싣는다면 아무도 읽지 않을 것입니다.</li>\n</ul>\n<h3 id=\"개념은-빈행으로-분리하라\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90%EC%9D%80-%EB%B9%88%ED%96%89%EC%9C%BC%EB%A1%9C-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"개념은 빈행으로 분리하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념은 빈행으로 분리하라</h3>\n<ul>\n<li>코드의 각 줄은 수식이나 절을 나타내고, 여러 줄의 묶음은 완결된 생각 하나를 표현합니다.</li>\n<li>생각 사이에는 빈 행을 넣어 분리해야 합니다. 그렇지 않다면 단지 줄바꿈만 다를 뿐인데도 코드 가독성이 현저히 떨어집니다.</li>\n</ul>\n<h3 id=\"세로-밀집도\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%A1%9C-%EB%B0%80%EC%A7%91%EB%8F%84\" aria-label=\"세로 밀집도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세로 밀집도</h3>\n<ul>\n<li>줄바꿈이 개념을 분리한다면, 반대로 세로 밀집도는 연관성을 의미합니다.</li>\n<li>서로 밀집한 코드 행은 세로로 가까이 놓여야 합니다.</li>\n</ul>\n<h3 id=\"수직-거리\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A7%81-%EA%B1%B0%EB%A6%AC\" aria-label=\"수직 거리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수직 거리</h3>\n<ul>\n<li>서로 밀접한 개념은 세로로 가까이 둬야 합니다.</li>\n<li>\n<p>물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않습니다. 하지만 타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 합니다.</p>\n<ul>\n<li>이게 바로 protected 변수를 피해야 하는 이유 중 하나입니다.</li>\n</ul>\n</li>\n<li>같은 파일에 속할 정도로 밀접한 두 개념은 세로 거리로 연관성을 표현합니다. 여기서 연관성이란 한 개념을 이해하는 데 다른 개념이 중요한 정도 입니다.</li>\n</ul>\n<h4 id=\"변수-선언\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 선언</h4>\n<ul>\n<li>변수는 사용하는 위치에 최대한 가까이 선언합니다.</li>\n<li>우라가 만든 함수는 매우 짧으므로(Chapter3 - 함수) 지역 변수는 각 함수 맨 처음에 선언합니다.</li>\n</ul>\n<h4 id=\"인스턴스-변수\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98\" aria-label=\"인스턴스 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 변수</h4>\n<ul>\n<li>인스턴스 변수를 선언하는 위치는 아직도 논쟁이 분분합니다. 일반적으로 C++에서는 모든 인스턴스 변수를 클래스 마지막에 선언한다는 소위 가위 규칙(sors rule)을 적용합니다. 하지만 자바에서는 보통 클래스 맨 처음에 인스턴스 변수를 선언합니다.</li>\n<li>잘 알려진 위치에 인스턴스 변수를 모은다는 사실이 중요합니다. 변수 선언을 어디서 찾을지 모두가 알고 있어야 합니다.</li>\n<li>\n<p>변수 간에 세로로 거리를 두지 않습니다.</p>\n<ul>\n<li>잘 설계한 클래스는 많은 (혹은 대다수) 클래스 메서드가 인스턴스 변수를 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"종속-함수\" style=\"position:relative;\"><a href=\"#%EC%A2%85%EC%86%8D-%ED%95%A8%EC%88%98\" aria-label=\"종속 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종속 함수</h4>\n<ul>\n<li>한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치합니다. 또한 가능하다면 호출하는 함수를 호출되는 함수보다 먼저 배치합니다. 그러면 프로그램이 자연스럽게 읽힙니다. 규칙을 일관적으로 적용한다면 방금 호출한 함수가 잠시 후에 정의되리라는 사실을 예측합니다.</li>\n<li>상수를 알아야 마땅한 함수에서 실제로 사용하는 함수로 상수를 넘겨주는 방법이 더 좋습니다.</li>\n</ul>\n<h4 id=\"개념적-유사성\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90%EC%A0%81-%EC%9C%A0%EC%82%AC%EC%84%B1\" aria-label=\"개념적 유사성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념적 유사성</h4>\n<ul>\n<li>어떤 코드는 서로 끌어 당깁니다. 개념적인 친화도가 높기 때문입니다. 친화도가 높을수록 코드를 가까이 배치합니다.</li>\n<li>\n<p>친화도가 높은 요인은 여러 가지 입니다.</p>\n<ul>\n<li>한 함수가 다른 함수를 호출해 생기는 직접적인 종속성 입니다.</li>\n<li>변수와 그 변수를 사용하는 함수 입니다.</li>\n<li>비슷한 동작을 수행하는 일군의 함수 입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"세로-순서\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%A1%9C-%EC%88%9C%EC%84%9C\" aria-label=\"세로 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세로 순서</h4>\n<ul>\n<li>일반적으로 함수 호출 종속성은 아래 방향으로 유지합니다. 다시 말해, 호출되는 함수를 호출하는 함수보다 나중에 배치합니다. 그러면 소스 코드 모듈이 <code class=\"language-text\">고차원에서 저차원</code>으로 자연스럽게 내려 갑니다.</li>\n<li>가장 중요 한 개념을 표현할 때는 세세한 사항을 최대한 배제 합니다. 세세한 사항은 가장 마지막에 표현 합니다.그러면 소스파일에서 첫 함수 몇개만 읽어도 개념을 파악하기 쉬워집니다. 세세한 사항까지 파고들 필요가 없습니다.</li>\n</ul>\n<h2 id=\"가로-형식-맞추기\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%A1%9C-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0\" aria-label=\"가로 형식 맞추기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가로 형식 맞추기</h2>\n<ul>\n<li>대다수의 프로그래머들은 명백히 짧은 행을 선호하므로 짧은 행이 바람직 합니다.</li>\n<li>옛날 홀러리스가 내놓은 80자 제한은 다소 인위적입니다. 100자나 120자 정도도 나쁘지 않습니다. 하지만 그 이상은 주의부족 입니다.</li>\n<li>120자 이하로 행 길이를 제한합니다.</li>\n</ul>\n<h2 id=\"가로-공백과-밀집도\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%A1%9C-%EA%B3%B5%EB%B0%B1%EA%B3%BC-%EB%B0%80%EC%A7%91%EB%8F%84\" aria-label=\"가로 공백과 밀집도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가로 공백과 밀집도</h2>\n<ul>\n<li>가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현합니다.</li>\n<li>할당 연산자를 강조하려고 앞뒤에 공백을 줍니다. 할당문은 왼쪽 요소와 오른쪽 요소가 분명히 나뉩니다. 공백을 넣으면 두 가지 주요 요소가 확실히 나뉜다는 사실이 더욱 분명해집니다.</li>\n<li>반면, 함수 이름과 이어지는 괄호 사이에는 공백을 넣지 않습니다. 함수와 인수는 서로 밀접하기 때문입니다. 공백을 넣으면 한 개념이 아니라 별개로 보입니다. 함수를 호출하는 코드에서 괄호 안 인수는 공백으로 분리합니다. 쉼표를 강조해 인수가 별개라는 사실을 보여줍니다.</li>\n<li>연산자 우선순위를 강조하기 위해서도 공백을 사용합니다.</li>\n<li>\n<p>승수 사이는 공백이 없습니다. 곱셈은 우선순위가 가장 높기 때문입니다. 항 사이에는 공백이 들어갑니다. 덧셈과 뺄셈은 우선순위가 곱셈 보다 낮기 때문입니다.</p>\n<ul>\n<li>불행히도, 코드 형식을 자동으로 맞춰주는 도구는 대다수가 연산자 우선순위를 고려하지 못하므로, 수식에 똑같은 간격을 적용합니다. 따라서 공백을 넣어줘도 나중에 도구에서 없애는 경우가 흔합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"가로-정렬\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%A1%9C-%EC%A0%95%EB%A0%AC\" aria-label=\"가로 정렬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가로 정렬</h3>\n<ul>\n<li>선언문과 할당문을 별도로 정렬하지 않습니다. 정렬하지 않으면 오히려 중대한 결함을 찾기 쉽습니다. 정렬이 필요할 정도로 목록이 길다면 문제는 목록 길이지 정렬 부족이 아닙니다.선언부가 길다면 클래스를 쪼개야 한다는 의미입니다.</li>\n</ul>\n<h3 id=\"들여쓰기\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%97%AC%EC%93%B0%EA%B8%B0\" aria-label=\"들여쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들여쓰기</h3>\n<ul>\n<li>들여쓰기를 잘 해놓으면 - 물론 그러고 있겠지만! - 구조가 한 눈에 들어옵니다.</li>\n<li>들여쓰는 정도는 계층에서 코드가 자리잡은 수준에 비례합니다.</li>\n<li>클래스 정의처럼 파일 수준인 문장은 들여쓰지 않습니다. 클래스 내 메서드는 클래스보다 한 수준 들여씁니다. 메서드 코드는 메서드 선언보다 한 수준 들여씁니다. 블록 코드는 블록을 포함하는 코드보다 한 수준 들여씁니다.</li>\n<li>프로그래머는 이런 들여쓰기 체계에 크게 의존합니다. 왼쪽으로 코드를 맞춰 코드가 속하는 범위를 시각적으로 표현합니다. 그러면 이 범위에서 저 범위로 재빨리 이동하기 쉬워집니다. 현재 상황과 무관한 if문/while문 코드를 일일이 살펴볼 필요가 없습니다. 소스 파일 왼쪽을 훑으면서 새 메서드, 새 변수, 새 클래스도 찾습니다. 들여쓰기가 없다면 인간이 코드를 읽기란 거의 불가능 합니다.</li>\n</ul>\n<h4 id=\"들여쓰기-무시하기\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%97%AC%EC%93%B0%EA%B8%B0-%EB%AC%B4%EC%8B%9C%ED%95%98%EA%B8%B0\" aria-label=\"들여쓰기 무시하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들여쓰기 무시하기</h4>\n<ul>\n<li>때로는 간단한 if 문, 짧은 while 문, 짧은 함수에서 들여쓰기 규칙을 무시하고픈 유혹이 생깁니다. 이런 유혹에 빠질 때마다 항상 원점으로 돌아가 들여쓰기를 넣습니다. 즉, 한 행에 범위를 뭉뚱그린 코드를 피합니다.</li>\n</ul>\n<h3 id=\"가짜범위\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%A7%9C%EB%B2%94%EC%9C%84\" aria-label=\"가짜범위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가짜범위</h3>\n<ul>\n<li>때로는 빈 while 문이나 for 문을 접합니다. 이런 구조는 가능한 한 피합니다. 피하지 못할 때는 빈 블록을 올바로 들여쓰고 괄호로 감쌉니다. 지금까지 while 문 끝에 세미콜론(;) 하나를 살짝 덧붙인 코드로 수 없이 골탕을 먹었습니다. 세미콜론(;)은 새 행에다 제대로 들여써서 넣어줍니다. 그렇게 하지 않으면 눈에 띄지 않습니다.</li>\n</ul>\n<h2 id=\"팀규칙\" style=\"position:relative;\"><a href=\"#%ED%8C%80%EA%B7%9C%EC%B9%99\" aria-label=\"팀규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팀규칙</h2>\n<ul>\n<li>팀에 속한다면 자신이 선호해야 할 규칙은 바로 팀 규칙입니다.</li>\n<li>팀은 한 가지 규칙에 합의해야 합니다. 그리고 모든 팀원은 그 규칙을 따라야 합니다. 그래야 소프트웨어가 일관적인 스타일을 보입니다. 개개인이 따로국밥처럼 맘대로 짜대는 코드는 피합니다.</li>\n<li><code class=\"language-text\">좋은 소프트웨어 시스템은 읽기 쉬운 문서로 이뤄진다는 사실을 기억해야 합니다.</code> 스타일은 일관적이고 매끄러워야 합니다. 한 소스 파일에서 봤던 형식이 다른 소스 파일에도 쓰이리라는 신뢰감을 줘야 합니다. 온갖 스타일을 뒤섞어 소스 코드를 필요 이상으로 복잡하게 만드는 실수는 반드시 피합니다.</li>\n</ul>","frontmatter":{"title":"clean code 5장 형식 맞추기","date":"March 06, 2020"}}},"pageContext":{"slug":"/clean code/clean-code-5장-형식-맞추기/","previous":{"fields":{"slug":"/clean code/clean-code-4장-주석/"},"frontmatter":{"title":"clean code 4장 주석","category":"clean code","draft":false}},"next":{"fields":{"slug":"/develop/공변-반공변-무공변/"},"frontmatter":{"title":"공변 반공변 무공변","category":"develop","draft":false}}}}}