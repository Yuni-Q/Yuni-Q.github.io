{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean code/clean-code-9장-단위-테스트/","result":{"data":{"site":{"siteMetadata":{"title":"yuniq 블로그","author":"yuniq","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuniq","utterances":"yuniq"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"c22efb24-3fad-5c9d-aacc-cbf374a7a1ae","excerpt":"Intro 1997년만 해도 TDD(Test Driven Development)라는 개념을 아무도 몰랐습니다. 우리들 대다수에게 단위 테스트란 자기 프로그램이 ‘돌아간다’는 사실만 확인하는 일회성 코드에 불과했습니다. 지금은 애자일과 TDD…","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>1997년만 해도 TDD(Test Driven Development)라는 개념을 아무도 몰랐습니다.</li>\n<li>우리들 대다수에게 단위 테스트란 자기 프로그램이 ‘돌아간다’는 사실만 확인하는 일회성 코드에 불과했습니다.</li>\n<li>지금은 애자일과 TDD 덕택에 단위 테스트를 자동화하는 프로그래머들이 이미 많아졌으며 점점 더 늘어나는 추세입니다.</li>\n<li>우리 분야에 테스트를 추가하려고 급하게 서두르는 와중에 많은 프로그래머들이 제대로 된 테스트 케이스를 작성해야 한다는 좀 더 미묘한(그리고 더욱 중요한) 사실을 놓치고 있습니다.</li>\n</ul>\n<h2 id=\"tdd-법칙-세-가지\" style=\"position:relative;\"><a href=\"#tdd-%EB%B2%95%EC%B9%99-%EC%84%B8-%EA%B0%80%EC%A7%80\" aria-label=\"tdd 법칙 세 가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD 법칙 세 가지</h2>\n<ol>\n<li>첫째 법칙: 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않습니다.</li>\n<li>둘째 법칙: 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성합니다.</li>\n<li>셋째 법칙: 현재 실패하는 테스트를 통과할 징도로만 실제 코드를 작성합니다.</li>\n<li>위 세 가지 규칙을 따르면 개발과 테스트가 대략 30초 주기로 묶입니다. 테스트 코드와 실제 코드가 함께 나올뿐더러 테스트 코드가 실제 코드보다 불과 몇 초 전에 나옵니다.</li>\n<li>이렇게 일하면 매일 수십 개, 매달 수백 개, 매년 수천 개에 달하는 테스트 케이스가 나옵니다.</li>\n<li>이렇게 일하면 실제 코드를 사실상 전부 테스트하는 테스트 케이스가 나옵니다.</li>\n<li>하지만 실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 합니다.</li>\n</ol>\n<h2 id=\"깨끗한-테스트-코드-유지하기\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"깨끗한 테스트 코드 유지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깨끗한 테스트 코드 유지하기</h2>\n<ul>\n<li>팀은 지저분한 테스트 코드를 내놓으나 테스트를 안 하나 같습니다.</li>\n<li>문제는 실제 코드가 진화하면 테스트 코드도 변해야 한다는데 있습니다. 그런데 테스트 코드가 지저분할수록 변경하기 어려워집니다.</li>\n<li>테스트 코드가 복잡할수록 실제 코드를 짜는 시간보다 테스트 케이스를 추가하는 시간이 더 걸리기 쉽습니다.</li>\n<li>실제 코드를 변경해 기존 테스트 케이스가 실패하기 시작하면, 지저분한 코드로 인해, 실패하는 테스트 케이스를 점점 더 통과시키기 어려워집니다. 그래서 테스트 코드는 계속해서 늘어나는 부담이 됩니다.</li>\n<li>테스트 코드는 실제 코드 못지 않게 중요합니다. 테스트 코드는 이류 시민이 아닙니다. 테스트 코드는 사고와 설계와 주의가 필요합니다. 실제 코드 못지 않게 깨끗하게 짜야 합니다.</li>\n<li><code class=\"language-text\">테스트는 유연성, 유지보수성, 재사용성을 제공합니다.</code></li>\n<li>코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 <code class=\"language-text\">단위 테스트</code>입니다.</li>\n<li>\n<p>테스트 케이스가 있으면 변경이 두렵지 않습니다. 테스트 케이스가 없다면 모든 변경이 잠정적인 버그입니다. 아키텍처가 아무리 유연 하더라도, 설계를 아무리 잘 나눴더라도, 테스트 케이스가 없으면 개발자는 변경을 주저합니다. 버그가 숨어들까 두렵기 때문입니다.</p>\n<ul>\n<li>하지만 테스트 케이스가 있다면 공포는 사실상 사라집니다. 테스트 커버리지가 높을수록 공포는 줄어듭니다. 아키텍처가 부실한 코드나 설계가 모호하고 엉망인 코드라도 별다른 우려 없이 변경할 수 있습니다. 오히려 안심하고 아키텍처와 설계를 개선할 수 있습니다.</li>\n</ul>\n</li>\n<li>실제 코드를 점검하는 자동화된 단위 테스트 슈트는 설계와 아키텍처를 최대한 깨끗하게 보존하는 열쇠입니다. 테스트는 유연성, 유지보수성, 재사용성을 제공합니다. 테스트 케이스가 있으면 변경이 쉬워지기 때문입니다.</li>\n<li>테스트 코드가 지저분하면 코드를 변경하는 능력이 떨어지며 코드 구조를 개선하는 능력도 떨어집니다. 테스트 코드가 지저분할수록 실제 코드도 지저분해집니다. 결국 테스트 코드를 잃어버리고 실제 코드도 망가집니다.</li>\n</ul>\n<h2 id=\"깨끗한-테스트-코드\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"깨끗한 테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깨끗한 테스트 코드</h2>\n<ul>\n<li>깨끗한 테스트 코드를 만들려면 세 가지가 필요합니다. <code class=\"language-text\">가독성, 가독성, 가독성</code>.</li>\n<li>어쩌면 가독성은 실제 코드보다 테스트 코드에 더더욱 중요합니다.</li>\n<li>테스트 코드에서 가독성을 높이려면 여느 코드와 마찬가지입니다. <code class=\"language-text\">명료성, 단순성，풍부한 표현력</code>이 필요합니다. 테스트 코드는 최소의 표현으로 많은 것을 나타내야 합니다.</li>\n<li>첫 부분은 테스트 자료를 만듭니다. 두 번째 부분은 테스트 자료를 조작하며, 세 번째 부분은 조작한 결과가 올바른지 확인합니다.</li>\n<li>잡다하고 세세한 코드를 거의 다 없앴다는 사실에 주목합니다. 테스트 코드는 본론에 돌입해 진짜 필요한 자료 유형과 함수만 사용합니다. 그러므로 코드를 읽는 사람은 온갖 잡다하고 세세한 코드에 주눅들고 헷갈릴 필요 없이 코드가 수행하는 기능을 재빨리 이해합니다.</li>\n</ul>\n<h2 id=\"도메인에-특화된-테스트-언어\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%ED%8A%B9%ED%99%94%EB%90%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4\" aria-label=\"도메인에 특화된 테스트 언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인에 특화된 테스트 언어</h2>\n<ul>\n<li>흔히 쓰는 시스템 조작 API를 사용하는 대신 API 위에다 함수와 유틸리티를 구현한 후 그 함수와 유틸리티를 사용하므로 테스트 코드를 짜기도 읽기도 쉬워집니다. 이렇게 구현한 함수와 유틸리티는 테스트 코드에서 사용하는 특수 API가 됩니다. 즉, 테스트를 구현하는 당사자와 나중에 테스트를 읽어볼 독자를 도와주는 테스트 언어입니다.</li>\n<li>이런 테스트 API는 처음부터 설계된 API가 아닙니다. 잡다하고 세세한 사항으로 범벅된 코드를 계속 리팩터링하다가 진화된 API 입니다. 숙련된 개발자라면 자기 코드를 좀 더 간결하고 표현력이 풍부한 코드로 리팩터링해야 마땅합니다.</li>\n</ul>\n<h2 id=\"이중-표준\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A4%91-%ED%91%9C%EC%A4%80\" aria-label=\"이중 표준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이중 표준</h2>\n<ul>\n<li>테스트 API 코드에 적용하는 표준은 실제 코드에 적용하는 표준과 확실히 다릅니다.</li>\n<li>단순하고, 간결하고, 표현력이 풍부해야 하지만, <code class=\"language-text\">실제 코드만큼 효율적일 필요는 없습니다</code>. 실제 환경이 아니라 테스트 환경에서 돌아가는 코드이기 때문입니다. 실제 환경과 테스트 환경은 요구사항이 판이하게 다릅니다. 이것이 이중 표준의 본질입니다.</li>\n<li>실제 환경에서는 절대로 안 되지만 테스트 환경에서는 전혀 문제없는 방식이 있습니다. 대개 메모리나 CPU 효율과 관련 있는 경우입니다. 코드의 깨끗함과는 철저히 무관합니다.</li>\n</ul>\n<h2 id=\"한-테스트-함수에서-여러-개념을-테스트한다는-사실이-문제입니다-그러므로-가장-좋은-규칙은-개념-당-assert-문-수를-최소로-줄여라와-테스트-함수-하나는-개념-하나만-테스트하라라-입니다\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EB%85%90%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%9C%EB%8B%A4%EB%8A%94-%EC%82%AC%EC%8B%A4%EC%9D%B4-%EB%AC%B8%EC%A0%9C%EC%9E%85%EB%8B%88%EB%8B%A4-%EA%B7%B8%EB%9F%AC%EB%AF%80%EB%A1%9C-%EA%B0%80%EC%9E%A5-%EC%A2%8B%EC%9D%80-%EA%B7%9C%EC%B9%99%EC%9D%80-%EA%B0%9C%EB%85%90-%EB%8B%B9-assert-%EB%AC%B8-%EC%88%98%EB%A5%BC-%EC%B5%9C%EC%86%8C%EB%A1%9C-%EC%A4%84%EC%97%AC%EB%9D%BC%EC%99%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A8%EC%88%98-%ED%95%98%EB%82%98%EB%8A%94-%EA%B0%9C%EB%85%90-%ED%95%98%EB%82%98%EB%A7%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%9D%BC%EB%9D%BC-%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"한 테스트 함수에서 여러 개념을 테스트한다는 사실이 문제입니다 그러므로 가장 좋은 규칙은 개념 당 assert 문 수를 최소로 줄여라와 테스트 함수 하나는 개념 하나만 테스트하라라 입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 테스트 함수에서 여러 개념을 테스트한다는 사실이 문제입니다. 그러므로 가장 좋은 규칙은 “개념 당 assert 문 수를 최소로 줄여라”와 “테스트 함수 하나는 개념 하나만 테스트하라”라 입니다.</h2>\n<h3 id=\"테스트-당-assert-하나\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8B%B9-assert-%ED%95%98%EB%82%98\" aria-label=\"테스트 당 assert 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 당 assert 하나</h3>\n<ul>\n<li>assert 문이 단 하나인 함수는 결론이 하나라서 코드를 이해하기 쉽고 빠릅니다.</li>\n</ul>\n<h3 id=\"테스트-당-개념-하나\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8B%B9-%EA%B0%9C%EB%85%90-%ED%95%98%EB%82%98\" aria-label=\"테스트 당 개념 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 당 개념 하나</h3>\n<ul>\n<li>어쩌면 “테스트 함수마다 한 개념만 테스트하라”는 규칙이 더 나을 수 있습니다. 이것저것 잡다한 개념을 연속으로 테스트하는 긴 함수는 피합니다.</li>\n<li>독자적인 개념 세 개를 테스트하므로 독자적인 테스트 세 개로 쪼개야 마땅합니다. 이를 한 함수로 몰아넣으면 독자가 각 절이 거기에 존재하는 이유와 각 절이 테스트하는 개념을 모두 이해해야 합니다.</li>\n</ul>\n<h2 id=\"first\" style=\"position:relative;\"><a href=\"#first\" aria-label=\"first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>F.I.R.S.T</h2>\n<ul>\n<li>깨끗한 테스트는 다음 다섯 가지 규칙을 따르는데, 각 규칙에서 첫 글자를 따오 면 FIRST가 됩니다.</li>\n</ul>\n<h3 id=\"빠르게fast\" style=\"position:relative;\"><a href=\"#%EB%B9%A0%EB%A5%B4%EA%B2%8Cfast\" aria-label=\"빠르게fast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빠르게(Fast)</h3>\n<ul>\n<li>테스트는 빨라야 합니다.</li>\n<li>테스트는 빨리 돌아야 한다는 말입니다.</li>\n<li>테스트가 느리면 자주 돌릴 엄두를 못 냅니다.</li>\n<li>자주 돌리지 않으면 초반에 문제를 찾아내 고치지 못합니다.</li>\n<li>코드를 마음껏 정리하지도 못합니다.</li>\n<li>결국 코드 품질이 망가지기 시작합니다.</li>\n</ul>\n<h3 id=\"독립적으로independent\" style=\"position:relative;\"><a href=\"#%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9Cindependent\" aria-label=\"독립적으로independent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>독립적으로(Independent)</h3>\n<ul>\n<li>각 테스트는 서로 의존하면 안 됩니다.</li>\n<li>한 테스트가 다음 테스트가 실행될 환경을 준비해서는 안 됩니다.</li>\n<li>각 테스트는 독립적으로 그리고 어떤 순서로 실행해도 괜찮아야 합니다.</li>\n<li>테스트가 서로에게 의존하면 하나가 실패할 때 나머지도 잇달아 실패하므로 원인을 진단하기 어려워지며 후반 테스트가 찾아내야 할 결함이 숨겨집니다.</li>\n</ul>\n<h3 id=\"반복가능하게repeatabte\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8Crepeatabte\" aria-label=\"반복가능하게repeatabte permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복가능하게(Repeatabte)</h3>\n<ul>\n<li>테스트는 어떤 환경 에서도 반복 가능해야 합니다.</li>\n<li>실제 환경, QA 환경, 버스를 타고 집으로 가는 길에 사용하는 (네트워크에 연결되지 않은) 노트북 환경에서도 실행할 수 있어야 합니다.</li>\n<li>테스트가 돌아가지 않는 환경이 하나라도 있다면 테스트가 실패한 이유를 둘러댈 변명이 생깁니다. 게다가 환경이 지원되지 않기에 테스트를 수행하지 못하는 상황에 직면합니다.</li>\n</ul>\n<h3 id=\"자가검증하는self-validating\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EA%B0%80%EA%B2%80%EC%A6%9D%ED%95%98%EB%8A%94self-validating\" aria-label=\"자가검증하는self validating permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자가검증하는(Self-Validating)</h3>\n<ul>\n<li>테스트는 부울(bool) 값으로 결과를 내야 합니다. 성공 아니면 실패 입니다.</li>\n<li>통과 여부를 알려고 로그 파일을 읽게 만들어서는 안 됩니다.</li>\n<li>통과 여부를 보려고 텍스트 파일 두 개를 수작업으로 비교하게 만들어서도 안 됩니다.</li>\n<li>테스트가 스스로 성공과 실패를 가늠하지 않는다면 판단은 주관적이 되며 지루한 수작업 평가가 필요하게 됩니다.</li>\n</ul>\n<h3 id=\"적시에timely\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%8B%9C%EC%97%90timely\" aria-label=\"적시에timely permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적시에(Timely)</h3>\n<ul>\n<li>테스트는 적시에 작성해야 합니다.</li>\n<li>단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현합니다.</li>\n<li>실제 코드를 구현한 다음에 테스트 코드를 만들면 실제 코드가 테스트하기 어렵다는 사실을 발견할지도 모릅니다.</li>\n<li>어떤 실제 코드는 테스트하기 너무 어렵다고 판명날지 모릅니다. 테스트가 불가능하도록 실제 코드를 설계할지도 모릅니다.</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>테스트 코드는 실제 코드만큼이나 프로젝트 건강에 중요합니다.</li>\n<li>어쩌면 실제 코드보다 더 중요할 수도 있습니다.</li>\n<li>테스트 코드는 실제 코드의 <code class=\"language-text\">유연성, 유지보수성, 재사용성</code>을 보존하고 강화하기 때문입니다. 그러므로 테스트 코드는 지속적으로 깨끗하게 관리해야 합니다.</li>\n<li>표현력을 높이고 간결하게 정리합니다.</li>\n<li>테스트 API를 구현해 도메인 특화 언어(DSL)를 만듭니다. 그러면 그만큼 테스트 코드를 짜기가 쉬워집니다.</li>\n<li>테스트 코드가 방치되어 망가지면 실제 코드도 망가집니다. 테스트 코드를 깨끗하게 유지해야 합니다.</li>\n</ul>","frontmatter":{"title":"clean code 9장 단위 테스트","date":"March 27, 2020"}}},"pageContext":{"slug":"/clean code/clean-code-9장-단위-테스트/","previous":{"fields":{"slug":"/typescript/npm-모듈의-타입-선언-파일(.d.ts)을-커스텀-타입-선언-파일로-대체하는-법/"},"frontmatter":{"title":"npm 모듈의 타입 선언 파일(.d.ts)을 커스텀 타입 선언 파일로 대체하는 법","category":"typescript","draft":false}},"next":null}}}