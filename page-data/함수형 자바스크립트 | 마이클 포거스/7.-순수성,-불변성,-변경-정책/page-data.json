{"componentChunkName":"component---src-templates-blog-post-js","path":"/함수형 자바스크립트 | 마이클 포거스/7.-순수성,-불변성,-변경-정책/","result":{"data":{"site":{"siteMetadata":{"title":"yuni-q 블로그","author":"yuni-q","siteUrl":"https://yuni-q.github.io","comment":{"disqusShortName":"yuni-q","utterances":"yuni-q"},"sponsor":{"buyMeACoffeeId":"yuniq"}}},"markdownRemark":{"id":"93a99b66-b799-520c-9dac-2939bfd92bb6","excerpt":"함수형 프로그래밍은 단지 함수를 다루는 기법이 아닙니다. 함수형 프로그래밍은 소프트웨어 개발의 복잡성을 최소화하는 개발 방식을 추구합니다. 프로그램에서 발생하는 상태 변화를 최소화하거나 아예 없애는 것은 복잡성을 줄일 수 있는 방법 중 하나입니다. 순수성 _.map과 같이 동작하는 함수는 ‘순수하다(pure…","html":"<ul>\n<li>함수형 프로그래밍은 단지 함수를 다루는 기법이 아닙니다. 함수형 프로그래밍은 소프트웨어 개발의 복잡성을 최소화하는 개발 방식을 추구합니다. 프로그램에서 발생하는 상태 변화를 최소화하거나 아예 없애는 것은 복잡성을 줄일 수 있는 방법 중 하나입니다.</li>\n</ul>\n<h2 id=\"순수성\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%88%98%EC%84%B1\" aria-label=\"순수성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순수성</h2>\n<ul>\n<li>_.map과 같이 동작하는 함수는 ‘순수하다(pure)‘라고 표현합니다.</li>\n<li>\n<p>순수한 함수에는 다음과 같은 특징이 있습니다.</p>\n<ul>\n<li>오직 인자만을 이용해서 계산 결과가 만들어집니다.</li>\n<li>외적 요소에 영향을 받는 데이터에 의존하지 않습니다.</li>\n<li>자신의 바디 외부의 상태를 변화시킬 수 없는 구조입니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"순수성과-비순수성-구별하기\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%88%98%EC%84%B1%EA%B3%BC-%EB%B9%84%EC%88%9C%EC%88%98%EC%84%B1-%EA%B5%AC%EB%B3%84%ED%95%98%EA%B8%B0\" aria-label=\"순수성과 비순수성 구별하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순수성과 비순수성 구별하기</h2>\n<ul>\n<li>작은 범위에서 임의의 숫자를 반환하는 함수가 필요하다고 가정합니다. 이 함수는 결괏값을 예측할 수 없으므로 명확한 규격명세를 통과 할 수 없습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randString</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">len</span> <span class=\"token operator\">=></span> <span class=\"token function\">repeatedly</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 2758483948</span></code></pre></div>\n<ul>\n<li>randString의 경우 문자를 생성하는 파트와 문자를 연결하는 파트로 구성되어 있습니다. 다음처음 두 개의 함수를 이용해서 순수한 부분과 비순수한 부분으로 나눕니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateRandomChar</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">charGen<span class=\"token punctuation\">,</span> len</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">repeatedly</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> charGen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">generateString</span><span class=\"token punctuation\">(</span>generateRandomChar<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>partial를 이용해서 두 함수를 조립해 randomString을 만들 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> randomString <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>generateString<span class=\"token punctuation\">,</span> generateRandomChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이제 별도로 캡슈화한 순수한 부분만 독립적으로 테스트할 수 있습니다.</li>\n</ul>\n<h2 id=\"순수성과-멱등의-관계\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%88%98%EC%84%B1%EA%B3%BC-%EB%A9%B1%EB%93%B1%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"순수성과 멱등의 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순수성과 멱등의 관계</h2>\n<ul>\n<li>멱등이란 어떤 동작을 여러번 실행한 결과가 한 번 실행한 결과가 같은 상황을 가리킵니다.</li>\n</ul>\n<h2 id=\"변화-제어-정책\" style=\"position:relative;\"><a href=\"#%EB%B3%80%ED%99%94-%EC%A0%9C%EC%96%B4-%EC%A0%95%EC%B1%85\" aria-label=\"변화 제어 정책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변화 제어 정책</h2>\n<ul>\n<li>합리적으로 생각하면 모든 불필요한 변이를 제거할 수 있겠지만 머지않아 어떤 상태를 바꾸어야만 하는 상황이 반드시 올 것입니다. 변이할 수 있는 객체를 주고받으면 객체를 바꿨을 때 전체 프로그램에 영향을 미칠 수 있습니다.</li>\n<li>변화가 일어나는 것을 고립시킴으로써 변화의 범위를 제어할 수 있습니다. 즉, 임의의 객체를 직접 고치는 것보다는 컨테이너에 객체를 담아서 객체가 아닌 컨테이너를 고치는 방법이 바람직합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Lemonjon'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontainer<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Lemongrab'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>반면 다음에 컨테이너를 사용하지 않는 예제입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> being <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Lemonjon'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbeing<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Lemongrab'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>간접 접근 방법이 직접 변이 기법에 비해 더 큰 이득을 주는 것은 아닙니다. 하지만 간접 접근 개념을 좀 더 확장해서 함수 호출의 결과에서만 값이 바뀌도록 제한할 수 있습니다. 그리고 간접적인 함수를 추가함으로써 예측할 수 있는 함수에 의해 값이 바뀝니다.</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://peter-cho.gitbook.io/book/11/or-1\">함수형 자바스크립트 | 마이클 포거스</a></li>\n</ul>","frontmatter":{"title":"7. 순수성, 불변성, 변경 정책","date":"June 30, 2020"}}},"pageContext":{"slug":"/함수형 자바스크립트 | 마이클 포거스/7.-순수성,-불변성,-변경-정책/","previous":{"fields":{"slug":"/함수형 자바스크립트 | 마이클 포거스/8.-흐름-기반-프로그래밍/"},"frontmatter":{"title":"8. 흐름 기반 프로그래밍","category":"함수형 자바스크립트 | 마이클 포거스","draft":false}},"next":{"fields":{"slug":"/함수형 자바스크립트 | 마이클 포거스/9.-클래스를-이용하지-않는-프로그래밍/"},"frontmatter":{"title":"9. 클래스를 이용하지 않는 프로그래밍","category":"함수형 자바스크립트 | 마이클 포거스","draft":false}}}}}