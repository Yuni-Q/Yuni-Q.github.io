{"version":3,"sources":["webpack:///./src/pages/concentration.tsx"],"names":["Card","styled","div","CardInner","flipped","css","Face","FrontFace","BackFace","color","colors","colorCopy","concat","shuffle","shuffled","i","length","randomIndex","Math","floor","random","push","splice","Concentration","useState","cards","setCards","Array","fill","setFlipped","index","useRef","clicked","Set","useEffect","current","setTimeout","newFlipped","size","first","second","every","f","alert","map","card","idx","key","onClick","add"],"mappings":"oJAGMA,EAAOC,IAAOC,IAAV,sEAAGD,CAAH,0GASJE,EAAYF,IAAOC,IAAV,2EAAGD,CAAH,2HAOX,qBAAGG,QAECC,YADG,gCAIH,MAGFC,EAAOL,IAAOC,IAAV,sEAAGD,CAAH,iGAQJM,EAAYN,YAAOK,GAAV,2EAAGL,CAAH,sBAGTO,EAAWP,YAAOK,GAAV,0EAAGL,CAAH,+CAEE,qBAAGQ,SAGbC,EAAS,CAAC,MAAO,SAAU,SAAU,QAAS,QAAS,QACvDC,EAAYD,EAAOE,OAAOF,GAC1BG,EAAU,WAGd,IAFA,IAAMC,EAAW,GACXJ,EAAS,YAAIC,GACVI,EAAI,EAAGL,EAAOM,OAAS,EAAGD,GAAK,EAAG,CACzC,IAAME,EAAcC,KAAKC,MAAMD,KAAKE,SAAWV,EAAOM,QACtDF,EAASO,KAAKX,EAAOY,OAAOL,EAAa,GAAG,IAG9C,OAAOH,GAwFMS,UAnFkB,WAAM,MACXC,mBAASX,KAA5BY,EAD8B,KACvBC,EADuB,OAEPF,mBAC5BG,MAAMF,EAAMT,QAAQY,MAAK,IADpBxB,EAF8B,KAErByB,EAFqB,KAK/BC,EAAQC,iBAAO,GACfC,EAAUD,iBAAO,IAAIE,KA4C3B,OA3CAC,qBAAU,WAiBR,GAhBIJ,EAAMK,QAAUV,EAAMT,OAAS,GACjCoB,YAAW,WACTP,GAAW,SAACzB,GACV,IAAMiC,EAAa,YAAIjC,GAGvB,OAFAiC,EAAWP,EAAMK,UAAW,EAC5BL,EAAMK,SAAW,EACVE,OAER,KAEDP,EAAMK,UAAYV,EAAMT,OAAS,GACnCoB,YAAW,WACTP,EAAWF,MAAMF,EAAMT,QAAQY,MAAK,IACpCE,EAAMK,SAAW,IAChB,KAEwB,IAAzBH,EAAQG,QAAQG,KAAY,mBACFN,EAAQG,SAA7BI,EADuB,KAChBC,EADgB,KAE1Bf,EAAMc,KAAWd,EAAMe,KACzBR,EAAQG,QAAU,IAAIF,KAEpBR,EAAMc,KAAWd,EAAMe,IACzBJ,YAAW,WACTJ,EAAQG,QAAU,IAAIF,IACtBJ,GAAW,SAACzB,GACV,IAAMiC,EAAa,YAAIjC,GAGvB,OAFAiC,EAAWE,IAAS,EACpBF,EAAWG,IAAU,EACdH,OAER,KAGHP,EAAMK,QAAUV,EAAMT,OAAS,GAAKZ,EAAQqC,OAAM,SAACC,GAAD,QAASA,MAC7DN,YAAW,WACTO,MAAM,UACNjB,EAASb,KACTgB,EAAWF,MAAMF,EAAMT,QAAQY,MAAK,IACpCE,EAAMK,QAAU,IACf,OAEJ,CAAC/B,IAEF,6BACGqB,EAAMmB,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC9C,EAAD,CAAM+C,IAAQF,EAAL,IAAaC,GACpB,kBAAC3C,EAAD,CACEC,QAASA,EAAQ0C,GACjBE,QAAS,WAEH5C,EAAQ0C,IACVd,EAAQG,QAAQG,MAAQ,GACxBR,EAAMK,QAAUV,EAAMT,OAAS,IAIjCgB,EAAQG,QAAQc,IAAIH,GACpBjB,GAAW,SAACzB,GACV,IAAMiC,EAAa,YAAIjC,GAEvB,OADAiC,EAAWS,IAAO,EACXT,QAIX,kBAAC9B,EAAD,MACA,kBAACC,EAAD,CAAUC,MAAOoC","file":"component---src-pages-concentration-tsx-8f4005ab964fba0fe421.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Card = styled.div`\n  display: inline-block;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  width: 70px;\n  height: 100px;\n  perspective: 140px;\n`;\n\nconst CardInner = styled.div<{ flipped: boolean }>`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n  ${({ flipped }) =>\n    flipped\n      ? css`\n          transform: rotateY(180deg);\n        `\n      : ''};\n`;\n\nconst Face = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  backface-visibility: hidden;\n`;\n\nconst FrontFace = styled(Face)`\n  background: navy;\n`;\nconst BackFace = styled(Face)<{ color: string }>`\n  transform: rotateY(180deg);\n  background: ${({ color }) => color};\n`;\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'white', 'pink'];\nconst colorCopy = colors.concat(colors);\nconst shuffle = () => {\n  const shuffled = [];\n  const colors = [...colorCopy];\n  for (let i = 0; colors.length > 0; i += 1) {\n    const randomIndex = Math.floor(Math.random() * colors.length);\n    shuffled.push(colors.splice(randomIndex, 1)[0]);\n  }\n\n  return shuffled;\n};\n\nconst total = 12;\n\nconst Concentration: React.VFC = () => {\n  const [cards, setCards] = useState(shuffle());\n  const [flipped, setFlipped] = useState<boolean[]>(\n    Array(cards.length).fill(false),\n  );\n  const index = useRef(0);\n  const clicked = useRef(new Set<number>());\n  useEffect(() => {\n    if (index.current < cards.length + 1) {\n      setTimeout(() => {\n        setFlipped((flipped) => {\n          const newFlipped = [...flipped];\n          newFlipped[index.current] = true;\n          index.current += 1;\n          return newFlipped;\n        });\n      }, 100);\n    }\n    if (index.current === cards.length + 1) {\n      setTimeout(() => {\n        setFlipped(Array(cards.length).fill(false));\n        index.current += 1;\n      }, 3000);\n    }\n    if (clicked.current.size === 2) {\n      const [first, second] = [...clicked.current];\n      if (cards[first] === cards[second]) {\n        clicked.current = new Set();\n      }\n      if (cards[first] !== cards[second]) {\n        setTimeout(() => {\n          clicked.current = new Set();\n          setFlipped((flipped) => {\n            const newFlipped = [...flipped];\n            newFlipped[first] = false;\n            newFlipped[second] = false;\n            return newFlipped;\n          });\n        }, 500);\n      }\n    }\n    if (index.current > cards.length + 1 && flipped.every((f) => !!f)) {\n      setTimeout(() => {\n        alert('축하합니다.');\n        setCards(shuffle());\n        setFlipped(Array(cards.length).fill(false));\n        index.current = 0;\n      }, 500);\n    }\n  }, [flipped]);\n  return (\n    <div>\n      {cards.map((card, idx) => {\n        return (\n          <Card key={`${card}-${idx}`}>\n            <CardInner\n              flipped={flipped[idx]}\n              onClick={() => {\n                if (\n                  !!flipped[idx] ||\n                  clicked.current.size >= 2 ||\n                  index.current < cards.length + 1\n                ) {\n                  return;\n                }\n                clicked.current.add(idx);\n                setFlipped((flipped) => {\n                  const newFlipped = [...flipped];\n                  newFlipped[idx] = true;\n                  return newFlipped;\n                });\n              }}\n            >\n              <FrontFace />\n              <BackFace color={card} />\n            </CardInner>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Concentration;\n"],"sourceRoot":""}