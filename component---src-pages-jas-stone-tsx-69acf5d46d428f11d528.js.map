{"version":3,"file":"component---src-pages-jas-stone-tsx-69acf5d46d428f11d528.js","mappings":"wJAGA,MAAMA,EAAOC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAVJ,CAAU,yHAKLK,IAAA,IAAC,GAAEC,GAAID,EAAA,OAAMC,EAAK,UAAY,WAAW,IAE3CC,IAAA,IAAC,IAAEC,GAAKD,EAAA,OAAMC,EAAM,OAAS,OAAO,IAG9CC,EAAKT,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,gBAAAC,YAAA,gBAAVJ,CAAU,+EAILU,IAAA,IAAC,KAAEC,GAAMD,EAAA,OAAMC,EAAO,QAAU,MAAM,IAGhDC,GAAQZ,EAAAA,EAAAA,SAAOS,GAAGP,WAAA,CAAAC,YAAA,mBAAAC,YAAA,gBAAVJ,CAAU,4BAIlBa,EAASb,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAAC,YAAA,gBAAVJ,CAAU,8FAOnBc,GAAYd,EAAAA,EAAAA,SAAOa,GAAOX,WAAA,CAAAC,YAAA,uBAAAC,YAAA,gBAAdJ,CAAc,MAE1Be,EAAgBf,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,2BAAAC,YAAA,gBAAVJ,CAAU,yLAa1BgB,GAAWhB,EAAAA,EAAAA,SAAOe,GAAcb,WAAA,CAAAC,YAAA,sBAAAC,YAAA,gBAArBJ,CAAqB,iEAOhCiB,GAAUjB,EAAAA,EAAAA,SAAOe,GAAcb,WAAA,CAAAC,YAAA,qBAAAC,YAAA,gBAArBJ,CAAqB,qCAI/BkB,GAASlB,EAAAA,EAAAA,SAAOe,GAAcb,WAAA,CAAAC,YAAA,oBAAAC,YAAA,gBAArBJ,CAAqB,+CAM9BmB,EAAanB,EAAAA,QAAOoB,OAAMlB,WAAA,CAAAC,YAAA,wBAAAC,YAAA,gBAAbJ,CAAa,8CAM1BqB,EAAeC,IACnB,MAAMC,EAAMD,EACRE,KAAKC,KAAqB,EAAhBD,KAAKE,UACfF,KAAKC,KAAqB,EAAhBD,KAAKE,UACbC,EAASL,EAAS,GAAK,EACvBM,EAAKJ,KAAKC,KAAqB,EAAhBD,KAAKE,UAAgBC,EAE1C,MAAO,CACLJ,MACAK,KACAC,KAJWL,KAAKM,OAAOP,EAAMK,GAAM,GAKpC,EA4VH,UAzV4BG,KAC1B,MAAM,EAACC,EAAM,EAAEC,IAAaC,EAAAA,EAAAA,UAASb,GAAY,KAC3C,EAACc,EAAS,EAAEC,IAAgBF,EAAAA,EAAAA,UAASb,GAAY,KACjD,EAACgB,EAAS,EAAEC,IAAgBJ,EAAAA,EAAAA,UAAS,IACrC,EAACK,EAAM,EAAEC,IAAaN,EAAAA,EAAAA,UAAS,IAC/B,EAACO,EAAM,EAAEC,IAAaR,EAAAA,EAAAA,WAAS,IAC/B,EAACS,EAAM,EAAEC,IAAaV,EAAAA,EAAAA,UAAS,CACnCb,IACAA,IACAA,IACAA,IACAA,OAEI,EAACwB,EAAS,EAAEC,IAAgBZ,EAAAA,EAAAA,UAAS,CACzCb,IACAA,IACAA,IACAA,IACAA,OAEI,EAAC0B,EAAU,EAAEC,IAAiBd,EAAAA,EAAAA,UAAS,KACvC,EAACe,EAAO,EAAEC,IAAchB,EAAAA,EAAAA,UAAS,KACjC,EAACiB,EAAW,EAAEC,IAAkBlB,EAAAA,EAAAA,UAAS,OACzC,EAACmB,EAAW,EAAEC,IAAkBpB,EAAAA,EAAAA,UAAS,KACzC,EAACqB,EAAU,EAAEC,IAAiBtB,EAAAA,EAAAA,WAAS,IACvC,EAACuB,EAAS,EAAEC,IAAgBxB,EAAAA,EAAAA,UAAS,IACrC,EAACyB,EAAY,EAAEC,IAAmB1B,EAAAA,EAAAA,UAAS,GAC3C2B,EAAYC,IAA0C,IAAzC,KAAEnD,EAAI,KAAEoD,EAAI,MAAEC,EAAK,KAAEnC,EAAI,IAAEoC,EAAG,GAAEC,GAAIJ,EACrD,IAAKnD,EACH,OAEF,MAAMwD,EAAUtC,EAAOkC,EAAKE,GAAKpC,KACjC,GAAIsC,EAAU,EACZ,OAEF,MAAMC,EAAU,GAAHC,QAAAC,EAAAA,EAAAA,GACRzB,EAAU0B,QAAO,CAACC,EAAGC,IACfA,IAAUR,KACjB,CACF5C,MAEIqD,EAAW,GAAHL,QAAAC,EAAAA,EAAAA,GAAON,GAAK,CAAED,EAAKE,KAC7BC,GACFhB,EAAWwB,GACXlC,EAAU2B,GACVvB,EAAUwB,KAEVpB,EAAc0B,GACdpC,EAAa6B,GACbrB,EAAasB,GACf,EAEIO,EAAaC,IAAgD,IAA/C,KAAEjE,EAAI,GAAEuD,EAAE,IAAED,EAAG,YAAEY,EAAW,WAAEC,GAAYF,EAC5D,MAAMH,EAAQtB,EACd,GAAIxC,GAAQ0C,EAAYY,GACtB,OAEF,GAAItD,EAEF,YADAyC,EAAea,GAGjB,GAAoB,OAAhBd,EACF,OAEF,MAAM4B,GAAkB,IAAXN,EAAgBP,EAAK/B,EAAYH,EAAU6C,EAAYJ,GAC9D7C,EAAKkD,EAAWb,GAAKrC,GAAKmD,EAAKxD,IACrC,IAAImD,EAAW,GAEbA,EADE9C,GAAM,EACGkD,EAAWP,QAAO,CAACC,EAAGC,IAAUR,IAAQQ,IAExCK,EAAWE,KAAI,CAACD,EAAMN,IAC3BR,IAAQQ,EACHM,EAEF,IAAKA,EAAMnD,QAGtB,MAAMqD,EAAWF,EAAKnD,GAAKkD,EAAWb,GAAK1C,IAC3C,IAAI2D,EAAiB,IACN,IAAXT,GAAgBQ,GAAY,EAC9BC,EAAiBL,EAAYN,QAAO,CAACC,EAAGP,IAAQA,IAAQQ,KACpC,IAAXA,EACTS,EAAiBL,EAAYG,KAAI,CAACD,EAAMd,IAClCA,IAAQQ,EACHM,EAEF,IAAKA,EAAMnD,SAGpBsD,EAAiBL,EACbI,GAAY,GACdE,YACE,IAAMC,MAASlB,EAAK,WAAa,aACjC,KAGAA,EACF9B,GAAciD,IAAI,IAAWA,EAAMzD,GAAIqD,MAEvChD,GAAWoD,IAAI,IAAWA,EAAMzD,GAAIqD,OAIxCjC,EAAckB,EAAKgB,EAAiBR,GACpCxB,EAAWgB,EAAKQ,EAAWQ,GAC3B5B,GAAgBD,IACd,MAAMiC,GAAchB,EAAAA,EAAAA,GAAOjB,GAE3B,OADAiC,EAAeb,IAAS,EACjBa,CAAc,IAEvBlC,EAAe,OACA,IAAXqB,GACFjB,GAAc,EAChB,EAEI+B,EAAYC,IAAqC,IAApC,KAAE7E,EAAI,GAAEuD,EAAE,KAAEmB,EAAI,YAAER,GAAaW,EAChD,MAAMf,EAAQtB,EACd,GAAIxC,GAAQ4C,EACV,OAEF,GAAI5C,GAAwB,OAAhBwC,EAEV,YADAC,GAAgB,GAGlB,IAAKzC,GAAwB,OAAhBwC,EACX,OAEF,MAAM4B,GAAkB,IAAXN,EAAgBP,EAAK/B,EAAYH,EAAU6C,EAAYJ,GAC9D7C,EAAKyD,EAAKzD,GAAKmD,EAAKxD,IACpB0D,EAAWF,EAAKnD,GAAKyD,EAAK9D,IAkBhC,GAjBIK,GAAM,GACRuD,YACE,IAAMC,MAASlB,EAAK,WAAa,aACjC,KAGAA,GACFjC,GAAWoD,IAAI,IAAWA,EAAMzD,UACjB,IAAX6C,GACFrC,GAAciD,IAAI,IAAWA,EAAMzD,GAAIqD,QAGzC7C,GAAciD,IAAI,IAAWA,EAAMzD,UACpB,IAAX6C,GACFxC,GAAWoD,IAAI,IAAWA,EAAMzD,GAAIqD,QAGzB,IAAXR,EAAc,CAChB,IAAIS,EAAiB,GACjBD,GAAY,EACdC,EAAiBL,EAAYN,QAAO,CAACC,EAAGP,IAAQA,IAAQQ,KACpC,IAAXA,IACTS,EAAiBL,EAAYG,KAAI,CAACD,EAAMd,IAClCA,IAAQQ,EACHM,EAEF,IAAKA,EAAMnD,GAAIqD,MAGtBf,EACFlB,EAAckC,GAEdhC,EAAWgC,EAEf,CACA5B,GAAgBD,IACd,MAAMiC,GAAchB,EAAAA,EAAAA,GAAOjB,GAE3B,OADAiC,EAAeb,IAAS,EACjBa,CAAc,IAEvBlC,EAAe,OACA,IAAXqB,GACFjB,GAAc,EAChB,EAEF,OACEiC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC7E,EAAK,CAACD,MAAO8B,GACZgD,EAAAA,cAAA,WAAK,QACEA,EAAAA,cAAA,YAAOpD,GAAiB,IAACoD,EAAAA,cAAA,YAAO9B,IAEvC8B,EAAAA,cAAA,OAAKC,MAAO,CAAEC,UAAW,WACvBF,EAAAA,cAAC1F,EAAI,CACHS,KAAMiC,KAAYc,EAClBjD,IAAKmC,IAA2B,IAAjBU,EACfyC,QAASA,KACPL,EAAU,CACR5E,MAAO8B,EACPyB,IAAI,EACJmB,KAAMlD,EACN0C,YAAa5B,GACb,GAGJwC,EAAAA,cAAA,WAAK,QACLA,EAAAA,cAACxE,EAAO,KAAEkB,EAAUZ,KACpBkE,EAAAA,cAACvE,EAAM,KAAEiB,EAAUP,MAGvB6D,EAAAA,cAAA,OAAKC,MAAO,CAAEC,UAAW,SAAUE,OAAQ,MACxC9C,EAAWiC,KAAI,CAACD,EAAMd,IAEnBwB,EAAAA,cAACA,EAAAA,SAAc,CAACK,IAAQC,KAAKC,UAAUjB,GAAK,IAAId,GAC9CwB,EAAAA,cAAC1F,EAAI,CACHS,KAAMiC,GAAUY,EAAYY,GAC5B3D,IAAKmC,GAAUU,IAAgBc,EAC/B2B,QAASA,KACPjB,EAAW,CACThE,MAAO8B,EACPyB,IAAI,EACJW,YAAa5B,EACb6B,WAAY/B,EACZkB,OACA,GAGJwB,EAAAA,cAACzE,EAAQ,KAAE+D,EAAKlD,MAChB4D,EAAAA,cAACxE,EAAO,KAAE8D,EAAKxD,KACfkE,EAAAA,cAACvE,EAAM,KAAE6D,EAAKnD,UAO1B6D,EAAAA,cAAC3E,EAAS,KACR2E,EAAAA,cAAA,WAAK,KACJ5C,EAAUmC,KAAI,CAACD,EAAMd,IAElBwB,EAAAA,cAACA,EAAAA,SAAc,CAACK,IAAQC,KAAKC,UAAUjB,GAAK,IAAId,GAC9CwB,EAAAA,cAAC1F,EAAI,CACH6F,QAASA,KACP/B,EAAU,CACRlD,MAAO8B,EACPZ,KAAMQ,EACN0B,KAAMlB,EACNmB,MAAOjB,EACPkB,MACAC,IAAI,GACJ,GAGJuB,EAAAA,cAACzE,EAAQ,KAAE+D,EAAKlD,MAChB4D,EAAAA,cAACxE,EAAO,KAAE8D,EAAKxD,KACfkE,EAAAA,cAACvE,EAAM,KAAE6D,EAAKnD,SAMxB6D,EAAAA,cAAA,WACAA,EAAAA,cAACtE,EAAU,CACTyE,QAASA,KACHnD,GACFiB,GAAc7B,GAASL,KAAKyE,IAAIpE,EAAO,EAAG,MAC1CW,EAAUhB,KAAKyE,IAAIxC,EAAY,EAAG,OAElCG,GAAiB/B,GAASL,KAAKyE,IAAIpE,EAAO,EAAG,MAC7CS,EAAad,KAAKyE,IAAItC,EAAe,EAAG,MAE1CP,EAAe,MACfE,EAAe,IACfE,GAAc,GACdd,GAAWD,IAAYA,GAAO,GAEjC,QAGDgD,EAAAA,cAAChF,EAAE,CAACE,KAAM8B,GACRgD,EAAAA,cAAA,OAAKC,MAAO,CAAEC,UAAW,SAAUE,OAAQ,MACxC5C,EAAQ+B,KAAI,CAACD,EAAMd,IAEhBwB,EAAAA,cAACA,EAAAA,SAAc,CAACK,IAAQC,KAAKC,UAAUjB,GAAK,IAAId,GAC9CwB,EAAAA,cAAC1F,EAAI,CACHS,MAAOiC,GAAUY,EAAYY,GAC7B3D,KAAMmC,GAAUU,IAAgBc,EAChC2B,QAASA,KACPjB,EAAW,CACThE,KAAM8B,EACNyB,IAAI,EACJW,YAAa9B,EACb+B,WAAY7B,EACZgB,OACA,GAGJwB,EAAAA,cAACzE,EAAQ,KAAE+D,EAAKlD,MAChB4D,EAAAA,cAACxE,EAAO,KAAE8D,EAAKxD,KACfkE,EAAAA,cAACvE,EAAM,KAAE6D,EAAKnD,SAMxB6D,EAAAA,cAAA,OAAKC,MAAO,CAAEC,UAAW,WACvBF,EAAAA,cAAC1F,EAAI,CACHS,MAAOiC,KAAYc,EACnBjD,KAAMmC,IAA2B,IAAjBU,EAChByC,QAASA,KACPL,EAAU,CACR5E,KAAM8B,EACNyB,IAAI,EACJmB,KAAMrD,EACN6C,YAAa9B,GACb,GAGJ0C,EAAAA,cAAA,WAAK,QACLA,EAAAA,cAACxE,EAAO,KAAEe,EAAOT,KACjBkE,EAAAA,cAACvE,EAAM,KAAEc,EAAOJ,MAGpB6D,EAAAA,cAAA,WAAK,QACEA,EAAAA,cAAA,YAAOlD,GAAc,IAACkD,EAAAA,cAAA,YAAOhC,KAGtCgC,EAAAA,cAAC5E,EAAM,KACL4E,EAAAA,cAAA,WAAK,KACJ9C,EAAOqC,KAAI,CAACD,EAAMd,IAEfwB,EAAAA,cAACA,EAAAA,SAAc,CAACK,IAAQC,KAAKC,UAAUjB,GAAK,IAAId,GAC9CwB,EAAAA,cAAC1F,EAAI,CACH6F,QAASA,KACP/B,EAAU,CACRlD,KAAM8B,EACNZ,KAAMU,EACNwB,KAAMpB,EACNqB,MAAOf,EACPgB,MACAC,IAAI,GACJ,GAGJuB,EAAAA,cAACzE,EAAQ,KAAE+D,EAAKlD,MAChB4D,EAAAA,cAACxE,EAAO,KAAE8D,EAAKxD,KACfkE,EAAAA,cAACvE,EAAM,KAAE6D,EAAKnD,SAMvB,C","sources":["webpack://yuni-q-blog/./src/pages/jas-stone.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Card = styled.div<{ on?: boolean; off?: boolean }>`\n  width: 75px;\n  height: 120px;\n  display: inline-block;\n  position: relative;\n  border: solid ${({ on }) => (on ? '3px red' : '1px black')};\n  margin-bottom: 10px;\n  background: ${({ off }) => (off ? 'gray' : 'white')}; ;\n`;\n\nconst My = styled.div<{ turn: boolean }>`\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 50px;\n  background: ${({ turn }) => (turn ? 'white' : 'gray')};\n`;\n\nconst Rival = styled(My)`\n  vertical-align: bottom;\n`;\n\nconst MyDeck = styled.div`\n  display: inline-block;\n  vertical-align: top;\n  width: 300px;\n  background: silver;\n  text-align: center;\n`;\nconst RivalDeck = styled(MyDeck)``;\n\nconst CardAttribute = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  text-align: center;\n  line-height: 30px;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  display: inline-block;\n  position: absolute;\n  bottom: 0;\n  border: 1px solid black;\n`;\nconst CardCost = styled(CardAttribute)`\n  bottom: auto;\n  top: 0;\n  left: 0;\n  background-color: blue;\n  color: white;\n`;\nconst CardAtt = styled(CardAttribute)`\n  left: 0;\n  background-color: yellow;\n`;\nconst CardHp = styled(CardAttribute)`\n  right: 0;\n  background-color: red;\n  color: white;\n`;\n\nconst TurnButton = styled.button`\n  float: right;\n  position: relative;\n  top: -23px;\n`;\n\nconst CardFactory = (isHero?: boolean) => {\n  const att = isHero\n    ? Math.ceil(Math.random() * 2)\n    : Math.ceil(Math.random() * 5);\n  const heroHp = isHero ? 25 : 0;\n  const hp = Math.ceil(Math.random() * 5) + heroHp;\n  const cost = Math.floor((att + hp) / 2);\n  return {\n    att,\n    hp,\n    cost,\n  };\n};\n\nconst JasStone: React.VFC = () => {\n  const [myHero, setMyHero] = useState(CardFactory(true));\n  const [rivalHero, setRivalHero] = useState(CardFactory(true));\n  const [rivalCost, setRivalCost] = useState(1);\n  const [myCost, setMyCost] = useState(1);\n  const [myTurn, setMyTurn] = useState(true);\n  const [myDeck, setMyDeck] = useState([\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n  ]);\n  const [riverDeck, setRiverDeck] = useState([\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n    CardFactory(),\n  ]);\n  const [rivalFiled, setRivalFiled] = useState([]);\n  const [myFiled, setMyFiled] = useState([]);\n  const [selectFiled, setSelectFiled] = useState(null);\n  const [attackCards, setAttackCards] = useState([]);\n  const [attackHero, setAttackHero] = useState(false);\n  const [myMaxCost, setMyMaxCost] = useState(1);\n  const [rivalMaxCost, setRivalMaxCost] = useState(1);\n  const deckClick = ({ turn, deck, filed, cost, idx, my }) => {\n    if (!turn) {\n      return;\n    }\n    const newCost = cost - deck[idx].cost;\n    if (newCost < 0) {\n      return;\n    }\n    const newDeck = [\n      ...riverDeck.filter((_, index) => {\n        return index !== idx;\n      }),\n      CardFactory(),\n    ];\n    const newFiled = [...filed, deck[idx]];\n    if (my) {\n      setMyFiled(newFiled);\n      setMyCost(newCost);\n      setMyDeck(newDeck);\n    } else {\n      setRivalFiled(newFiled);\n      setRivalCost(newCost);\n      setRiverDeck(newDeck);\n    }\n  };\n  const filedClick = ({ turn, my, idx, masterFiled, slaveFiled }) => {\n    const index = selectFiled;\n    if (turn && attackCards[idx]) {\n      return;\n    }\n    if (turn) {\n      setSelectFiled(idx);\n      return;\n    }\n    if (selectFiled === null) {\n      return;\n    }\n    const card = index === -1 ? (my ? rivalHero : myHero) : masterFiled[index];\n    const hp = slaveFiled[idx].hp - card.att;\n    let newFiled = [];\n    if (hp <= 0) {\n      newFiled = slaveFiled.filter((_, index) => idx !== index);\n    } else {\n      newFiled = slaveFiled.map((card, index) => {\n        if (idx !== index) {\n          return card;\n        }\n        return { ...card, hp };\n      });\n    }\n    const masterHp = card.hp - slaveFiled[idx].att;\n    let masterNewFiled = [];\n    if (index !== -1 && masterHp <= 0) {\n      masterNewFiled = masterFiled.filter((_, idx) => idx !== index);\n    } else if (index !== -1) {\n      masterNewFiled = masterFiled.map((card, idx) => {\n        if (idx !== index) {\n          return card;\n        }\n        return { ...card, hp };\n      });\n    } else {\n      masterNewFiled = masterFiled;\n      if (masterHp <= 0) {\n        setTimeout(\n          () => alert(`${my ? '승리하셨습니다.' : '패배하였습니다.'}`),\n          500,\n        );\n      }\n      if (my) {\n        setRivalHero((hero) => ({ ...hero, hp: masterHp }));\n      } else {\n        setMyHero((hero) => ({ ...hero, hp: masterHp }));\n      }\n    }\n\n    setRivalFiled(my ? masterNewFiled : newFiled);\n    setMyFiled(my ? newFiled : masterNewFiled);\n    setAttackCards((attackCards) => {\n      const newAttackCards = [...attackCards];\n      newAttackCards[index] = true;\n      return newAttackCards;\n    });\n    setSelectFiled(null);\n    if (index === -1) {\n      setAttackHero(true);\n    }\n  };\n  const heroClick = ({ turn, my, hero, masterFiled }) => {\n    const index = selectFiled;\n    if (turn && attackHero) {\n      return;\n    }\n    if (turn && selectFiled === null) {\n      setSelectFiled(-1);\n      return;\n    }\n    if (!turn && selectFiled === null) {\n      return;\n    }\n    const card = index === -1 ? (my ? rivalHero : myHero) : masterFiled[index];\n    const hp = hero.hp - card.att;\n    const masterHp = card.hp - hero.att;\n    if (hp <= 0) {\n      setTimeout(\n        () => alert(`${my ? '패배하였습니다.' : '승리하셨습니다.'}`),\n        500,\n      );\n    }\n    if (my) {\n      setMyHero((hero) => ({ ...hero, hp }));\n      if (index === -1) {\n        setRivalHero((hero) => ({ ...hero, hp: masterHp }));\n      }\n    } else {\n      setRivalHero((hero) => ({ ...hero, hp }));\n      if (index === -1) {\n        setMyHero((hero) => ({ ...hero, hp: masterHp }));\n      }\n    }\n    if (index !== -1) {\n      let masterNewFiled = [];\n      if (masterHp <= 0) {\n        masterNewFiled = masterFiled.filter((_, idx) => idx !== index);\n      } else if (index !== -1) {\n        masterNewFiled = masterFiled.map((card, idx) => {\n          if (idx !== index) {\n            return card;\n          }\n          return { ...card, hp: masterHp };\n        });\n      }\n      if (my) {\n        setRivalFiled(masterNewFiled);\n      } else {\n        setMyFiled(masterNewFiled);\n      }\n    }\n    setAttackCards((attackCards) => {\n      const newAttackCards = [...attackCards];\n      newAttackCards[index] = true;\n      return newAttackCards;\n    });\n    setSelectFiled(null);\n    if (index === -1) {\n      setAttackHero(true);\n    }\n  };\n  return (\n    <>\n      <Rival turn={!myTurn}>\n        <div>\n          코스트: <span>{rivalCost}</span>/<span>{rivalMaxCost}</span>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <Card\n            off={!myTurn && !!attackHero}\n            on={!myTurn && selectFiled === -1}\n            onClick={() => {\n              heroClick({\n                turn: !myTurn,\n                my: false,\n                hero: rivalHero,\n                masterFiled: myFiled,\n              });\n            }}\n          >\n            <div>적 영웅</div>\n            <CardAtt>{rivalHero.att}</CardAtt>\n            <CardHp>{rivalHero.hp}</CardHp>\n          </Card>\n        </div>\n        <div style={{ textAlign: 'center', height: 150 }}>\n          {rivalFiled.map((card, idx) => {\n            return (\n              <React.Fragment key={`${JSON.stringify(card)}-${idx}`}>\n                <Card\n                  off={!myTurn && attackCards[idx]}\n                  on={!myTurn && selectFiled === idx}\n                  onClick={() => {\n                    filedClick({\n                      turn: !myTurn,\n                      my: false,\n                      masterFiled: myFiled,\n                      slaveFiled: rivalFiled,\n                      idx,\n                    });\n                  }}\n                >\n                  <CardCost>{card.cost}</CardCost>\n                  <CardAtt>{card.att}</CardAtt>\n                  <CardHp>{card.hp}</CardHp>\n                </Card>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </Rival>\n      <RivalDeck>\n        <div>덱</div>\n        {riverDeck.map((card, idx) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(card)}-${idx}`}>\n              <Card\n                onClick={() => {\n                  deckClick({\n                    turn: !myTurn,\n                    cost: rivalCost,\n                    deck: riverDeck,\n                    filed: rivalFiled,\n                    idx,\n                    my: false,\n                  });\n                }}\n              >\n                <CardCost>{card.cost}</CardCost>\n                <CardAtt>{card.att}</CardAtt>\n                <CardHp>{card.hp}</CardHp>\n              </Card>\n            </React.Fragment>\n          );\n        })}\n      </RivalDeck>\n      <hr />\n      <TurnButton\n        onClick={() => {\n          if (myTurn) {\n            setMyMaxCost((cost) => Math.min(cost + 1, 10));\n            setMyCost(Math.min(myMaxCost + 1, 10));\n          } else {\n            setRivalMaxCost((cost) => Math.min(cost + 1, 10));\n            setRivalCost(Math.min(rivalMaxCost + 1, 10));\n          }\n          setSelectFiled(null);\n          setAttackCards([]);\n          setAttackHero(false);\n          setMyTurn((myTurn) => !myTurn);\n        }}\n      >\n        턴넘기기\n      </TurnButton>\n      <My turn={myTurn}>\n        <div style={{ textAlign: 'center', height: 150 }}>\n          {myFiled.map((card, idx) => {\n            return (\n              <React.Fragment key={`${JSON.stringify(card)}-${idx}`}>\n                <Card\n                  off={!!myTurn && attackCards[idx]}\n                  on={!!myTurn && selectFiled === idx}\n                  onClick={() => {\n                    filedClick({\n                      turn: myTurn,\n                      my: true,\n                      masterFiled: rivalFiled,\n                      slaveFiled: myFiled,\n                      idx,\n                    });\n                  }}\n                >\n                  <CardCost>{card.cost}</CardCost>\n                  <CardAtt>{card.att}</CardAtt>\n                  <CardHp>{card.hp}</CardHp>\n                </Card>\n              </React.Fragment>\n            );\n          })}\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <Card\n            off={!!myTurn && !!attackHero}\n            on={!!myTurn && selectFiled === -1}\n            onClick={() => {\n              heroClick({\n                turn: myTurn,\n                my: true,\n                hero: myHero,\n                masterFiled: rivalFiled,\n              });\n            }}\n          >\n            <div>내 영웅</div>\n            <CardAtt>{myHero.att}</CardAtt>\n            <CardHp>{myHero.hp}</CardHp>\n          </Card>\n        </div>\n        <div>\n          코스트: <span>{myCost}</span>/<span>{myMaxCost}</span>\n        </div>\n      </My>\n      <MyDeck>\n        <div>덱</div>\n        {myDeck.map((card, idx) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(card)}-${idx}`}>\n              <Card\n                onClick={() => {\n                  deckClick({\n                    turn: myTurn,\n                    cost: myCost,\n                    deck: myDeck,\n                    filed: myFiled,\n                    idx,\n                    my: true,\n                  });\n                }}\n              >\n                <CardCost>{card.cost}</CardCost>\n                <CardAtt>{card.att}</CardAtt>\n                <CardHp>{card.hp}</CardHp>\n              </Card>\n            </React.Fragment>\n          );\n        })}\n      </MyDeck>\n    </>\n  );\n};\n\nexport default JasStone;\n"],"names":["Card","styled","div","withConfig","displayName","componentId","_ref","on","_ref2","off","My","_ref3","turn","Rival","MyDeck","RivalDeck","CardAttribute","CardCost","CardAtt","CardHp","TurnButton","button","CardFactory","isHero","att","Math","ceil","random","heroHp","hp","cost","floor","JasStone","myHero","setMyHero","useState","rivalHero","setRivalHero","rivalCost","setRivalCost","myCost","setMyCost","myTurn","setMyTurn","myDeck","setMyDeck","riverDeck","setRiverDeck","rivalFiled","setRivalFiled","myFiled","setMyFiled","selectFiled","setSelectFiled","attackCards","setAttackCards","attackHero","setAttackHero","myMaxCost","setMyMaxCost","rivalMaxCost","setRivalMaxCost","deckClick","_ref4","deck","filed","idx","my","newCost","newDeck","concat","_toConsumableArray","filter","_","index","newFiled","filedClick","_ref5","masterFiled","slaveFiled","card","map","masterHp","masterNewFiled","setTimeout","alert","hero","newAttackCards","heroClick","_ref6","React","style","textAlign","onClick","height","key","JSON","stringify","min"],"sourceRoot":""}