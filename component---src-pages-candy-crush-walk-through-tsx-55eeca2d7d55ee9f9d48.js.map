{"version":3,"file":"component---src-pages-candy-crush-walk-through-tsx-55eeca2d7d55ee9f9d48.js","mappings":"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","sources":["webpack://yuni-q-blog/./src/pages/candy-crush-walk-through.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Grid = styled.div`\n  height: 560px;\n  width: 560px;\n  display: flex;\n  flex-wrap: wrap;\n  > div {\n    width: 70px;\n    height: 70px;\n  }\n`;\n\nconst candyColor = [\n  'url(\"/images/candy/red-candy.png\")',\n  'url(\"/images/candy/yellow-candy.png\")',\n  'url(\"/images/candy/orange-candy.png\")',\n  'url(\"/images/candy/purple-candy.png\")',\n  'url(\"/images/candy/green-candy.png\")',\n  'url(\"/images/candy/blue-candy.png\")',\n];\n\nconst WITH = 8;\n\nconst CandyCrushWalkThrough: React.FC = () => {\n  const [colorBeingDragged, setColorBeingDragged] = useState('');\n  const [colorBeingReplaced, setColorBeingReplaced] = useState('');\n  const [squareIdBeingDragged, setSquareIdBeingDragged] = useState(0);\n  const [squareIdBeingReplaced, setSquareIdBeingReplaced] = useState(0);\n  const [endMove, setEndMove] = useState(true);\n  const [colors, setColors] = useState<string[]>(\n    Array(WITH * WITH)\n      .fill(0)\n      .map(() => candyColor[Math.floor(Math.random() * candyColor.length)]),\n  );\n  const [score, setScore] = useState(0);\n  const checkGrid = useCallback(() => {\n    const newColor = [...colors];\n    const checkBox = (check) => {\n      for (let i = 0; i < 62; i++) {\n        const { array, notValid } = check(i);\n        const decidedColor = newColor[i];\n        if (notValid.includes(i)) {\n          continue;\n        }\n        if (array.every((index) => colors[index] === decidedColor)) {\n          array.forEach((index) => {\n            newColor[index] = '';\n          });\n        }\n      }\n    };\n    const checkFourRowIndexArray = (i: number) => {\n      return {\n        array: [i, i + 1, i + 2, i + 3],\n        notValid: [\n          5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47,\n          53, 54, 55,\n        ],\n      };\n    };\n    const checkThreeRowIndexArray = (i: number) => {\n      return {\n        array: [i, i + 1, i + 2],\n        notValid: [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55],\n      };\n    };\n    const checkFourColumnIndexArray = (i: number) => {\n      return {\n        array: [i, i + WITH, i + WITH * 2, i + WITH * 3],\n        notValid: [],\n      };\n    };\n    const checkThreeColumnIndexArray = (i: number) => {\n      return {\n        array: [i, i + WITH, i + WITH * 2],\n        notValid: [],\n      };\n    };\n    checkBox(checkFourRowIndexArray);\n    checkBox(checkFourColumnIndexArray);\n    checkBox(checkThreeRowIndexArray);\n    checkBox(checkThreeColumnIndexArray);\n\n    if (JSON.stringify(colors) !== JSON.stringify(newColor)) {\n      const newScore = newColor.reduce((prev, curr) => {\n        if (curr === '') {\n          return prev + 1;\n        }\n        return prev;\n      }, 0);\n      setScore((score) => {\n        return score + newScore;\n      });\n      setColors(newColor);\n    }\n  }, [colors]);\n  useEffect(() => {\n    checkGrid();\n  }, [endMove]);\n  useEffect(() => {\n    const newColor = [...colors];\n    const moveDown = () => {\n      for (let i = 0; i < 56; i++) {\n        if (newColor[i + WITH] === '') {\n          newColor[i + WITH] = newColor[i];\n          newColor[i] = '';\n        }\n        const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n        const isFirstRow = firstRow.includes(i);\n        if (isFirstRow && newColor[i] === '') {\n          newColor[i] =\n            candyColor[Math.floor(Math.random() * candyColor.length)];\n        }\n      }\n\n      if (JSON.stringify(colors) !== JSON.stringify(newColor)) {\n        setColors(newColor);\n      } else {\n        setEndMove((endMove) => !endMove);\n      }\n    };\n    moveDown();\n  }, [colors]);\n  return (\n    <Grid>\n      {colors.map((color, idx) => {\n        return (\n          <div\n            onDragStart={(e) => {\n              const target = e.target as HTMLDivElement;\n              setColorBeingDragged(target.style.background);\n              setSquareIdBeingDragged(parseInt(target.id, 10));\n            }}\n            onDragOver={(e) => {\n              e.preventDefault();\n            }}\n            onDragEnter={(e) => {\n              e.preventDefault();\n            }}\n            // onDragLeave={(e) => {\n            //   console.log(e);\n            // }}\n            onDrop={(e) => {\n              const target = e.target as HTMLDivElement;\n              setColorBeingReplaced(target.style.background);\n              const id = parseInt(target.id, 10);\n              setSquareIdBeingReplaced(id);\n              setColors((colors) => {\n                const newColors = [...colors];\n                newColors[id] = colorBeingDragged;\n                newColors[squareIdBeingDragged] = target.style.background;\n                return newColors;\n              });\n            }}\n            onDragEnd={(e) => {\n              const validMoves = [\n                squareIdBeingDragged - 1,\n                squareIdBeingDragged - WITH,\n                squareIdBeingDragged + 1,\n                squareIdBeingDragged + WITH,\n              ];\n              const validMove = validMoves.includes(squareIdBeingReplaced);\n\n              if (squareIdBeingReplaced && validMove) {\n                setSquareIdBeingReplaced(null);\n                checkGrid();\n              } else if (squareIdBeingReplaced && !validMove) {\n                setColors((colors) => {\n                  const newColors = [...colors];\n                  newColors[squareIdBeingReplaced] = colorBeingReplaced;\n                  newColors[squareIdBeingDragged] = colorBeingDragged;\n                  return newColors;\n                });\n              } else {\n                setColors((colors) => {\n                  const newColors = [...colors];\n                  newColors[squareIdBeingDragged] = colorBeingDragged;\n                  return newColors;\n                });\n              }\n            }}\n            draggable\n            id={idx.toString()}\n            style={{ background: color }}\n            key={idx}\n          />\n        );\n      })}\n      {score}점\n    </Grid>\n  );\n};\n\nexport default CandyCrushWalkThrough;\n\n// 4각형 없애기\n// 아이템 만들기\n"],"names":["Grid","styled","div","withConfig","displayName","componentId","candyColor","CandyCrushWalkThrough","colorBeingDragged","setColorBeingDragged","useState","colorBeingReplaced","setColorBeingReplaced","squareIdBeingDragged","setSquareIdBeingDragged","squareIdBeingReplaced","setSquareIdBeingReplaced","endMove","setEndMove","colors","setColors","Array","WITH","fill","map","Math","floor","random","length","score","setScore","checkGrid","useCallback","newColor","_toConsumableArray","checkBox","check","i","array","notValid","decidedColor","includes","every","index","forEach","JSON","stringify","newScore","reduce","prev","curr","useEffect","moveDown","React","color","idx","onDragStart","e","target","style","background","parseInt","id","onDragOver","preventDefault","onDragEnter","onDrop","newColors","onDragEnd","validMove","draggable","toString","key"],"sourceRoot":""}