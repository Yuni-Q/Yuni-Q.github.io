{"version":3,"sources":["webpack:///./src/pages/candy-crush-walk-through.tsx"],"names":["Grid","styled","div","candyColor","CandyCrushWalkThrough","useState","colorBeingDragged","setColorBeingDragged","colorBeingReplaced","setColorBeingReplaced","squareIdBeingDragged","setSquareIdBeingDragged","squareIdBeingReplaced","setSquareIdBeingReplaced","endMove","setEndMove","Array","WITH","fill","map","Math","floor","random","length","colors","setColors","score","setScore","checkGrid","useCallback","newColor","checkBox","check","i","array","notValid","decidedColor","isBlank","includes","every","index","forEach","useEffect","setTimeout","JSON","stringify","color","idx","onDragStart","e","target","style","background","parseInt","id","onDragOver","preventDefault","onDragEnter","onDrop","newColors","onDragEnd","validMove","draggable","toString","key"],"mappings":"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","file":"component---src-pages-candy-crush-walk-through-tsx-c40b2c867c961e62e865.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Grid = styled.div`\n  height: 560px;\n  width: 560px;\n  display: flex;\n  flex-wrap: wrap;\n  > div {\n    width: 70px;\n    height: 70px;\n  }\n`;\n\nconst candyColor = [\n  'url(\"/images/candy/red-candy.png\")',\n  'url(\"/images/candy/yellow-candy.png\")',\n  'url(\"/images/candy/orange-candy.png\")',\n  'url(\"/images/candy/purple-candy.png\")',\n  'url(\"/images/candy/green-candy.png\")',\n  'url(\"/images/candy/blue-candy.png\")',\n];\n\nconst WITH = 8;\n\nconst CandyCrushWalkThrough: React.VFC = () => {\n  const [colorBeingDragged, setColorBeingDragged] = useState('');\n  const [colorBeingReplaced, setColorBeingReplaced] = useState('');\n  const [squareIdBeingDragged, setSquareIdBeingDragged] = useState(0);\n  const [squareIdBeingReplaced, setSquareIdBeingReplaced] = useState(0);\n  const [endMove, setEndMove] = useState(true);\n  const [colors, setColors] = useState<string[]>(\n    Array(WITH * WITH)\n      .fill(0)\n      .map(() => candyColor[Math.floor(Math.random() * candyColor.length)]),\n  );\n  const [score, setScore] = useState(0);\n  const checkGrid = useCallback(() => {\n    const newColor = [...colors];\n    const checkBox = (check) => {\n      for (let i = 0; i < 62; i++) {\n        const { array, notValid } = check(i);\n        const decidedColor = newColor[i];\n        const isBlank = newColor[i] === '';\n        if (notValid.includes(i)) {\n          continue;\n        }\n        if (\n          array.every((index) => newColor[index] === decidedColor && !isBlank)\n        ) {\n          setScore((score) => {\n            return score + array.length;\n          });\n          array.forEach((index) => {\n            newColor[index] = '';\n          });\n          setColors(newColor);\n        }\n      }\n    };\n    const checkFourRowIndexArray = (i: number) => {\n      return {\n        array: [i, i + 1, i + 2, i + 3],\n        notValid: [\n          5,\n          6,\n          7,\n          13,\n          14,\n          15,\n          21,\n          22,\n          23,\n          29,\n          30,\n          31,\n          37,\n          38,\n          39,\n          45,\n          46,\n          47,\n          53,\n          54,\n          55,\n        ],\n      };\n    };\n    const checkThreeRowIndexArray = (i: number) => {\n      return {\n        array: [i, i + 1, i + 2],\n        notValid: [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55],\n      };\n    };\n    const checkFourColumnIndexArray = (i: number) => {\n      return {\n        array: [i, i + WITH, i + WITH * 2, i + WITH * 3],\n        notValid: [],\n      };\n    };\n    const checkThreeColumnIndexArray = (i: number) => {\n      return {\n        array: [i, i + WITH, i + WITH * 2],\n        notValid: [],\n      };\n    };\n    checkBox(checkFourRowIndexArray);\n    checkBox(checkFourColumnIndexArray);\n    checkBox(checkThreeRowIndexArray);\n    checkBox(checkThreeColumnIndexArray);\n  }, [colors]);\n  useEffect(() => {\n    if (endMove === true) {\n      checkGrid();\n      setEndMove(false);\n    }\n  }, [endMove]);\n  useEffect(() => {\n    const newColor = [...colors];\n    const moveDown = () => {\n      for (let i = 0; i < 56; i++) {\n        if (newColor[i + WITH] === '') {\n          newColor[i + WITH] = newColor[i];\n          newColor[i] = '';\n        }\n        const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n        const isFirstRow = firstRow.includes(i);\n        if (isFirstRow && newColor[i] === '') {\n          newColor[i] =\n            candyColor[Math.floor(Math.random() * candyColor.length)];\n        }\n      }\n\n      if (JSON.stringify(colors) !== JSON.stringify(newColor)) {\n        setColors(newColor);\n      } else {\n        setEndMove(true);\n      }\n    };\n    setTimeout(moveDown, 50);\n  }, [colors]);\n  return (\n    <Grid>\n      {colors.map((color, idx) => {\n        return (\n          <div\n            onDragStart={(e) => {\n              const target = e.target as HTMLDivElement;\n              setColorBeingDragged(target.style.background);\n              setSquareIdBeingDragged(parseInt(target.id, 10));\n            }}\n            onDragOver={(e) => {\n              e.preventDefault();\n            }}\n            onDragEnter={(e) => {\n              e.preventDefault();\n            }}\n            // onDragLeave={(e) => {\n            //   console.log(e);\n            // }}\n            onDrop={(e) => {\n              const target = e.target as HTMLDivElement;\n              setColorBeingReplaced(target.style.background);\n              const id = parseInt(target.id, 10);\n              setSquareIdBeingReplaced(id);\n              setColors((colors) => {\n                const newColors = [...colors];\n                newColors[id] = colorBeingDragged;\n                newColors[squareIdBeingDragged] = target.style.background;\n                return newColors;\n              });\n            }}\n            onDragEnd={(e) => {\n              const validMoves = [\n                squareIdBeingDragged - 1,\n                squareIdBeingDragged - WITH,\n                squareIdBeingDragged + 1,\n                squareIdBeingDragged + WITH,\n              ];\n              const validMove = validMoves.includes(squareIdBeingReplaced);\n\n              if (squareIdBeingReplaced && validMove) {\n                setSquareIdBeingReplaced(null);\n                checkGrid();\n              } else if (squareIdBeingReplaced && !validMove) {\n                setColors((colors) => {\n                  const newColors = [...colors];\n                  newColors[squareIdBeingReplaced] = colorBeingReplaced;\n                  newColors[squareIdBeingDragged] = colorBeingDragged;\n                  return newColors;\n                });\n              } else {\n                setColors((colors) => {\n                  const newColors = [...colors];\n                  newColors[squareIdBeingDragged] = colorBeingDragged;\n                  return newColors;\n                });\n              }\n            }}\n            draggable\n            id={idx.toString()}\n            style={{ background: color }}\n            key={idx}\n          />\n        );\n      })}\n      {score}ì \n    </Grid>\n  );\n};\n\nexport default CandyCrushWalkThrough;\n\n// TODO : 3:3 ì ê°ì´ ìì´ì§ê¸°\n"],"sourceRoot":""}