{"version":3,"file":"component---src-pages-mine-search-tsx-50cf9f2476bfd5e6d822.js","mappings":"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","sources":["webpack://yuni-q-blog/./src/pages/mine-search.tsx"],"sourcesContent":["import React, {\n  createContext,\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from 'react';\n\n// 상태값 저장\nexport const CODE = {\n  MINE: -7,\n  NORMAL: -1,\n  QUESTION: -2,\n  FLAG: -3,\n  QUESTION_MINE: -4,\n  FLAG_MINE: -5,\n  CLICKED_MINE: -6,\n  OPEN_MINE: -8,\n  OPENED: 0, // 0 이상이면 다 opened\n};\n\n// 공동 Store\nexport const TableContext = createContext({\n  tableData: [],\n  halted: true,\n  dispatch: null,\n  openedCount: 0,\n});\n\n// 초기값\nconst initialState = {\n  tableData: [],\n  data: {\n    row: 0,\n    cell: 0,\n    mine: 0,\n  },\n  timer: 0,\n  result: '',\n  halted: true,\n  openedCount: 0,\n};\n\n// 지뢰 세팅\nconst plantMine = (row: number, cell: number, mine: number) => {\n  const candidate = Array(row * cell)\n    .fill(0)\n    .map((_, i) => {\n      return i;\n    });\n  const shuffle = [];\n  while (candidate.length > row * cell - mine) {\n    const chosen = candidate.splice(\n      Math.floor(Math.random() * candidate.length),\n      1,\n    )[0];\n    shuffle.push(chosen);\n  }\n  const data = [];\n  for (let i = 0; i < row; i++) {\n    const rowData = [];\n    data.push(rowData);\n    for (let j = 0; j < cell; j++) {\n      rowData.push(CODE.NORMAL);\n    }\n  }\n\n  for (let k = 0; k < shuffle.length; k++) {\n    const ver = Math.floor(shuffle[k] / cell);\n    const hor = shuffle[k] % cell;\n    data[ver][hor] = CODE.MINE;\n  }\n\n  return data;\n};\n\n// action\nexport const START_GAME = 'START_GAME';\nexport const OPEN_CELL = 'OPEN_CELL';\nexport const CLICK_MINE = 'CLICK_MINE';\nexport const FLAG_CELL = 'FLAG_CELL';\nexport const QUESTION_CELL = 'QUESTION_CELL';\nexport const NORMALIZE_CELL = 'NORMALIZE_CELL';\nexport const INCREMENT_TIMER = 'INCREMENT_TIMER';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        ...state,\n        data: {\n          row: action.row,\n          cell: action.cell,\n          mine: action.mine,\n        },\n        openedCount: 0,\n        tableData: plantMine(action.row, action.cell, action.mine),\n        halted: false,\n        timer: 0,\n      };\n    case OPEN_CELL: {\n      // 메모리 연결 끊기\n      const tableData = [...state.tableData];\n      tableData.forEach((row, i) => {\n        tableData[i] = [...row];\n      });\n\n      if (\n        !state.openedCount &&\n        CODE.MINE === tableData[action.row][action.cell]\n      ) {\n        const searched = [];\n        for (let i = 0; i < state.data.row; i++) {\n          const rowData = [];\n          searched.push(rowData);\n          for (let j = 0; j < state.data.cell; j++) {\n            rowData.push(false);\n          }\n        }\n        let end = false;\n        const transferMine = (rowIndex: number, cellIndex: number) => {\n          if (end) {\n            return;\n          }\n          if (\n            rowIndex < 0 ||\n            rowIndex >= state.data.row ||\n            cellIndex < 0 ||\n            cellIndex >= state.data.cell\n          ) {\n            return;\n          }\n          if (searched[rowIndex][cellIndex]) {\n            return;\n          }\n          searched[rowIndex][cellIndex] = true;\n          if (CODE.NORMAL === tableData[rowIndex]?.[cellIndex]) {\n            tableData[rowIndex][cellIndex] = CODE.MINE;\n            end = true;\n            return;\n          } else {\n            transferMine(rowIndex - 1, cellIndex - 1);\n            transferMine(rowIndex - 1, cellIndex);\n            transferMine(rowIndex - 1, cellIndex + 1);\n            transferMine(rowIndex, cellIndex - 1);\n            transferMine(rowIndex, cellIndex + 1);\n            transferMine(rowIndex + 1, cellIndex - 1);\n            transferMine(rowIndex + 1, cellIndex);\n            transferMine(rowIndex + 1, cellIndex + 1);\n          }\n        };\n        transferMine(action.row, action.cell);\n        tableData[action.row][action.cell] = CODE.NORMAL;\n      }\n\n      const checked = [];\n      let openedCount = 0;\n      const checkAround = (row: number, cell: number) => {\n        // 지뢰 찾기 범위 밖이라면 수행하지 않음\n        if (\n          row < 0 ||\n          row >= tableData.length ||\n          cell < 0 ||\n          cell >= tableData[0].length\n        ) {\n          return { ...state };\n        }\n\n        // 닫힌 칸만 수행\n        if (\n          [\n            CODE.OPENED,\n            CODE.FLAG,\n            CODE.FLAG_MINE,\n            CODE.QUESTION_MINE,\n            CODE.QUESTION,\n          ].includes(tableData[row][cell])\n        ) {\n          return;\n        }\n        // 한 번 연칸은 무시하기\n        if (checked.includes(row + '/' + cell)) {\n          return;\n        }\n\n        // 열어본 칸 배열에 추가\n        checked.push(row + '/' + cell);\n\n        // 좌우\n        let around = [tableData[row][cell - 1], tableData[row][cell + 1]];\n        // 위\n        if (tableData[row - 1]) {\n          around = around.concat([\n            tableData[row - 1][cell - 1],\n            tableData[row - 1][cell],\n            tableData[row - 1][cell + 1],\n          ]);\n        }\n        // 아래\n        if (tableData[row + 1]) {\n          around = around.concat([\n            tableData[row + 1][cell - 1],\n            tableData[row + 1][cell],\n            tableData[row + 1][cell + 1],\n          ]);\n        }\n        // 열 수 없는 칸 필터링\n        const count = around.filter(function (v) {\n          return [CODE.MINE, CODE.FLAG_MINE, CODE.QUESTION_MINE].includes(v);\n        }).length;\n\n        // 주변에 모든 것을 열 수 있음\n        if (count === 0) {\n          // 윗 칸 오픈\n          if (row > -1) {\n            const near = [];\n            // 게임 범위 안이라면\n            if (row - 1 > -1) {\n              near.push([row - 1, cell - 1]);\n              near.push([row - 1, cell]);\n              near.push([row - 1, cell + 1]);\n            }\n            near.push([row, cell - 1]);\n            near.push([row, cell + 1]);\n            // 게임 범위 안이라면\n            if (row + 1 < tableData.length) {\n              near.push([row + 1, cell - 1]);\n              near.push([row + 1, cell]);\n              near.push([row + 1, cell + 1]);\n            }\n            near.forEach((n) => {\n              // 해당 칸이 열려 있지 않다면 해당 칸 여는 알고리즘 시작\n              if (tableData[n[0]][n[1]] !== CODE.OPENED) {\n                checkAround(n[0], n[1]);\n              }\n            });\n          }\n        }\n\n        // 내 칸이 닫힌 칸이면 카운트 증가\n        if (tableData[row][cell] === CODE.NORMAL) {\n          openedCount += 1;\n        }\n        // 지뢰 갯수 추가\n        tableData[row][cell] = count;\n      };\n      // 해당 칸 오픈\n      checkAround(action.row, action.cell);\n      let halted = false;\n      let result = '';\n      // 총 갯수 - 지뢰 갯수 === 이때까지 연 갯수 + 이번에 연 갯수\n      if (\n        state.data.row * state.data.cell - state.data.mine ===\n        state.openedCount + openedCount\n      ) {\n        // 승리\n        halted = true;\n        result = `${state.timer}초만에 승리하셨습니다`;\n      }\n      return {\n        ...state,\n        tableData,\n        openedCount: state.openedCount + openedCount,\n        halted,\n        result,\n      };\n    }\n    case CLICK_MINE: {\n      const tableData = [...state.tableData];\n      tableData.forEach((row, i) => {\n        tableData[i] = [...row];\n      });\n\n      tableData.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n          if (\n            tableData[rowIndex][cellIndex] === CODE.MINE ||\n            tableData[rowIndex][cellIndex] === CODE.FLAG_MINE ||\n            tableData[rowIndex][cellIndex] === CODE.QUESTION_MINE\n          ) {\n            tableData[rowIndex][cellIndex] = CODE.OPEN_MINE;\n          }\n        });\n      });\n      tableData[action.row][action.cell] = CODE.CLICKED_MINE;\n      return {\n        ...state,\n        tableData,\n        halted: true,\n      };\n    }\n    case FLAG_CELL: {\n      const tableData = [...state.tableData];\n      tableData[action.row] = [...state.tableData[action.row]];\n      if (tableData[action.row][action.cell] === CODE.MINE) {\n        tableData[action.row][action.cell] = CODE.FLAG_MINE;\n      } else {\n        tableData[action.row][action.cell] = CODE.FLAG;\n      }\n      return {\n        ...state,\n        tableData,\n      };\n    }\n    case QUESTION_CELL: {\n      const tableData = [...state.tableData];\n      tableData[action.row] = [...state.tableData[action.row]];\n      if (tableData[action.row][action.cell] === CODE.FLAG_MINE) {\n        tableData[action.row][action.cell] = CODE.QUESTION_MINE;\n      } else {\n        tableData[action.row][action.cell] = CODE.QUESTION;\n      }\n      return {\n        ...state,\n        tableData,\n      };\n    }\n    case NORMALIZE_CELL: {\n      const tableData = [...state.tableData];\n      tableData[action.row] = [...state.tableData[action.row]];\n      if (tableData[action.row][action.cell] === CODE.QUESTION_MINE) {\n        tableData[action.row][action.cell] = CODE.MINE;\n      } else {\n        tableData[action.row][action.cell] = CODE.NORMAL;\n      }\n      return {\n        ...state,\n        tableData,\n      };\n    }\n    case INCREMENT_TIMER: {\n      return {\n        ...state,\n        timer: state.timer + 1,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n// 게임\n// TODO : 마우스 양쪽 클릭 구현하기\nconst MineSearch: React.VFC = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { tableData, halted, timer, result, openedCount } = state;\n\n  const value = useMemo(\n    () => ({ tableData, halted, dispatch, openedCount }),\n    [tableData, halted, openedCount],\n  );\n\n  useEffect(() => {\n    let timer;\n    if (halted === false) {\n      // 게임 시간초 증가\n      timer = setInterval(() => {\n        dispatch({ type: INCREMENT_TIMER });\n      }, 1000);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [halted]);\n\n  return (\n    <TableContext.Provider value={value}>\n      <Form />\n      <div>{timer}</div>\n      <Table />\n      <div>{result}</div>\n    </TableContext.Provider>\n  );\n};\n\nexport default MineSearch;\n\nconst Form = memo(() => {\n  const [row, setRow] = useState(10);\n  const [cell, setCell] = useState(10);\n  const [mine, setMine] = useState(20);\n  const { dispatch } = useContext(TableContext);\n\n  const onChangeRow = useCallback((e) => {\n    setRow(e.target.value);\n  }, []);\n\n  const onChangeCell = useCallback((e) => {\n    setCell(e.target.value);\n  }, []);\n\n  const onChangeMine = useCallback((e) => {\n    setMine(e.target.value);\n  }, []);\n\n  const onClickBtn = useCallback(() => {\n    dispatch({ type: START_GAME, row, cell, mine });\n  }, [row, cell, mine]);\n\n  return (\n    <div>\n      <input\n        type=\"number\"\n        placeholder=\"세로\"\n        value={row}\n        onChange={onChangeRow}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"가로\"\n        value={cell}\n        onChange={onChangeCell}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"지뢰\"\n        value={mine}\n        onChange={onChangeMine}\n      />\n      <button onClick={onClickBtn}>시작</button>\n    </div>\n  );\n});\n\nconst Table = memo(() => {\n  const { tableData } = useContext(TableContext);\n  return (\n    <table style={{ width: 'unset' }}>\n      <tbody>\n        {Array(tableData.length)\n          .fill(0)\n          .map((_, i) => {\n            return <Tr key={`tr-${i}`} rowIndex={i} />;\n          })}\n      </tbody>\n    </table>\n  );\n});\n\nconst Tr = memo(({ rowIndex }: { rowIndex: number }) => {\n  const { tableData } = useContext(TableContext);\n\n  if (!tableData[0]?.length) {\n    return;\n  }\n\n  return (\n    <tr>\n      {Array(tableData[0].length)\n        .fill(0)\n        .map((_, i) => (\n          <Td key={`td-${i}`} rowIndex={rowIndex} cellIndex={i} />\n        ))}\n    </tr>\n  );\n});\n\nconst getTdStyle = (code) => {\n  switch (code) {\n    case CODE.NORMAL:\n    case CODE.MINE:\n      return {\n        background: '#444',\n      };\n    case CODE.CLICKED_MINE:\n      return {\n        background: 'red',\n      };\n    case CODE.OPEN_MINE:\n      return {\n        background: 'white',\n      };\n    case CODE.OPENED:\n      return {\n        background: 'white',\n      };\n    case CODE.QUESTION_MINE:\n    case CODE.QUESTION:\n      return {\n        background: 'yellow',\n      };\n    case CODE.FLAG_MINE:\n    case CODE.FLAG:\n      return {\n        background: 'red',\n      };\n    default:\n      return {\n        background: 'white',\n      };\n  }\n};\n\nconst getTdText = (code) => {\n  switch (code) {\n    case CODE.NORMAL:\n      return '';\n    case CODE.MINE:\n      return 'X';\n    case CODE.CLICKED_MINE:\n    case CODE.OPEN_MINE:\n      return '펑';\n    case CODE.FLAG_MINE:\n    case CODE.FLAG:\n      return '!';\n    case CODE.QUESTION_MINE:\n    case CODE.QUESTION:\n      return '?';\n    default:\n      return code || '';\n  }\n};\n\nconst Td = memo(\n  ({ rowIndex, cellIndex }: { rowIndex: number; cellIndex: number }) => {\n    const { tableData, dispatch, halted, openedCount } =\n      useContext(TableContext);\n\n    const onClickTd = useCallback(() => {\n      if (halted) {\n        return;\n      }\n      if (!openedCount) {\n        dispatch({ type: OPEN_CELL, row: rowIndex, cell: cellIndex });\n        return;\n      }\n\n      switch (tableData[rowIndex][cellIndex]) {\n        // 아래 케이스일 경우 모두 무시\n        case CODE.OPENED:\n        case CODE.FLAG_MINE:\n        case CODE.FLAG:\n        case CODE.QUESTION_MINE:\n        case CODE.QUESTION:\n          return;\n\n        case CODE.NORMAL:\n          dispatch({ type: OPEN_CELL, row: rowIndex, cell: cellIndex });\n          return;\n\n        case CODE.MINE:\n          dispatch({ type: CLICK_MINE, row: rowIndex, cell: cellIndex });\n          return;\n\n        default:\n          return;\n      }\n    }, [tableData[rowIndex][cellIndex], halted, openedCount]);\n\n    // 우클릭 시 이벤트\n    const onRightClickTd = useCallback(\n      (e) => {\n        e.preventDefault();\n\n        // 게임이 끝났을 경우 무시\n        if (halted) {\n          return;\n        }\n\n        switch (tableData[rowIndex][cellIndex]) {\n          case CODE.NORMAL:\n          case CODE.MINE:\n            dispatch({ type: FLAG_CELL, row: rowIndex, cell: cellIndex });\n            return;\n          case CODE.FLAG_MINE:\n          case CODE.FLAG:\n            dispatch({ type: QUESTION_CELL, row: rowIndex, cell: cellIndex });\n            return;\n          case CODE.QUESTION_MINE:\n          case CODE.QUESTION:\n            dispatch({ type: NORMALIZE_CELL, row: rowIndex, cell: cellIndex });\n            return;\n          default:\n            return;\n        }\n      },\n      [tableData[rowIndex][cellIndex], halted],\n    );\n\n    return (\n      <RealTd\n        onClickTd={onClickTd}\n        onRightClickTd={onRightClickTd}\n        data={tableData[rowIndex][cellIndex]}\n      />\n    );\n  },\n);\n\nconst RealTd = memo(\n  ({\n    onClickTd,\n    onRightClickTd,\n    data,\n  }: {\n    onClickTd: () => void;\n    onRightClickTd: (e: React.MouseEvent<HTMLTableDataCellElement>) => void;\n    data: string;\n  }) => {\n    return (\n      <td\n        style={{\n          ...getTdStyle(data),\n          width: 60,\n          height: 60,\n          padding: 0,\n          textAlign: 'center',\n        }}\n        onClick={onClickTd}\n        onContextMenu={onRightClickTd}\n      >\n        {getTdText(data)}\n      </td>\n    );\n  },\n);\n"],"names":["CODE","MINE","NORMAL","QUESTION","FLAG","QUESTION_MINE","FLAG_MINE","CLICKED_MINE","OPEN_MINE","OPENED","TableContext","createContext","tableData","halted","dispatch","openedCount","initialState","data","row","cell","mine","timer","result","plantMine","candidate","Array","fill","map","_","i","shuffle","length","chosen","splice","Math","floor","random","push","rowData","j","k","ver","hor","START_GAME","OPEN_CELL","CLICK_MINE","FLAG_CELL","QUESTION_CELL","NORMALIZE_CELL","INCREMENT_TIMER","reducer","state","action","type","_toConsumableArray","forEach","searched","end","transferMine","rowIndex","cellIndex","_tableData$rowIndex","checked","checkAround","includes","around","concat","count","filter","v","near","n","MineSearch","useReducer","value","useMemo","useEffect","setInterval","clearInterval","React","Provider","Form","Table","memo","setRow","useState","setCell","setMine","useContext","onChangeRow","useCallback","e","target","onChangeCell","onChangeMine","onClickBtn","placeholder","onChange","onClick","style","width","Tr","key","_ref","_tableData$","Td","getTdStyle","code","background","_ref2","onClickTd","onRightClickTd","preventDefault","RealTd","_ref3","height","padding","textAlign","onContextMenu","getTdText"],"sourceRoot":""}