{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["data","location","initialCount","Storage","initialCategory","CATEGORY_TYPE","ALL","useState","count","setCount","countRef","useRef","category","setCategory","siteMetadata","site","countOfInitialPost","configs","posts","allMarkdownRemark","edges","categories","map","node","frontmatter","useEffect","sendGAEvent","GA_ACTION","EXPOSE","pathname","split","HOME_TITLE","window","addEventListener","onScroll","passive","IOManager","ScrollManager","removeEventListener","current","document","querySelector","scrollIntoView","behavior","inline","block","currentPos","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","prev","dismissCondition","triggerCondition","length","title","decodeURIComponent","keywords","selectCategory"],"mappings":"qRAsBe,sBAAwB,IAArBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,EAAeC,IAAiB,GAChCC,EAAkBD,IAAoBE,IAAcC,KAFrB,EAGXC,mBAASL,GAA5BM,EAH8B,KAGvBC,EAHuB,KAI/BC,EAAWC,iBAAOH,GAJa,EAKLD,mBAASH,GAAlCQ,EAL8B,KAKpBC,EALoB,KAO7BC,EAAiBd,EAAKe,KAAtBD,aACAE,EAAuBF,EAAaG,QAApCD,mBACFE,EAAQlB,EAAKmB,kBAAkBC,MAC/BC,EAAa,IAAOH,EAAMI,KAAI,qBAAGC,KAAgBC,YAAYZ,aAEnEa,qBAAU,WAUR,OATAC,YACE,OACAC,IAAUC,QACV3B,aAAA,EAAAA,EAAU4B,SAASC,MAAM,SAAS,GAAGA,MAAM,KAAK,KAAMC,KAExDC,OAAOC,iBAAP,SAAkCC,EAAU,CAAEC,SAAS,IACvDC,MACAC,MAEO,WACLL,OAAOM,oBAAP,SAAqCJ,GACrCE,MACAC,SAED,IAEHZ,qBAAU,WACRf,EAAS6B,QAAU/B,EACnB4B,MACAjC,IAAiBK,GACjBL,IAAoBS,MAGtBa,qBAAU,WACRe,SAASC,cAAc,0BAA0BC,eAAe,CAC9DC,SAAU,SACVC,OAAQ,SACRC,MAAO,UAER,CAACjC,IAEJ,IAIMsB,EAAW,WACf,IAAMY,EAAad,OAAOe,QAAUf,OAAOgB,YACrCC,EAAe,kBAtDzB,SAAqBH,GACnB,OAAOI,MAA0BJ,EAqDJK,CAAYL,GAxDzB,IA4Dd,OAAOM,KAAmB,kBAAM3C,GAAS,SAAC4C,GAAD,OAAUA,EAAO,OAAI,CAC5DC,iBAAkB,kBAAOL,KACzBM,iBAAkB,kBAAMN,KAJxB/B,EAAMsC,OAAS9C,EAAS6B,QAAUvB,IAE7BoC,IAKT,OACE,kBAAC,IAAD,CACEnD,SAAUA,EACVwD,MACExD,EAAQ,IACAyD,mBACFzD,EAAS4B,SAASC,MAAM,SAAS,GAAGA,MAAM,KAAK,IAEjDhB,EAAa2C,OAGnB,kBAAC,IAAD,CACEA,OAAOxD,aAAA,EAAAA,EAAU4B,SAASC,MAAM,SAAS,GAAGA,MAAM,KAAK,KAAMC,IAC7D4B,SAAU7C,EAAa6C,WAEzB,kBAAC,IAAD,CACEtC,WAAYA,EACZT,SAAUA,EACVgD,eAjCiB,SAAChD,GACtBC,EAAYD,MAkCV,kBAAC,IAAD,CACEM,MAAOA,EACPF,mBAAoBA,EACpBR,MAAOA,EACPI,SAAUA","file":"component---src-templates-tags-tsx-6064fbb6d9c1d93517e7.js","sourcesContent":["import { graphql } from 'gatsby';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Category } from '../components/category';\r\nimport { Contents } from '../components/contents';\r\nimport { Head } from '../components/head';\r\nimport { CATEGORY_TYPE, HOME_TITLE } from '../constants';\r\nimport { Layout } from '../layout';\r\nimport * as Dom from '../utils/dom';\r\nimport * as EventManager from '../utils/event-manager';\r\nimport sendGAEvent, { GA_ACTION } from '../utils/ga';\r\nimport * as ScrollManager from '../utils/scroll';\r\nimport * as Storage from '../utils/storage';\r\nimport * as IOManager from '../utils/visible';\r\n\r\nconst DEST_POS = 316;\r\nconst BASE_LINE = 80;\r\n\r\nfunction getDistance(currentPos) {\r\n  return Dom.getDocumentHeight() - currentPos;\r\n}\r\n\r\nexport default ({ data, location }) => {\r\n  const initialCount = Storage.getCount(1);\r\n  const initialCategory = Storage.getCategory(CATEGORY_TYPE.ALL);\r\n  const [count, setCount] = useState(initialCount);\r\n  const countRef = useRef(count);\r\n  const [category, setCategory] = useState(initialCategory);\r\n\r\n  const { siteMetadata } = data.site;\r\n  const { countOfInitialPost } = siteMetadata.configs;\r\n  const posts = data.allMarkdownRemark.edges;\r\n  const categories = _.uniq(posts.map(({ node }) => node.frontmatter.category));\r\n\r\n  useEffect(() => {\r\n    sendGAEvent(\r\n      'tags',\r\n      GA_ACTION.EXPOSE,\r\n      location?.pathname.split('tags/')[1].split('/')[0] || HOME_TITLE,\r\n    );\r\n    window.addEventListener(`scroll`, onScroll, { passive: false });\r\n    IOManager.init();\r\n    ScrollManager.init();\r\n\r\n    return () => {\r\n      window.removeEventListener(`scroll`, onScroll);\r\n      IOManager.destroy();\r\n      ScrollManager.destroy();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    countRef.current = count;\r\n    IOManager.refreshObserver();\r\n    Storage.setCount(count);\r\n    Storage.setCategory(category);\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.querySelector('li[aria-selected=true]').scrollIntoView({\r\n      behavior: 'smooth',\r\n      inline: 'center',\r\n      block: 'end',\r\n    });\r\n  }, [category]);\r\n\r\n  const selectCategory = (category) => {\r\n    setCategory(category);\r\n  };\r\n\r\n  const onScroll = () => {\r\n    const currentPos = window.scrollY + window.innerHeight;\r\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE;\r\n    const doesNeedMore = () =>\r\n      posts.length > countRef.current * countOfInitialPost;\r\n\r\n    return EventManager.toFit(() => setCount((prev) => prev + 1), {\r\n      dismissCondition: () => !isTriggerPos(),\r\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\r\n    })();\r\n  };\r\n  return (\r\n    <Layout\r\n      location={location}\r\n      title={\r\n        location\r\n          ? `#${decodeURIComponent(\r\n              location.pathname.split('tags/')[1].split('/')[0],\r\n            )}`\r\n          : siteMetadata.title\r\n      }\r\n    >\r\n      <Head\r\n        title={location?.pathname.split('tags/')[1].split('/')[0] || HOME_TITLE}\r\n        keywords={siteMetadata.keywords}\r\n      />\r\n      <Category\r\n        categories={categories}\r\n        category={category}\r\n        selectCategory={selectCategory}\r\n      />\r\n      <Contents\r\n        posts={posts}\r\n        countOfInitialPost={countOfInitialPost}\r\n        count={count}\r\n        category={category}\r\n      />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        configs {\r\n          countOfInitialPost\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: {\r\n        frontmatter: {\r\n          tags: { in: [$tag] }\r\n          category: { ne: null }\r\n          draft: { eq: false }\r\n        }\r\n      }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt(pruneLength: 300)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"DD [<span>] MMMM [</span>]\")\r\n            title\r\n            category\r\n            tags\r\n            draft\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}